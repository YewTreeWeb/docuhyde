(window.webpackJsonp=window.webpackJsonp||[]).push([["vendors"],{"+71H":function(t,e,r){"use strict";var n=r("qjSr"),o=r("aTj1"),i=r("UBAn"),a=r("2GRh"),u=r("RJ/z"),c=r("hemD"),s=r("XsaD"),f=r("TU3P"),l=r("R5T6"),p=r("Khql"),y=r("VbLK"),h=Object("a"),v="a"!==h[0]||!(0 in h),d=p("String.prototype.split");t.exports=function(t){var e,r=f(this),p=v&&y(r)?d(r,""):r,h=s(p.length);if(!c(t))throw new TypeError("Array.prototype.map callback must be a function");arguments.length>1&&(e=arguments[1]);for(var b=n(r,h),g=0;g<h;){var m=l(g),w=u(r,m);if(w){var O=a(r,m),j=o(t,e,[O,g,r]);i(b,m,j)}g+=1}return b}},"+7c2":function(t,e,r){"use strict";var n=r("7r9i"),o=r("aOl1"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise,{allSettled:t},{allSettled:function(){return Promise.allSettled!==t}}),t}},"+85J":function(t,e,r){"use strict";var n=r("XhRf"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padEnd:t},{padEnd:function(){return String.prototype.padEnd!==t}}),t}},"+IY2":function(t,e,r){"use strict";var n=r("aJg2");t.exports=function(){return"function"==typeof Object.entries?Object.entries:n}},"+okW":function(t,e,r){"use strict";var n=r("2GRh"),o=r("1SyS"),i=r("6ll1"),a=r("ciGR"),u=r("R5T6"),c=r("RIFg"),s=r("5xAX"),f=r("Zoej"),l=RegExp,p="flags"in RegExp.prototype,y=function(t){var e=this;if("Object"!==c(e))throw new TypeError('"this" value must be an Object');var r=u(t),y=function(t,e){var r="flags"in e?n(e,"flags"):u(s(e));return{flags:r,matcher:new t(p&&"string"==typeof r?e:t===l?e.source:e,r)}}(i(e,l),e),h=y.flags,v=y.matcher,d=a(n(e,"lastIndex"));return o(v,"lastIndex",d,!0),function(t,e,r,n){if("String"!==c(e))throw new TypeError('"S" value must be a String');if("Boolean"!==c(r))throw new TypeError('"global" value must be a Boolean');if("Boolean"!==c(n))throw new TypeError('"fullUnicode" value must be a Boolean');return new f(t,e,r,n)}(v,r,h.indexOf("g")>-1,h.indexOf("u")>-1)},h=Object.defineProperty,v=Object.getOwnPropertyDescriptor;if(h&&v){var d=v(y,"name");d&&d.configurable&&h(y,"name",{value:"[Symbol.matchAll]"})}t.exports=y},"/RMt":function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;o||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||a||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(a.call(t),u)try{u.call(t)}catch(t){return!0}return t instanceof o}catch(t){}return!1}},"/sVA":function(t,e,r){"use strict";var n=Object.prototype.toString;if(r("UVaH")()){var o=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(t){if("symbol"==typeof t)return!0;if("[object Symbol]"!==n.call(t))return!1;try{return function(t){return"symbol"==typeof t.valueOf()&&i.test(o.call(t))}(t)}catch(t){return!1}}}else t.exports=function(t){return!1}},"03Sc":function(t,e,r){"use strict";var n=r("HvP7"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{fromEntries:t},{fromEntries:function(){return Object.fromEntries!==t}}),t}},"0QyR":function(t,e,r){"use strict";r("ib7Q")(),r("HdW7")(),r("baqT")(),r("+85J")(),r("dEfh")(),r("GQul")},"0nHT":function(t,e,r){"use strict";(function(t){r("szxn"),r("D2IK"),r("570s"),r("bZMm"),"undefined"!=typeof window&&(r("7K3S"),r("hJwt"),r("dwco").polyfill(),r("7cND"),r("1yfs"),r("rTV3"),r("eYmq"),r("Wr5T"),r("lt0f")),r("lfCk"),r("DpIS"),t.requestIdleCallback=r("ucYh"),t.cancelIdleCallback=t.requestIdleCallback.cancelIdleCallback,"function"==typeof Symbol&&Symbol.iterator&&"function"==typeof TouchList&&"function"!=typeof TouchList.prototype[Symbol.iterator]&&(TouchList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator])}).call(this,r("yLpj"))},"0yco":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=r("u1xu"),i=r("IFfy"),a=r("xhJ2"),u=r("WXWk"),c=n.floor,s=n.abs;t.exports=function(t){var e=o(t);return i(e)?0:0!==e&&a(e)?u(e)*c(s(e)):e}},"1Fze":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zkC3");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},"1KsK":function(t,e,r){"use strict";var n=Object.prototype.toString;t.exports=function(t){var e=n.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===n.call(t.callee)),r}},"1Soo":function(t,e,r){"use strict";var n=r("6ayh")("%Array%"),o=!n.isArray&&r("Khql")("Object.prototype.toString");t.exports=n.isArray||function(t){return"[object Array]"===o(t)}},"1SyS":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e,r,a){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");if("Boolean"!==i(a))throw new n("Assertion failed: `Throw` must be a Boolean");if(a)return t[e]=r,!0;try{t[e]=r}catch(t){return!1}}},"1l3A":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=n.floor,i=n.abs,a=r("IFfy"),u=r("xhJ2");t.exports=function(t){if("number"!=typeof t||a(t)||!u(t))return!1;var e=i(t);return o(e)===e}},"1seS":function(t,e,r){"use strict";var n=Array.prototype.slice,o=r("1KsK"),i=Object.keys,a=i?function(t){return i(t)}:r("sYn3"),u=Object.keys;a.shim=function(){Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return o(t)?u(n.call(t)):u(t)}):Object.keys=a;return Object.keys||a},t.exports=a},"1yfs":function(t,e){!function(){if(window.matchMedia&&window.matchMedia("all").addListener)return!1;var t=window.matchMedia,e=t("only all").matches,r=!1,n=0,o=[],i=function(e){clearTimeout(n),n=setTimeout((function(){for(var e=0,r=o.length;e<r;e++){var n=o[e].mql,i=o[e].listeners||[],a=t(n.media).matches;if(a!==n.matches){n.matches=a;for(var u=0,c=i.length;u<c;u++)i[u].call(window,n)}}}),30)};window.matchMedia=function(n){var a=t(n),u=[],c=0;return a.addListener=function(t){e&&(r||(r=!0,window.addEventListener("resize",i,!0)),0===c&&(c=o.push({mql:a,listeners:u})),u.push(t))},a.removeListener=function(t){for(var e=0,r=u.length;e<r;e++)u[e]===t&&u.splice(e,1)},a}}()},"22yB":function(t,e,r){"use strict";var n=r("yN6O");t.exports=function(){return Array.prototype.flat||n}},"2GRh":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true, got "+o(e));return t[e]}},"2Nju":function(t,e,r){"use strict";var n=r("oNNP"),o=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!u)return"[object RegExp]"===a.call(t);var e=i(t,"lastIndex");return!(!e||!n(e,"value"))&&function(t){try{var e=t.lastIndex;return t.lastIndex=0,o.call(t),!0}catch(t){return!1}finally{t.lastIndex=e}}(t)}},"2fPq":function(t,e,r){"use strict";r("y14U"),r("fpfb"),r("V5gn")},"3UD+":function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},"3hvG":function(t,e,r){"use strict";var n=r("6ayh")("%String%"),o=r("zkC3"),i=r("R5T6");t.exports=function(t){var e=o(t,n);return"symbol"==typeof e?e:i(e)}},"45zb":function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,o=Object.prototype.toString,i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o.call(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o.call(t)&&"[object Function]"===o.call(t.callee)},u=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=u?i:a},"4GK0":function(t,e,r){"use strict";r("xmva"),r("yNSe"),r("nvDk"),r("FhVV"),r("b+qZ")},"570s":function(t,e){!function(t){"use strict";t.console||(t.console={});for(var e,r,n=t.console,o=function(){},i=["memory"],a="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");e=i.pop();)n[e]||(n[e]={});for(;r=a.pop();)n[r]||(n[r]=o)}("undefined"==typeof window?this:window)},"5xAX":function(t,e,r){"use strict";var n=r("82c2"),o=r("RLeF"),i=r("VwiP"),a=r("V+xs"),u=r("HH6Z"),c=o(i);n(c,{getPolyfill:a,implementation:i,shim:u}),t.exports=c},"5yQQ":function(t,e,r){"use strict";var n=r("nRDI");t.exports=function(){if("undefined"!=typeof document){if(document.contains)return document.contains;if(document.body&&document.body.contains)return document.body.contains}return n}},"6B6L":function(t,e,r){"use strict";var n=r("JxQ3"),o=r("6ayh")("%TypeError%"),i=r("aTj1"),a=r("2GRh"),u=r("xby5"),c=r("hemD"),s=r("JwX2"),f=r("m2++"),l=r("p2h6"),p=r("RIFg");t.exports=function(t,e,r){if(!c(r))throw new o("Assertion failed: `adder` is not callable");if(null==e)throw new o("Assertion failed: `iterable` is present, and not nullish");for(var y=u(e);;){var h=f(y);if(!h)return t;var v=l(h);if("Object"!==p(v)){var d=new o("iterator next must return an Object, got "+n(v));return s(y,(function(){throw d}))}try{var b=a(v,"0"),g=a(v,"1");i(r,t,[b,g])}catch(t){return s(y,(function(){throw t}))}}}},"6ayh":function(t,e,r){"use strict";var n=TypeError,o=Object.getOwnPropertyDescriptor;if(o)try{o({},"")}catch(t){o=null}var i=function(){throw new n},a=o?function(){try{return i}catch(t){try{return o(arguments,"callee").get}catch(t){return i}}}():i,u=r("UVaH")(),c=Object.getPrototypeOf||function(t){return t.__proto__},s=void 0,f="undefined"==typeof Uint8Array?void 0:c(Uint8Array),l={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":u?c([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":s&&u&&Symbol.asyncIterator?s[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?c(c([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?c((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?c((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":u?c(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":u?Symbol:void 0,"%SymbolPrototype%":u?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":a,"%TypedArray%":f,"%TypedArrayPrototype%":f?f.prototype:void 0,"%TypeError%":n,"%TypeErrorPrototype%":n.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},p=r("D3zA").call(Function.call,String.prototype.replace),y=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,h=/\\(\\)?/g,v=function(t){var e=[];return p(t,y,(function(t,r,n,o){e[e.length]=n?p(o,h,"$1"):r||t})),e},d=function(t,e){if(!(t in l))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===l[t]&&!e)throw new n("intrinsic "+t+" exists, but is not available. Please file an issue!");return l[t]};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');for(var r=v(t),i=d("%"+(r.length>0?r[0]:"")+"%",e),a=1;a<r.length;a+=1)if(null!=i)if(o&&a+1>=r.length){var u=o(i,r[a]);if(!e&&!(r[a]in i))throw new n("base intrinsic for "+t+" exists, but the property is not available.");i=u?u.get||u.value:i[r[a]]}else i=i[r[a]];return i}},"6iti":function(t,e,r){"use strict";var n=r("6B6L"),o=r("UBAn"),i=r("2GRh"),a=r("1Soo"),u=r("Ii9V"),c=r("3hvG"),s=r("RIFg"),f=function(t,e){var r=c(t);o(this,r,e)},l="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");t.exports=function(t){u(t);var e={};if(!l){if(!a(t))throw new TypeError("this environment lacks native Symbols, and can not support non-Array iterables");return function(t,e){for(var r=0;r<e.length;++r){var n=e[r];if("Object"!==s(n))throw new TypeError("iterator returned a non-object; entry expected");var a=i(n,"0"),u=i(n,"1"),f=c(a);o(t,f,u)}}(e,t),e}return n(e,t,f)}},"6ll1":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("zODz"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},"7IBh":function(t,e,r){"use strict";var n=r("xG2L"),o=r("RIFg");t.exports=function(t){if(void 0===t)return t;n(o,"Property Descriptor","Desc",t);var e={};return"[[Value]]"in t&&(e.value=t["[[Value]]"]),"[[Writable]]"in t&&(e.writable=t["[[Writable]]"]),"[[Get]]"in t&&(e.get=t["[[Get]]"]),"[[Set]]"in t&&(e.set=t["[[Set]]"]),"[[Enumerable]]"in t&&(e.enumerable=t["[[Enumerable]]"]),"[[Configurable]]"in t&&(e.configurable=t["[[Configurable]]"]),e}},"7K3S":function(t,e){"document"in window.self&&((!("classList"in document.createElement("_"))||document.createElementNS&&!("classList"in document.createElementNS("http://www.w3.org/2000/svg","g")))&&function(t){"use strict";if("Element"in t){var e=t.Element.prototype,r=Object,n=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")},o=Array.prototype.indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},i=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},a=function(t,e){if(""===e)throw new i("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(e))throw new i("INVALID_CHARACTER_ERR","String contains an invalid character");return o.call(t,e)},u=function(t){for(var e=n.call(t.getAttribute("class")||""),r=e?e.split(/\s+/):[],o=0,i=r.length;o<i;o++)this.push(r[o]);this._updateClassName=function(){t.setAttribute("class",this.toString())}},c=u.prototype=[],s=function(){return new u(this)};if(i.prototype=Error.prototype,c.item=function(t){return this[t]||null},c.contains=function(t){return-1!==a(this,t+="")},c.add=function(){var t,e=arguments,r=0,n=e.length,o=!1;do{t=e[r]+"",-1===a(this,t)&&(this.push(t),o=!0)}while(++r<n);o&&this._updateClassName()},c.remove=function(){var t,e,r=arguments,n=0,o=r.length,i=!1;do{for(t=r[n]+"",e=a(this,t);-1!==e;)this.splice(e,1),i=!0,e=a(this,t)}while(++n<o);i&&this._updateClassName()},c.toggle=function(t,e){t+="";var r=this.contains(t),n=r?!0!==e&&"remove":!1!==e&&"add";return n&&this[n](t),!0===e||!1===e?e:!r},c.toString=function(){return this.join(" ")},r.defineProperty){var f={get:s,enumerable:!0,configurable:!0};try{r.defineProperty(e,"classList",f)}catch(t){void 0!==t.number&&-2146823252!==t.number||(f.enumerable=!1,r.defineProperty(e,"classList",f))}}else r.prototype.__defineGetter__&&e.__defineGetter__("classList",s)}}(window.self),function(){"use strict";var t=document.createElement("_");if(t.classList.add("c1","c2"),!t.classList.contains("c2")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var r,n=arguments.length;for(r=0;r<n;r++)t=arguments[r],e.call(this,t)}};e("add"),e("remove")}if(t.classList.toggle("c3",!1),t.classList.contains("c3")){var r=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:r.call(this,t)}}t=null}())},"7KAz":function(t,e,r){"use strict";var n=r("srjY"),o=TypeError,i=r("ZySq");t.exports=function(t){var e=n(t);if(!e)throw new o("non-iterable value provided");return arguments.length>1?i(e,arguments[1]):i(e)}},"7cND":function(t,e){window.matchMedia||(window.matchMedia=function(){"use strict";var t=window.styleMedia||window.media;if(!t){var e,r=document.createElement("style"),n=document.getElementsByTagName("script")[0];r.type="text/css",r.id="matchmediajs-test",n?n.parentNode.insertBefore(r,n):document.head.appendChild(r),e="getComputedStyle"in window&&window.getComputedStyle(r,null)||r.currentStyle,t={matchMedium:function(t){var n="@media "+t+"{ #matchmediajs-test { width: 1px; } }";return r.styleSheet?r.styleSheet.cssText=n:r.textContent=n,"1px"===e.width}}}return function(e){return{matches:t.matchMedium(e||"all"),media:e||"all"}}}())},"7r9i":function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.allSettled` requires a global `Promise` be available.")}},"82c2":function(t,e,r){"use strict";var n=r("1seS"),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,u=Object.defineProperty,c=u&&function(){var t={};try{for(var e in u(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),s=function(t,e,r,n){var o;(!(e in t)||"function"==typeof(o=n)&&"[object Function]"===i.call(o)&&n())&&(c?u(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},f=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var u=0;u<i.length;u+=1)s(t,i[u],e[i[u]],r[i[u]])};f.supportsDescriptors=!!c,t.exports=f},"8oxB":function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var c,s=[],f=!1,l=-1;function p(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&y())}function y(){if(!f){var t=u(p);f=!0;for(var e=s.length;e;){for(c=s,s=[];++l<e;)c&&c[l].run();l=-1,e=s.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new h(t,e)),1!==s.length||f||u(y)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"9F/A":function(t,e,r){"use strict";var n=r("Khql")("Promise.resolve",!0);t.exports=function(t,e){if(!n)throw new SyntaxError("This environment does not support Promises.");return n(t,e)}},"9sGd":function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e?0!==t||1/t==1/e:n(t)&&n(e)}},D2IK:function(t,e,r){"use strict";r("Kz4e")},D3zA:function(t,e,r){"use strict";var n=r("aI7X");t.exports=Function.prototype.bind||n},D6qd:function(t,e,r){"use strict";var n=r("6ayh")("RegExp.prototype.test"),o=r("RLeF");t.exports=function(t){return o(n,t)}},DmXP:function(t,e,r){"use strict";var n=Date.prototype.getDay,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},DpIS:function(t,e,r){r("xEkU").polyfill()},E1iy:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},FHRK:function(t,e,r){"use strict";var n=r("uuTH");t.exports=function(){return Array.prototype.includes||n}},Fgxp:function(t,e,r){"use strict";r("7r9i")();var n=r("9F/A"),o=r("RIFg"),i=r("7KAz"),a=r("owxQ"),u=r("6ayh"),c=r("D3zA"),s=c.call(Function.call,u("%Promise_all%")),f=c.call(Function.call,u("%Promise_reject%"));t.exports=function(t){var e=this;if("Object"!==o(e))throw new TypeError("`this` value must be an object");var r=i(t);return s(e,a(r,(function(t){var r=n(e,t);try{return r.then((function(t){return{status:"fulfilled",value:t}}),(function(t){return{status:"rejected",reason:t}}))}catch(t){return f(e,t)}})))}},FhVV:function(t,e,r){"use strict";r("03Sc")()},FpZJ:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},GPGZ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("6ayh")("%TypeError%"),i=r("RIFg"),a=r("XnxE"),u=r("hemD");t.exports=function(t){if("Object"!==i(t))throw new o("ToPropertyDescriptor requires an object");var e={};if(n(t,"enumerable")&&(e["[[Enumerable]]"]=a(t.enumerable)),n(t,"configurable")&&(e["[[Configurable]]"]=a(t.configurable)),n(t,"value")&&(e["[[Value]]"]=t.value),n(t,"writable")&&(e["[[Writable]]"]=a(t.writable)),n(t,"get")){var r=t.get;if(void 0!==r&&!u(r))throw new TypeError("getter must be a function");e["[[Get]]"]=r}if(n(t,"set")){var c=t.set;if(void 0!==c&&!u(c))throw new o("setter must be a function");e["[[Set]]"]=c}if((n(e,"[[Get]]")||n(e,"[[Set]]"))&&(n(e,"[[Value]]")||n(e,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return e}},GQul:function(t,e,r){"use strict";"function"==typeof Promise&&r("NUvg"),r("4GK0")},Gn0q:function(t,e,r){"use strict";var n=r("82c2"),o=r("5yQQ");t.exports=function(){var t=o();return"undefined"!=typeof document&&(n(document,{contains:t},{contains:function(){return document.contains!==t}}),"undefined"!=typeof Element&&n(Element.prototype,{contains:t},{contains:function(){return Element.prototype.contains!==t}})),t}},H8rg:function(t,e,r){"use strict";var n=r("rGdr");t.exports=function(){return"function"==typeof Object.getOwnPropertyDescriptors?Object.getOwnPropertyDescriptors:n}},HH6Z:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("V+xs"),i=Object.getOwnPropertyDescriptor,a=Object.defineProperty,u=TypeError,c=Object.getPrototypeOf,s=/a/;t.exports=function(){if(!n||!c)throw new u("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=o(),e=c(s),r=i(e,"flags");return r&&r.get===t||a(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},HYxC:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("hemD"),u=r("ciGR"),c=r("TU3P");t.exports=function(t){var e,r=c(this),s=u(i(r,"length"));if(!a(t))throw new TypeError("mapperFunction must be a function");arguments.length>1&&(e=arguments[1]);var f=n(r,0);return o(f,r,s,0,1,t,e),f}},HdHG:function(t,e,r){"use strict";var n=r("6ayh")("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(t){n=null}t.exports=n},HdW7:function(t,e,r){"use strict";var n=r("+IY2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{entries:t},{entries:function(){return Object.entries!==t}}),t}},HgV8:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Km29"),i=r("7IBh"),a=r("fyQZ"),u=r("hNTQ"),c=r("NjaY"),s=r("rCmP"),f=r("9sGd"),l=r("RIFg");t.exports=function(t,e,r){if("Object"!==l(t))throw new n("Assertion failed: Type(O) is not Object");if(!s(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var p=a(t,e),y=!p||c(t);return!(p&&(!p["[[Writable]]"]||!p["[[Configurable]]"])||!y)&&o(u,f,i,t,e,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":r,"[[Writable]]":!0})}},"Ho/E":function(t,e,r){"use strict";r("nIg7")()},HvP7:function(t,e,r){"use strict";var n=r("6iti");t.exports=function(){return"function"==typeof Object.fromEntries?Object.fromEntries:n}},IFfy:function(t,e,r){"use strict";t.exports=Number.isNaN||function(t){return t!=t}},IdCN:function(t,e,r){"use strict";var n=Function.prototype.toString,o=/^\s*class\b/,i=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if("function"==typeof t&&!t.prototype)return!0;if(u)return function(t){try{return!i(t)&&(n.call(t),!0)}catch(t){return!1}}(t);if(i(t))return!1;var e=a.call(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}},Ii9V:function(t,e,r){"use strict";t.exports=r("TVLE")},JQAW:function(t,e,r){"use strict";var n=function(){return"string"==typeof function(){}.name},o=Object.getOwnPropertyDescriptor;if(o)try{o([],"length")}catch(t){o=null}n.functionsHaveConfigurableNames=function(){return n()&&o&&!!o((function(){}),"name").configurable};var i=Function.prototype.bind;n.boundFunctionsHaveNames=function(){return n()&&"function"==typeof i&&""!==function(){}.bind().name},t.exports=n},JwX2:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("aTj1"),i=r("XDGy"),a=r("hemD"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new n("Assertion failed: Type(iterator) is not Object");if(!a(e))throw new n("Assertion failed: completion is not a thunk for a Completion Record");var r,c=e,s=i(t,"return");if(void 0===s)return c();try{var f=o(s,t,[])}catch(t){throw c(),c=null,t}if(r=c(),c=null,"Object"!==u(f))throw new n("iterator .return must return an object");return r}},JxQ3:function(t,e,r){var n="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&n?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=n&&o&&"function"==typeof o.get?o.get:null,a=n&&Map.prototype.forEach,u="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&u?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,s=u&&c&&"function"==typeof c.get?c.get:null,f=u&&Set.prototype.forEach,l="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,y=Boolean.prototype.valueOf,h=Object.prototype.toString,v=String.prototype.match,d="function"==typeof BigInt?BigInt.prototype.valueOf:null,b=r(1).custom,g=b&&j(b)?b:null;function m(t,e,r){var n="double"===(r.quoteStyle||e)?'"':"'";return n+t+n}function w(t){return String(t).replace(/"/g,"&quot;")}function O(t){return"[object Array]"===T(t)}function j(t){return"[object Symbol]"===T(t)}t.exports=function t(e,r,n,o){var u=r||{};if(E(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return function(t,e){return m(t.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,x),"single",e)}(e,u);if("number"==typeof e)return 0===e?1/0/e>0?"0":"-0":String(e);if("bigint"==typeof e)return String(e)+"n";var c=void 0===u.depth?5:u.depth;if(void 0===n&&(n=0),n>=c&&c>0&&"object"==typeof e)return"[Object]";if(void 0===o)o=[];else if(function(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}(o,e)>=0)return"[Circular]";function h(e,r){return r&&(o=o.slice()).push(r),t(e,u,n+1,o)}if("function"==typeof e){var b=function(t){if(t.name)return t.name;var e=v.call(t,/^function\s*([\w$]+)/);if(e)return e[1];return null}(e);return"[Function"+(b?": "+b:"")+"]"}if(j(e)){var S=Symbol.prototype.toString.call(e);return"object"==typeof e?P(S):S}if(function(t){if(!t||"object"!=typeof t)return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(e)){for(var R="<"+String(e.nodeName).toLowerCase(),M=e.attributes||[],N=0;N<M.length;N++)R+=" "+M[N].name+"="+m(w(M[N].value),"double",u);return R+=">",e.childNodes&&e.childNodes.length&&(R+="..."),R+="</"+String(e.nodeName).toLowerCase()+">"}if(O(e))return 0===e.length?"[]":"[ "+_(e,h).join(", ")+" ]";if(function(t){return"[object Error]"===T(t)}(e)){var C=_(e,h);return 0===C.length?"["+String(e)+"]":"{ ["+String(e)+"] "+C.join(", ")+" }"}if("object"==typeof e){if(g&&"function"==typeof e[g])return e[g]();if("function"==typeof e.inspect)return e.inspect()}if(function(t){if(!i||!t||"object"!=typeof t)return!1;try{i.call(t);try{s.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(e)){var D=[];return a.call(e,(function(t,r){D.push(h(r,e)+" => "+h(t,e))})),A("Map",i.call(e),D)}if(function(t){if(!s||!t||"object"!=typeof t)return!1;try{s.call(t);try{i.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(e)){var F=[];return f.call(e,(function(t){F.push(h(t,e))})),A("Set",s.call(e),F)}if(function(t){if(!l||!t||"object"!=typeof t)return!1;try{l.call(t,l);try{p.call(t,p)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(e))return I("WeakMap");if(function(t){if(!p||!t||"object"!=typeof t)return!1;try{p.call(t,p);try{l.call(t,l)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(e))return I("WeakSet");if(function(t){return"[object Number]"===T(t)}(e))return P(h(Number(e)));if(function(t){return"[object BigInt]"===T(t)}(e))return P(h(d.call(e)));if(function(t){return"[object Boolean]"===T(t)}(e))return P(y.call(e));if(function(t){return"[object String]"===T(t)}(e))return P(h(String(e)));if(!function(t){return"[object Date]"===T(t)}(e)&&!function(t){return"[object RegExp]"===T(t)}(e)){var k=_(e,h);return 0===k.length?"{}":"{ "+k.join(", ")+" }"}return String(e)};var S=Object.prototype.hasOwnProperty||function(t){return t in this};function E(t,e){return S.call(t,e)}function T(t){return h.call(t)}function x(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\"+r:"\\x"+(e<16?"0":"")+e.toString(16)}function P(t){return"Object("+t+")"}function I(t){return t+" { ? }"}function A(t,e,r){return t+" ("+e+") {"+r.join(", ")+"}"}function _(t,e){var r=O(t),n=[];if(r){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=E(t,o)?e(t[o],t):""}for(var i in t)E(t,i)&&(r&&String(Number(i))===i&&i<t.length||(/[^\w$]/.test(i)?n.push(e(i,t)+": "+e(t[i],t)):n.push(i+": "+e(t[i],t))));return n}},KFgS:function(t,e,r){"use strict";t.exports=r("TVLE")},KUT7:function(t,e,r){"use strict";var n=r("SrsA");t.exports=function(){return n(this)}},Khql:function(t,e,r){"use strict";var n=r("6ayh"),o=r("RLeF"),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")?o(r):r}},Km29:function(t,e,r){"use strict";var n=r("6ayh")("%Object.defineProperty%",!0);if(n)try{n({},"a",{value:1})}catch(t){n=null}var o=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t,e,r,i,a,u){if(!n){if(!t(u))return!1;if(!u["[[Configurable]]"]||!u["[[Writable]]"])return!1;if(a in i&&o(i,a)!==!!u["[[Enumerable]]"])return!1;var c=u["[[Value]]"];return i[a]=c,e(i[a],c)}return n(i,a,r(u)),!0}},Kz4e:function(t,e,r){"use strict";r("Gn0q")()},LJJ4:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},Lcws:function(t,e,r){"use strict";var n=r("0yco"),o=r("gvBt");t.exports=function(t){var e=o(t);return n(e)}},NKaP:function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e||n(t)&&n(e)}},NUgV:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("JQAW")(),i=r("gaAG"),a=Object.defineProperty,u=TypeError;t.exports=function(){var t=i();if(o)return t;if(!n)throw new u("Shimming Function.prototype.name support requires ES5 property descriptor support.");var e=Function.prototype;return a(e,"name",{configurable:!0,enumerable:!1,get:function(){var r=t.call(this);return this!==e&&a(this,"name",{configurable:!0,enumerable:!1,value:r,writable:!1}),r}}),t}},NUvg:function(t,e,r){"use strict";r("Ui0A")()},NjaY:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("E1iy"),i=n.preventExtensions,a=n.isExtensible;t.exports=i?function(t){return!o(t)&&a(t)}:function(t){return!o(t)}},OuUZ:function(t,e,r){"use strict";r("Pgtx"),r("0nHT")},P5mh:function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return h+u}},PScO:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},Pgtx:function(t,e,r){"use strict";r("2fPq")},PyeM:function(t,e,r){"use strict";var n=r("6ayh")("%Symbol.match%",!0),o=r("2Nju"),i=r("XnxE");t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(n){var e=t[n];if(void 0!==e)return i(e)}return o(t)}},R5T6:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%String%"),i=n("%TypeError%");t.exports=function(t){if("symbol"==typeof t)throw new i("Cannot convert a Symbol value to a string");return o(t)}},RIFg:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},"RJ/z":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");return e in t}},RLeF:function(t,e,r){"use strict";var n=r("D3zA"),o=r("6ayh")("%Function%"),i=o.apply,a=o.call;t.exports=function(){return n.apply(a,arguments)},t.exports.apply=function(){return n.apply(i,arguments)}},"Ro/O":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Object.create%",!0),i=n("%TypeError%"),a=n("%SyntaxError%"),u=r("RIFg"),c=!({__proto__:null}instanceof Object);t.exports=function(t,e){if(null!==t&&"Object"!==u(t))throw new i("Assertion failed: `proto` must be null or an object");var r=arguments.length<2?[]:e;if(r.length>0)throw new a("es-abstract does not yet support internal slots");if(o)return o(t);if(c)return{__proto__:t};if(null===t)throw new a("native Object.create support is required to create null objects");var n=function(){};return n.prototype=t,new n}},SrsA:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=n("%SyntaxError%"),a=o("Symbol.prototype.toString",!0),u=r("gvzj");t.exports=function(t){if(!a)throw new i("Symbols are not supported in this environment");var e=a(t);if(u){var r=u(t);if(""===r)return;return r.slice(1,-1)}var n=e.slice(7,-1);if(n)return n}},TU3P:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("Ii9V");t.exports=function(t){return o(t),n(t)}},TVLE:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%");t.exports=function(t,e){if(null==t)throw new n(e||"Cannot call method on "+t);return t}},Teho:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},"U/4o":function(t,e,r){"use strict";var n=r("UVaH")(),o=r("zpJY"),i=r("gvzj"),a=Object.getOwnPropertyDescriptor,u=Object.defineProperty,c=Object.setPrototypeOf,s=function(t){u(Symbol.prototype,"description",{configurable:!0,enumerable:!1,get:t})};t.exports=function(){if(!n)return!1;var t=a(Symbol.prototype,"description"),e=o(),r=!t||"function"!=typeof t.get,u=!r&&(void 0!==Symbol().description||""!==Symbol("").description);if(r||u){if(!i)return function(t){var e=Function.apply.bind(Symbol),r=Object.create?Object.create(null):{},n=function(){var t=e(this,arguments);return arguments.length>0&&""===arguments[0]&&(r[t]=!0),t};n.prototype=Symbol.prototype,c(n,Symbol),Symbol=n;var o=Function.call.bind(t),i=function(){var t=o(this);return r[this]?"":t};return s(i),i}(e);s(e)}return e}},UBAn:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("HgV8"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e,r){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var u=o(t,e,r);if(!u)throw new n("unable to create data property");return u}},UBBE:function(t,e,r){"use strict";var n=r("sqVN"),o=r("Lcws");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},UMYc:function(t,e,r){"use strict";var n=r("l+XD"),o=r("+71H");t.exports=function(){var t=Array.prototype.map;return n(t)?t:o}},UVaH:function(t,e,r){"use strict";(function(e){var n=e.Symbol,o=r("FpZJ");t.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&o())))}}).call(this,r("yLpj"))},UYO7:function(t,e,r){"use strict";t.exports=function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0}},Ufkg:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("RIFg");t.exports=function(t,e){if("Boolean"!==o(e))throw new n("Assertion failed: Type(done) is not Boolean");return{value:t,done:e}}},Ui0A:function(t,e,r){"use strict";var n=r("vndB"),o=r("iSaG"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise.prototype,{finally:t},{finally:function(){return Promise.prototype.finally!==t}}),t}},UsSR:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("6ayh"),i=r("Khql"),a=o("%Symbol.iterator%",!0),u=i("String.prototype.slice");t.exports=function(t,e){var r;return n?r=t.GetMethod(e,a):t.IsArray(e)?r=function(){var t=-1,e=this;return{next:function(){return{done:(t+=1)>=e.length,value:e[t]}}}}:"String"===t.Type(e)&&(r=function(){var r=0;return{next:function(){var n=t.AdvanceStringIndex(e,r,!0),o=u(e,r,n);return r=n,{done:n>e.length,value:o}}}}),r}},"V+xs":function(t,e,r){"use strict";var n=r("VwiP"),o=r("82c2").supportsDescriptors,i=Object.getOwnPropertyDescriptor,a=TypeError;t.exports=function(){if(!o)throw new a("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");if("gim"===/a/gim.flags){var t=i(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof/a/.dotAll)return t.get}return n}},V5gn:function(t,e,r){"use strict";r("qv/t"),r("NUgV")(),r("dzgB")},VAJa:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=r("JxQ3"),a=n("%TypeError%"),u=n("%WeakMap%",!0),c=n("%Map%",!0),s=o("Array.prototype.push"),f=o("WeakMap.prototype.get",!0),l=o("WeakMap.prototype.set",!0),p=o("WeakMap.prototype.has",!0),y=o("Map.prototype.get",!0),h=o("Map.prototype.set",!0),v=o("Map.prototype.has",!0);t.exports=function(){var t,e,r,n={assert:function(t){if(!n.has(t))throw new a("Side channel does not contain "+i(t))},get:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return f(t,n)}else if(c){if(e)return y(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return t[r].value}(r,n)},has:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return p(t,n)}else if(c){if(e)return v(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return!0;return!1}(r,n);return!1},set:function(n,o){u&&n&&("object"==typeof n||"function"==typeof n)?(t||(t=new u),l(t,n,o)):c?(e||(e=new c),h(e,n,o)):(r||(r=[]),function(t,e,r){for(var n=0;n<t.length;n+=1)if(t[n].key===e)return void(t[n].value=r);s(t,{key:e,value:r})}(r,n,o))}};return n}},VbLK:function(t,e,r){"use strict";var n=String.prototype.valueOf,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"string"==typeof t||"object"==typeof t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object String]"===o.call(t))}},VwiP:function(t,e,r){"use strict";var n=Object,o=TypeError;t.exports=function(){if(null!=this&&this!==n(this))throw new o("RegExp.prototype.flags getter called on non-object");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t}},WXWk:function(t,e,r){"use strict";t.exports=function(t){return t>=0?1:-1}},WZeS:function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=r("Teho"),i=r("IdCN"),a=r("DmXP"),u=r("/sVA"),c=function(t,e){if(null==t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof e||"number"!==e&&"string"!==e)throw new TypeError('hint must be "string" or "number"');var r,n,a,u="string"===e?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<u.length;++a)if(r=t[u[a]],i(r)&&(n=r.call(t),o(n)))return n;throw new TypeError("No default value")},s=function(t,e){var r=t[e];if(null!=r){if(!i(r))throw new TypeError(r+" returned for property "+e+" of object "+t+" is not a function");return r}};t.exports=function(t){if(o(t))return t;var e,r="default";if(arguments.length>1&&(arguments[1]===String?r="string":arguments[1]===Number&&(r="number")),n&&(Symbol.toPrimitive?e=s(t,Symbol.toPrimitive):u(t)&&(e=Symbol.prototype.valueOf)),void 0!==e){var i=e.call(t,r);if(o(i))return i;throw new TypeError("unable to convert exotic object to primitive")}return"default"===r&&(a(t)||u(t))&&(r="string"),c(t,"default"===r?"number":r)}},Wr5T:function(t,e){!function(t,e){"use strict";if("IntersectionObserver"in t&&"IntersectionObserverEntry"in t&&"intersectionRatio"in t.IntersectionObserverEntry.prototype)"isIntersecting"in t.IntersectionObserverEntry.prototype||Object.defineProperty(t.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var r=[];o.prototype.THROTTLE_TIMEOUT=100,o.prototype.POLL_INTERVAL=null,o.prototype.USE_MUTATION_OBSERVER=!0,o.prototype.observe=function(t){if(!this._observationTargets.some((function(e){return e.element==t}))){if(!t||1!=t.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:t,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},o.prototype.unobserve=function(t){this._observationTargets=this._observationTargets.filter((function(e){return e.element!=t})),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},o.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},o.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},o.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter((function(t,e,r){if("number"!=typeof t||isNaN(t)||t<0||t>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==r[e-1]}))},o.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map((function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(e[1]),unit:e[2]}}));return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},o.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(i(t,"resize",this._checkForIntersections,!0),i(e,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in t&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},o.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,a(t,"resize",this._checkForIntersections,!0),a(e,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},o.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),r=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach((function(o){var i=o.element,a=u(i),c=this._rootContainsTarget(i),s=o.entry,f=e&&c&&this._computeTargetAndRootIntersection(i,r),l=o.entry=new n({time:t.performance&&performance.now&&performance.now(),target:i,boundingClientRect:a,rootBounds:r,intersectionRect:f});s?e&&c?this._hasCrossedThreshold(s,l)&&this._queuedEntries.push(l):s&&s.isIntersecting&&this._queuedEntries.push(l):this._queuedEntries.push(l)}),this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},o.prototype._computeTargetAndRootIntersection=function(r,n){if("none"!=t.getComputedStyle(r).display){for(var o,i,a,c,f,l,p,y,h=u(r),v=s(r),d=!1;!d;){var b=null,g=1==v.nodeType?t.getComputedStyle(v):{};if("none"==g.display)return;if(v==this.root||v==e?(d=!0,b=n):v!=e.body&&v!=e.documentElement&&"visible"!=g.overflow&&(b=u(v)),b&&(o=b,i=h,a=void 0,c=void 0,f=void 0,l=void 0,p=void 0,y=void 0,a=Math.max(o.top,i.top),c=Math.min(o.bottom,i.bottom),f=Math.max(o.left,i.left),l=Math.min(o.right,i.right),y=c-a,!(h=(p=l-f)>=0&&y>=0&&{top:a,bottom:c,left:f,right:l,width:p,height:y})))break;v=s(v)}return h}},o.prototype._getRootRect=function(){var t;if(this.root)t=u(this.root);else{var r=e.documentElement,n=e.body;t={top:0,left:0,right:r.clientWidth||n.clientWidth,width:r.clientWidth||n.clientWidth,bottom:r.clientHeight||n.clientHeight,height:r.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)},o.prototype._expandRectByRootMargin=function(t){var e=this._rootMarginValues.map((function(e,r){return"px"==e.unit?e.value:e.value*(r%2?t.width:t.height)/100})),r={top:t.top-e[0],right:t.right+e[1],bottom:t.bottom+e[2],left:t.left-e[3]};return r.width=r.right-r.left,r.height=r.bottom-r.top,r},o.prototype._hasCrossedThreshold=function(t,e){var r=t&&t.isIntersecting?t.intersectionRatio||0:-1,n=e.isIntersecting?e.intersectionRatio||0:-1;if(r!==n)for(var o=0;o<this.thresholds.length;o++){var i=this.thresholds[o];if(i==r||i==n||i<r!=i<n)return!0}},o.prototype._rootIsInDom=function(){return!this.root||c(e,this.root)},o.prototype._rootContainsTarget=function(t){return c(this.root||e,t)},o.prototype._registerInstance=function(){r.indexOf(this)<0&&r.push(this)},o.prototype._unregisterInstance=function(){var t=r.indexOf(this);-1!=t&&r.splice(t,1)},t.IntersectionObserver=o,t.IntersectionObserverEntry=n}function n(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,r=e.width*e.height,n=this.intersectionRect,o=n.width*n.height;this.intersectionRatio=r?Number((o/r).toFixed(4)):this.isIntersecting?1:0}function o(t,e){var r,n,o,i=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(i.root&&1!=i.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(r=this._checkForIntersections.bind(this),n=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout((function(){r(),o=null}),n))}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(i.rootMargin),this.thresholds=this._initThresholds(i.threshold),this.root=i.root||null,this.rootMargin=this._rootMarginValues.map((function(t){return t.value+t.unit})).join(" ")}function i(t,e,r,n){"function"==typeof t.addEventListener?t.addEventListener(e,r,n||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,r)}function a(t,e,r,n){"function"==typeof t.removeEventListener?t.removeEventListener(e,r,n||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,r)}function u(t){var e;try{e=t.getBoundingClientRect()}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function c(t,e){for(var r=e;r;){if(r==t)return!0;r=s(r)}return!1}function s(t){var e=t.parentNode;return e&&11==e.nodeType&&e.host?e.host:e}}(window,document)},XDGy:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("tihr"),i=r("hemD"),a=r("rCmP");t.exports=function(t,e){if(!a(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var r=o(t,e);if(null!=r){if(!i(r))throw new n(e+"is not a function");return r}}},XhRf:function(t,e,r){"use strict";var n=r("s+gD");t.exports=function(){return"function"==typeof String.prototype.padEnd?String.prototype.padEnd:n}},XnxE:function(t,e,r){"use strict";t.exports=function(t){return!!t}},XsaD:function(t,e,r){"use strict";var n=r("1Fze");t.exports=function(t){return n(t)>>>0}},Zesl:function(t,e,r){"use strict";var n=r("6ayh"),o=r("oNNP"),i=r("VAJa")(),a=n("%TypeError%"),u={assert:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");i.assert(t)},get:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return r&&r["$"+e]},has:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return!!r&&o(r,"$"+e)},set:function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var n=i.get(t);n||(n={},i.set(t,n)),n["$"+e]=r}};Object.freeze&&Object.freeze(u),t.exports=u},Zoej:function(t,e,r){"use strict";var n=r("82c2"),o=r("b0r7"),i=r("Ufkg"),a=r("2GRh"),u=r("6ayh"),c=r("Ro/O"),s=r("xdJO"),f=r("1SyS"),l=r("ciGR"),p=r("R5T6"),y=r("RIFg"),h=r("UVaH")(),v=r("Zesl"),d=function(t,e,r,n){if("String"!==y(e))throw new TypeError("S must be a string");if("Boolean"!==y(r))throw new TypeError("global must be a boolean");if("Boolean"!==y(n))throw new TypeError("fullUnicode must be a boolean");v.set(this,"[[IteratingRegExp]]",t),v.set(this,"[[IteratedString]]",e),v.set(this,"[[Global]]",r),v.set(this,"[[Unicode]]",n),v.set(this,"[[Done]]",!1)},b=u("%IteratorPrototype%",!0);if(b&&(d.prototype=c(b)),n(d.prototype,{next:function(){var t=this;if("Object"!==y(t))throw new TypeError("receiver must be an object");if(!(t instanceof d&&v.has(t,"[[IteratingRegExp]]")&&v.has(t,"[[IteratedString]]")&&v.has(t,"[[Global]]")&&v.has(t,"[[Unicode]]")&&v.has(t,"[[Done]]")))throw new TypeError('"this" value must be a RegExpStringIterator instance');if(v.get(t,"[[Done]]"))return i(void 0,!0);var e=v.get(t,"[[IteratingRegExp]]"),r=v.get(t,"[[IteratedString]]"),n=v.get(t,"[[Global]]"),u=v.get(t,"[[Unicode]]"),c=s(e,r);if(null===c)return v.set(t,"[[Done]]",!0),i(void 0,!0);if(n){if(""===p(a(c,"0"))){var h=l(a(e,"lastIndex")),b=o(r,h,u);f(e,"lastIndex",b,!0)}return i(c,!1)}return v.set(t,"[[Done]]",!0),i(c,!1)}}),h){var g=Object.defineProperty;if(Symbol.toStringTag&&(g?g(d.prototype,Symbol.toStringTag,{configurable:!0,enumerable:!1,value:"RegExp String Iterator",writable:!1}):d.prototype[Symbol.toStringTag]="RegExp String Iterator"),!b&&Symbol.iterator){var m={};m[Symbol.iterator]=d.prototype[Symbol.iterator]||function(){return this};var w={};w[Symbol.iterator]=function(){return d.prototype[Symbol.iterator]!==m[Symbol.iterator]},n(d.prototype,m,w)}}t.exports=d},ZySq:function(t,e,r){"use strict";var n=TypeError;t.exports=function(t){if(!t||"function"!=typeof t.next)throw new n("iterator must be an object with a `next` method");if(arguments.length>1){var e=arguments[1];if("function"!=typeof e)throw new n("`callback`, if provided, must be a function")}for(var r,o=e||[];(r=t.next())&&!r.done;)e?e(r.value):o.push(r.value);if(!e)return o}},aI7X:function(t,e,r){"use strict";var n="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,i=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError(n+e);for(var r,a=o.call(arguments,1),u=function(){if(this instanceof r){var n=e.apply(this,a.concat(o.call(arguments)));return Object(n)===n?n:this}return e.apply(t,a.concat(o.call(arguments)))},c=Math.max(0,e.length-a.length),s=[],f=0;f<c;f++)s.push("$"+f);if(r=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(u),e.prototype){var l=function(){};l.prototype=e.prototype,r.prototype=new l,l.prototype=null}return r}},aJg2:function(t,e,r){"use strict";var n=r("Ii9V"),o=r("oNNP"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=n(t),r=[];for(var a in e)o(e,a)&&i(e,a)&&r.push([a,e[a]]);return r}},aOl1:function(t,e,r){"use strict";var n=r("7r9i"),o=r("Fgxp");t.exports=function(){return n(),"function"==typeof Promise.allSettled?Promise.allSettled:o}},aTj1:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("hemD");t.exports=function(t,e){var r=arguments.length>2?arguments[2]:[];if(!i(t))throw new n(o(t)+" is not a function");return t.apply(e,r)}},abtl:function(t,e,r){"use strict";r("+7c2")()},aqn5:function(t,e,r){"use strict";var n=r("82c2"),o=r("vzKJ");t.exports=function(){var t=o();if(n.supportsDescriptors){var e=Object.getOwnPropertyDescriptor(t,"globalThis");(!e||e.configurable&&(e.enumerable||e.writable||globalThis!==t))&&Object.defineProperty(t,"globalThis",{configurable:!0,enumerable:!1,value:t,writable:!1})}else"object"==typeof globalThis&&globalThis===t||(t.globalThis=t);return t}},"b+qZ":function(t,e,r){"use strict";r("Ho/E"),r("kx12"),r("abtl")},b0r7:function(t,e,r){"use strict";var n=r("6ayh"),o=r("1l3A"),i=r("RIFg"),a=r("sqVN"),u=n("%TypeError%"),c=r("Khql")("String.prototype.charCodeAt");t.exports=function(t,e,r){if("String"!==i(t))throw new u("Assertion failed: `S` must be a String");if(!o(e)||e<0||e>a)throw new u("Assertion failed: `length` must be an integer >= 0 and <= 2**53");if("Boolean"!==i(r))throw new u("Assertion failed: `unicode` must be a Boolean");if(!r)return e+1;if(e+1>=t.length)return e+1;var n=c(t,e);if(n<55296||n>56319)return e+1;var s=c(t,e+1);return s<56320||s>57343?e+1:e+2}},bBhT:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("+okW");t.exports=function(){return n&&"symbol"==typeof Symbol.matchAll&&"function"==typeof RegExp.prototype[Symbol.matchAll]?RegExp.prototype[Symbol.matchAll]:o}},bQgK:function(t,e,r){(function(e){(function(){var r,n,o,i,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},n=e.hrtime,i=(r=function(){var t;return 1e9*(t=n())[0]+t[1]})(),u=1e9*e.uptime(),a=i-u):Date.now?(t.exports=function(){return Date.now()-o},o=Date.now()):(t.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r("8oxB"))},bZMm:function(t,e){!function(t){"use strict";if(!t.fetch){c.prototype.append=function(t,e){t=a(t),e=u(e);var r=this.map[t];r||(r=[],this.map[t]=r),r.push(e)},c.prototype.delete=function(t){delete this.map[a(t)]},c.prototype.get=function(t){var e=this.map[a(t)];return e?e[0]:null},c.prototype.getAll=function(t){return this.map[a(t)]||[]},c.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},c.prototype.set=function(t,e){this.map[a(t)]=[u(e)]},c.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach((function(r){this.map[r].forEach((function(n){t.call(e,n,r,this)}),this)}),this)};var e="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),r="FormData"in t,n="ArrayBuffer"in t,o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this)},p.call(y.prototype),p.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var i=[301,302,303,307,308];d.redirect=function(t,e){if(-1===i.indexOf(e))throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=c,t.Request=y,t.Response=d,t.fetch=function(t,r){return new Promise((function(n,o){var i;i=y.prototype.isPrototypeOf(t)&&!r?t:new y(t,r);var a=new XMLHttpRequest;a.onload=function(){var t=1223===a.status?204:a.status;if(t<100||t>599)o(new TypeError("Network request failed"));else{var e={status:t,statusText:a.statusText,headers:v(a),url:"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0},r="response"in a?a.response:a.responseText;n(new d(r,e))}},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.open(i.method,i.url,!0),"include"===i.credentials&&(a.withCredentials=!0),"responseType"in a&&e&&(a.responseType="blob"),i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),a.send(void 0===i._bodyInit?null:i._bodyInit)}))},t.fetch.polyfill=!0}function a(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function s(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function l(t){var e=new FileReader;return e.readAsArrayBuffer(t),f(e)}function p(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(e&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(r&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(t){if(!n||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type&&this.headers.set("content-type",this._bodyBlob.type))},e?(this.blob=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(l)},this.text=function(){var t,e,r=s(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,(e=new FileReader).readAsText(t),f(e);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=s(this);return t||Promise.resolve(this._bodyText)},r&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var r,n,i=(e=e||{}).body;if(y.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,i||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),o.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function h(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function v(t){var e=new c;return(t.getAllResponseHeaders()||"").trim().split("\n").forEach((function(t){var r=t.trim().split(":"),n=r.shift().trim(),o=r.join(":").trim();e.append(n,o)})),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof c?e.headers:new c(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},baqT:function(t,e,r){"use strict";var n=r("s+g2"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padStart:t},{padStart:function(){return String.prototype.padStart!==t}}),t}},cCsD:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("KFgS");t.exports=function(t){return o(t),n(t)}},cDf5:function(t,e){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=r=function(t){return typeof t}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(e)}t.exports=r},ciGR:function(t,e,r){"use strict";var n=r("sqVN"),o=r("wrft");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},dEfh:function(t,e,r){"use strict";var n=r("H8rg"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{getOwnPropertyDescriptors:t},{getOwnPropertyDescriptors:function(){return Object.getOwnPropertyDescriptors!==t}}),t}},dwco:function(t,e,r){!function(e,r,n){"use strict";t.exports={polyfill:function(){if(!("scrollBehavior"in r.documentElement.style)){var t=e.HTMLElement||e.Element,n={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elScroll:t.prototype.scroll||i,scrollIntoView:t.prototype.scrollIntoView},o=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now;e.scroll=e.scrollTo=function(){a(arguments[0])?n.scroll.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left,~~arguments[0].top)},e.scrollBy=function(){a(arguments[0])?n.scrollBy.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset))},t.prototype.scroll=t.prototype.scrollTo=function(){if(a(arguments[0]))n.elScroll.call(this,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);else{var t=arguments[0].left,e=arguments[0].top;s.call(this,this,"number"==typeof t?t:this.scrollLeft,"number"==typeof e?e:this.scrollTop)}},t.prototype.scrollBy=function(){var t=arguments[0];"object"==typeof t?this.scroll({left:t.left+this.scrollLeft,top:t.top+this.scrollTop,behavior:t.behavior}):this.scroll(this.scrollLeft+t,this.scrollTop+arguments[1])},t.prototype.scrollIntoView=function(){if(a(arguments[0]))n.scrollIntoView.call(this,void 0===arguments[0]||arguments[0]);else{var t=u(this),o=t.getBoundingClientRect(),i=this.getBoundingClientRect();t!==r.body?(s.call(this,t,t.scrollLeft+i.left-o.left,t.scrollTop+i.top-o.top),e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}}}function i(t,e){this.scrollLeft=t,this.scrollTop=e}function a(t){if("object"!=typeof t||null===t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior not valid")}function u(t){var n,o,i;do{n=(t=t.parentNode)===r.body,o=t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth,i="visible"===e.getComputedStyle(t,null).overflow}while(!n&&(!o||i));return n=o=i=null,t}function c(t){var r,n,i,a,u=(o()-t.startTime)/468;a=u=u>1?1:u,r=.5*(1-Math.cos(Math.PI*a)),n=t.startX+(t.x-t.startX)*r,i=t.startY+(t.y-t.startY)*r,t.method.call(t.scrollable,n,i),n===t.x&&i===t.y||e.requestAnimationFrame(c.bind(e,t))}function s(t,a,u){var s,f,l,p,y=o();t===r.body?(s=e,f=e.scrollX||e.pageXOffset,l=e.scrollY||e.pageYOffset,p=n.scroll):(s=t,f=t.scrollLeft,l=t.scrollTop,p=i),c({scrollable:s,method:p,startTime:y,startX:f,startY:l,x:a,y:u})}}}}(window,document)},dzgB:function(t,e,r){"use strict";r("iNmR")(),r("0QyR")},eYmq:function(t,e){function r(t){target=t.currentTarget?t.currentTarget:t.srcElement,target.value==target.getAttribute("placeholder")&&(target.value="")}function n(t){target=t.currentTarget?t.currentTarget:t.srcElement,""==target.value&&(target.value=target.getAttribute("placeholder"))}if(!("placeholder"in document.createElement("input")))for(var o=document.getElementsByTagName("input"),i=0;i<o.length;i++)o[i].value||(o[i].value=o[i].getAttribute("placeholder")),o[i].addEventListener?(o[i].addEventListener("click",r,!1),o[i].addEventListener("blur",n,!1)):o[i].attachEvent&&(o[i].attachEvent("onclick",r),o[i].attachEvent("onblur",n))},exP7:function(t,e,r){"use strict";r("vndB")();var n=r("f3PD"),o=r("glNi"),i=r("PScO"),a=function(t,e){return new t((function(t){t(e)}))},u=Promise,c=function(t){if("Object"!==i(this))throw new TypeError("receiver is not an Object");var e=o(this,u),r=t,c=t;return n(t)&&(r=function(t,e){return function(r){var n=e();return a(t,n).then((function(){return r}))}}(e,t),c=function(t,e){return function(r){var n=e();return a(t,n).then((function(){throw r}))}}(e,t)),this.then(r,c)};if(Object.getOwnPropertyDescriptor){var s=Object.getOwnPropertyDescriptor(c,"name");s&&s.configurable&&Object.defineProperty(c,"name",{configurable:!0,value:"finally"})}t.exports=c},f3PD:function(t,e,r){"use strict";t.exports=r("IdCN")},fpfb:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r,n,o=Function.call,i=Object.prototype,a=o.bind(i.hasOwnProperty),u=o.bind(i.propertyIsEnumerable),c=o.bind(i.toString),s=a(i,"__defineGetter__");s&&(t=o.bind(i.__defineGetter__),e=o.bind(i.__defineSetter__),r=o.bind(i.__lookupGetter__),n=o.bind(i.__lookupSetter__));var f=function(t){return null==t||"object"!=typeof t&&"function"!=typeof t};Object.getPrototypeOf||(Object.getPrototypeOf=function(t){var e=t.__proto__;return e||null===e?e:"[object Function]"===c(t.constructor)?t.constructor.prototype:t instanceof Object?i:null});if(Object.defineProperty){var l=function(t){try{return t.sentinel=0,0===Object.getOwnPropertyDescriptor(t,"sentinel").value}catch(t){return!1}},p=l({});if(!("undefined"==typeof document||l(document.createElement("div")))||!p)var y=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||y){Object.getOwnPropertyDescriptor=function(t,e){if(f(t))throw new TypeError("Object.getOwnPropertyDescriptor called on a non-object: "+t);if(y)try{return y.call(Object,t,e)}catch(t){}var o;if(!a(t,e))return o;if(o={enumerable:u(t,e),configurable:!0},s){var c=t.__proto__,l=t!==i;l&&(t.__proto__=i);var p=r(t,e),h=n(t,e);if(l&&(t.__proto__=c),p||h)return p&&(o.get=p),h&&(o.set=h),o}return o.value=t[e],o.writable=!0,o}}Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(t){return Object.keys(t)});if(!Object.create){var h;h=!({__proto__:null}instanceof Object)||"undefined"==typeof document?function(){return{__proto__:null}}:function(){var t=function(){if(!document.domain)return!1;try{return!!new ActiveXObject("htmlfile")}catch(t){return!1}}()?function(){var t,e;return(e=new ActiveXObject("htmlfile")).write("<script><\/script>"),e.close(),t=e.parentWindow.Object.prototype,e=null,t}():function(){var t,e=document.createElement("iframe"),r=document.body||document.documentElement;return e.style.display="none",r.appendChild(e),e.src="javascript:",t=e.contentWindow.Object.prototype,r.removeChild(e),e=null,t}();delete t.constructor,delete t.hasOwnProperty,delete t.propertyIsEnumerable,delete t.isPrototypeOf,delete t.toLocaleString,delete t.toString,delete t.valueOf;var e=function(){};return e.prototype=t,h=function(){return new e},new e},Object.create=function(t,e){var r,n=function(){};if(null===t)r=h();else{if(f(t))throw new TypeError("Object prototype may only be an Object or null");n.prototype=t,(r=new n).__proto__=t}return void 0!==e&&Object.defineProperties(r,e),r}}var v=function(t){try{return Object.defineProperty(t,"sentinel",{}),"sentinel"in t}catch(t){return!1}};if(Object.defineProperty){var d=v({}),b="undefined"==typeof document||v(document.createElement("div"));if(!d||!b)var g=Object.defineProperty,m=Object.defineProperties}if(!Object.defineProperty||g){Object.defineProperty=function(o,a,u){if(f(o))throw new TypeError("Object.defineProperty called on non-object: "+o);if(f(u))throw new TypeError("Property description must be an object: "+u);if(g)try{return g.call(Object,o,a,u)}catch(t){}if("value"in u)if(s&&(r(o,a)||n(o,a))){var c=o.__proto__;o.__proto__=i,delete o[a],o[a]=u.value,o.__proto__=c}else o[a]=u.value;else{var l="get"in u,p="set"in u;if(!s&&(l||p))throw new TypeError("getters & setters can not be defined on this javascript engine");l&&t(o,a,u.get),p&&e(o,a,u.set)}return o}}Object.defineProperties&&!m||(Object.defineProperties=function(t,e){if(m)try{return m.call(Object,t,e)}catch(t){}return Object.keys(e).forEach((function(r){"__proto__"!==r&&Object.defineProperty(t,r,e[r])})),t});Object.seal||(Object.seal=function(t){if(Object(t)!==t)throw new TypeError("Object.seal can only be called on Objects.");return t});Object.freeze||(Object.freeze=function(t){if(Object(t)!==t)throw new TypeError("Object.freeze can only be called on Objects.");return t});try{Object.freeze((function(){}))}catch(t){Object.freeze=(w=Object.freeze,function(t){return"function"==typeof t?t:w(t)})}var w;Object.preventExtensions||(Object.preventExtensions=function(t){if(Object(t)!==t)throw new TypeError("Object.preventExtensions can only be called on Objects.");return t});Object.isSealed||(Object.isSealed=function(t){if(Object(t)!==t)throw new TypeError("Object.isSealed can only be called on Objects.");return!1});Object.isFrozen||(Object.isFrozen=function(t){if(Object(t)!==t)throw new TypeError("Object.isFrozen can only be called on Objects.");return!1});Object.isExtensible||(Object.isExtensible=function(t){if(Object(t)!==t)throw new TypeError("Object.isExtensible can only be called on Objects.");for(var e="";a(t,e);)e+="?";t[e]=!0;var r=a(t,e);return delete t[e],r})})?n.call(e,r,e,t):n)||(t.exports=o)}()},fyQZ:function(t,e,r){"use strict";var n=r("6ayh"),o=r("HdHG"),i=n("%TypeError%"),a=r("Khql")("Object.prototype.propertyIsEnumerable"),u=r("oNNP"),c=r("1Soo"),s=r("rCmP"),f=r("PyeM"),l=r("GPGZ"),p=r("RIFg");t.exports=function(t,e){if("Object"!==p(t))throw new i("Assertion failed: O must be an Object");if(!s(e))throw new i("Assertion failed: P must be a Property Key");if(u(t,e)){if(!o){var r=c(t)&&"length"===e,n=f(t)&&"lastIndex"===e;return{"[[Configurable]]":!(r||n),"[[Enumerable]]":a(t,e),"[[Value]]":t[e],"[[Writable]]":!0}}return l(o(t,e))}}},gaAG:function(t,e,r){"use strict";var n=r("l4Qr");t.exports=function(){return n}},glNi:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("LJJ4"),u=r("PScO");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},gvBt:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zWG1");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},gvzj:function(t,e,r){"use strict";var n;try{n=Function("s","return { [s]() {} }[s].name;")}catch(t){}t.exports=n&&"inferred"===function(){}.name?n:null},hBby:function(t,e,r){"use strict";"undefined"!=typeof self?t.exports=self:"undefined"!=typeof window?t.exports=window:t.exports=Function("return this")()},hJwt:function(t,e){var r;"function"!=typeof(r=window.Element.prototype).matches&&(r.matches=r.msMatchesSelector||r.mozMatchesSelector||r.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=0;e[r]&&e[r]!==this;)++r;return Boolean(e[r])}),"function"!=typeof r.closest&&(r.closest=function(t){for(var e=this;e&&1===e.nodeType;){if(e.matches(t))return e;e=e.parentNode}return null})},hLiU:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("Array.prototype.slice"),i=r("aTj1"),a=r("tihr"),u=r("rCmP");t.exports=function(t,e){if(!u(e))throw new n("P must be a Property Key");var r=o(arguments,2),c=a(t,e);return i(c,t,r)}},hNTQ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("xG2L"),i=r("RIFg");t.exports=function(t){return void 0!==t&&(o(i,"Property Descriptor","Desc",t),!(!n(t,"[[Value]]")&&!n(t,"[[Writable]]")))}},hemD:function(t,e,r){"use strict";t.exports=r("IdCN")},iNmR:function(t,e,r){"use strict";var n=r("82c2"),o=r("FHRK");t.exports=function(){var t=o();return n(Array.prototype,{includes:t},{includes:function(){return Array.prototype.includes!==t}}),t}},iSaG:function(t,e,r){"use strict";var n=r("vndB"),o=r("exP7");t.exports=function(){return n(),"function"==typeof Promise.prototype.finally?Promise.prototype.finally:o}},ib7Q:function(t,e,r){"use strict";var n=r("xoj2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{values:t},{values:function(){return Object.values!==t}}),t}},kx12:function(t,e,r){"use strict";r("aqn5")()},"l+XD":function(t,e){t.exports=function(t){var e=!0,r=!0,n=!1;if("function"==typeof t){try{t.call("f",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([null],(function(){"use strict";r="string"==typeof this}),"x")}catch(t){n=!0}return!n&&e&&r}return!1}},"l1+S":function(t,e,r){"use strict";var n=r("HYxC");t.exports=function(){return Array.prototype.flatMap||n}},l4Qr:function(t,e,r){"use strict";var n=r("hemD"),o=r("JQAW")(),i=r("Khql"),a=i("Function.prototype.toString"),u=i("String.prototype.match"),c=/^class /,s=/\s*function\s+([^(\s]*)\s*/,f=Function.prototype;t.exports=function(){if(!function(t){if(n(t))return!1;if("function"!=typeof t)return!1;try{return!!u(a(t),c)}catch(t){}return!1}(this)&&!n(this))throw new TypeError("Function.prototype.name sham getter called on non-function");if(o)return this.name;if(this===f)return"";var t=a(this),e=u(t,s);return e&&e[1]}},lfCk:function(t,e,r){!function(){"use strict";function t(t){var e=!0,r=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(t){return!!(t&&t!==document&&"HTML"!==t.nodeName&&"BODY"!==t.nodeName&&"classList"in t&&"contains"in t.classList)}function a(t){t.classList.contains("focus-visible")||(t.classList.add("focus-visible"),t.setAttribute("data-focus-visible-added",""))}function u(t){e=!1}function c(){document.addEventListener("mousemove",s),document.addEventListener("mousedown",s),document.addEventListener("mouseup",s),document.addEventListener("pointermove",s),document.addEventListener("pointerdown",s),document.addEventListener("pointerup",s),document.addEventListener("touchmove",s),document.addEventListener("touchstart",s),document.addEventListener("touchend",s)}function s(t){t.target.nodeName&&"html"===t.target.nodeName.toLowerCase()||(e=!1,document.removeEventListener("mousemove",s),document.removeEventListener("mousedown",s),document.removeEventListener("mouseup",s),document.removeEventListener("pointermove",s),document.removeEventListener("pointerdown",s),document.removeEventListener("pointerup",s),document.removeEventListener("touchmove",s),document.removeEventListener("touchstart",s),document.removeEventListener("touchend",s))}document.addEventListener("keydown",(function(r){r.metaKey||r.altKey||r.ctrlKey||(i(t.activeElement)&&a(t.activeElement),e=!0)}),!0),document.addEventListener("mousedown",u,!0),document.addEventListener("pointerdown",u,!0),document.addEventListener("touchstart",u,!0),document.addEventListener("visibilitychange",(function(t){"hidden"===document.visibilityState&&(r&&(e=!0),c())}),!0),c(),t.addEventListener("focus",(function(t){var r,n,u;i(t.target)&&(e||(r=t.target,n=r.type,"INPUT"===(u=r.tagName)&&o[n]&&!r.readOnly||"TEXTAREA"===u&&!r.readOnly||r.isContentEditable))&&a(t.target)}),!0),t.addEventListener("blur",(function(t){var e;i(t.target)&&(t.target.classList.contains("focus-visible")||t.target.hasAttribute("data-focus-visible-added"))&&(r=!0,window.clearTimeout(n),n=window.setTimeout((function(){r=!1}),100),(e=t.target).hasAttribute("data-focus-visible-added")&&(e.classList.remove("focus-visible"),e.removeAttribute("data-focus-visible-added")))}),!0),t.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&t.host?t.host.setAttribute("data-js-focus-visible",""):t.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var e;window.applyFocusVisiblePolyfill=t;try{e=new CustomEvent("focus-visible-polyfill-ready")}catch(t){(e=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(e)}"undefined"!=typeof document&&t(document)}()},lmVY:function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},ls82:function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),a=new j(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return E()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=m(a,r);if(u){if(u===s)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var f=c(t,e,r);if("normal"===f.type){if(n=r.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(n="completed",r.method="throw",r.arg=f.arg)}}}(t,r,a),i}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var s={};function f(){}function l(){}function p(){}var y={};y[o]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(S([])));v&&v!==e&&r.call(v,o)&&(y=v);var d=p.prototype=f.prototype=Object.create(y);function b(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function g(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var s=c(t[o],t,i);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return n("throw",t,a,u)}))}u(s.arg)}(o,i,n,a)}))}return n=n?n.then(a,a):a()}}function m(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,m(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var n=c(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,s;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=d.constructor=p,p.constructor=l,p[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(d),t},t.awrap=function(t){return{__await:t}},b(g.prototype),g.prototype[i]=function(){return this},t.AsyncIterator=g,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new g(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(d),d[a]="Generator",d[o]=function(){return this},d.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=S,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:S(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},lt0f:function(t,e){!function(){"use strict";if(self.document){var t=KeyboardEvent.prototype,e=Object.getOwnPropertyDescriptor(t,"key");if(e){var r={Win:"Meta",Scroll:"ScrollLock",Spacebar:" ",Down:"ArrowDown",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Del:"Delete",Apps:"ContextMenu",Esc:"Escape",Multiply:"*",Add:"+",Subtract:"-",Decimal:".",Divide:"/"};Object.defineProperty(t,"key",{get:function(){var t=e.get.call(this);return r.hasOwnProperty(t)?r[t]:t}})}}}()},"m2++":function(t,e,r){"use strict";var n=r("oM6l"),o=r("tPqs");t.exports=function(t){var e=o(t);return!0!==n(e)&&e}},mJ3t:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("sqVN"),i=r("aTj1"),a=r("UBAn"),u=r("2GRh"),c=r("RJ/z"),s=r("1Soo"),f=r("ciGR"),l=r("R5T6");t.exports=function t(e,r,p,y,h){var v;arguments.length>5&&(v=arguments[5]);for(var d=y,b=0;b<p;){var g=l(b),m=c(r,g);if(!0===m){var w=u(r,g);if(void 0!==v){if(arguments.length<=6)throw new n("Assertion failed: thisArg is required when mapperFunction is provided");w=i(v,arguments[6],[w,b,r])}var O=!1;if(h>0&&(O=s(w)),O){var j=f(u(w,"length"));d=t(e,w,j,d,h-1)}else{if(d>=o)throw new n("index too large");a(e,l(d),w),d+=1}}b+=1}return d}},nIg7:function(t,e,r){"use strict";var n=r("82c2"),o=r("UVaH")(),i=r("uKH6"),a=r("bBhT"),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.exports=function(){var t=i();if(n(String.prototype,{matchAll:t},{matchAll:function(){return String.prototype.matchAll!==t}}),o){var e=Symbol.matchAll||(Symbol.for?Symbol.for("Symbol.matchAll"):Symbol("Symbol.matchAll"));if(n(Symbol,{matchAll:e},{matchAll:function(){return Symbol.matchAll!==e}}),u&&c){var r=c(Symbol,e);r&&!r.configurable||u(Symbol,e,{configurable:!1,enumerable:!1,value:e,writable:!1})}var s=a(),f={};f[e]=s;var l={};l[e]=function(){return RegExp.prototype[e]!==s},n(RegExp.prototype,f,l)}return t}},nRDI:function(t,e,r){"use strict";t.exports=function(t){if(arguments.length<1)throw new TypeError("1 argument is required");if("object"!=typeof t)throw new TypeError("Argument 1 (”other“) to Node.contains must be an instance of Node");var e=t;do{if(this===e)return!0;e&&(e=e.parentNode)}while(e);return!1}},nvDk:function(t,e,r){"use strict";r("U/4o")()},o0o1:function(t,e,r){t.exports=r("ls82")},oM6l:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("XnxE"),a=r("RIFg");t.exports=function(t){if("Object"!==a(t))throw new n("Assertion failed: Type(iterResult) is not Object");return i(o(t,"done"))}},oNNP:function(t,e,r){"use strict";var n=r("D3zA");t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},owxQ:function(t,e,r){"use strict";var n=r("82c2"),o=r("Ii9V"),i=r("Khql"),a=r("+71H"),u=r("UMYc"),c=u(),s=r("yBRW"),f=i("Array.prototype.slice"),l=function(t,e){return o(t),c.apply(t,f(arguments,1))};n(l,{getPolyfill:u,implementation:a,shim:s}),t.exports=l},p2h6:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("RIFg");t.exports=function(t){if("Object"!==i(t))throw new n("Assertion failed: Type(iterResult) is not Object");return o(t,"value")}},qjSr:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Array%"),i=n("%Symbol.species%",!0),a=n("%TypeError%"),u=r("2GRh"),c=r("1Soo"),s=r("zODz"),f=r("1l3A"),l=r("RIFg");t.exports=function(t,e){if(!f(e)||e<0)throw new a("Assertion failed: length must be an integer >= 0");var r,n=0===e?0:e;if(c(t)&&(r=u(t,"constructor"),i&&"Object"===l(r)&&null===(r=u(r,i))&&(r=void 0)),void 0===r)return o(n);if(!s(r))throw new a("C must be a constructor");return new r(n)}},"qv/t":function(t,e,r){(function(n,o){var i,a;void 0===(a="function"==typeof(i=function(){"use strict";var t,e=Function.call.bind(Function.apply),r=Function.call.bind(Function.call),i=Array.isArray,a=Object.keys,u=function(t){return function(){return!e(t,this,arguments)}},c=function(t){try{return t(),!1}catch(t){return!0}},s=function(t){try{return t()}catch(t){return!1}},f=u(c),l=function(){return!c((function(){return Object.defineProperty({},"x",{get:function(){}})}))},p=!!Object.defineProperty&&l(),y="foo"===function(){}.name,h=Function.call.bind(Array.prototype.forEach),v=Function.call.bind(Array.prototype.reduce),d=Function.call.bind(Array.prototype.filter),b=Function.call.bind(Array.prototype.some),g=function(t,e,r,n){!n&&e in t||(p?Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r}):t[e]=r)},m=function(t,e,r){h(a(e),(function(n){var o=e[n];g(t,n,o,!!r)}))},w=Function.call.bind(Object.prototype.toString),O=function(t){return"function"==typeof t},j={getter:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");Object.defineProperty(t,e,{configurable:!0,enumerable:!1,get:r})},proxy:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,{configurable:n.configurable,enumerable:n.enumerable,get:function(){return t[e]},set:function(r){t[e]=r}})},redefine:function(t,e,r){if(p){var n=Object.getOwnPropertyDescriptor(t,e);n.value=r,Object.defineProperty(t,e,n)}else t[e]=r},defineByDescriptor:function(t,e,r){p?Object.defineProperty(t,e,r):"value"in r&&(t[e]=r.value)},preserveToString:function(t,e){e&&O(e.toString)&&g(t,"toString",e.toString.bind(e),!0)}},S=Object.create||function(t,e){var r=function(){};r.prototype=t;var n=new r;return void 0!==e&&a(e).forEach((function(t){j.defineByDescriptor(n,t,e[t])})),n},E=function(t,e){return!!Object.setPrototypeOf&&s((function(){var r=function e(r){var n=new t(r);return Object.setPrototypeOf(n,e.prototype),n};return Object.setPrototypeOf(r,t),r.prototype=S(t.prototype,{constructor:{value:r}}),e(r)}))},T=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")},x=T(),P=x.isFinite,I=Function.call.bind(String.prototype.indexOf),A=Function.apply.bind(Array.prototype.indexOf),_=Function.call.bind(Array.prototype.concat),R=Function.call.bind(String.prototype.slice),M=Function.call.bind(Array.prototype.push),N=Function.apply.bind(Array.prototype.push),C=Function.call.bind(Array.prototype.shift),D=Math.max,F=Math.min,k=Math.floor,L=Math.abs,U=Math.exp,B=Math.log,q=Math.sqrt,G=Function.call.bind(Object.prototype.hasOwnProperty),V=function(){},z=x.Map,H=z&&z.prototype.delete,W=z&&z.prototype.get,$=z&&z.prototype.has,K=z&&z.prototype.set,J=x.Symbol||{},X=J.species||"@@species",Y=Number.isNaN||function(t){return t!=t},Z=Number.isFinite||function(t){return"number"==typeof t&&P(t)},Q=O(Math.sign)?Math.sign:function(t){var e=Number(t);return 0===e||Y(e)?e:e<0?-1:1},tt=function(t){var e=Number(t);return e<-1||Y(e)?NaN:0===e||e===1/0?e:-1===e?-1/0:1+e-1==0?e:e*(B(1+e)/(1+e-1))},et=function(t){return"[object Arguments]"===w(t)},rt=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==w(t)&&"[object Function]"===w(t.callee)},nt=et(arguments)?et:rt,ot={primitive:function(t){return null===t||"function"!=typeof t&&"object"!=typeof t},string:function(t){return"[object String]"===w(t)},regex:function(t){return"[object RegExp]"===w(t)},symbol:function(t){return"function"==typeof x.Symbol&&"symbol"==typeof t}},it=function(t,e,r){var n=t[e];g(t,e,r,!0),j.preserveToString(t[e],n)},at="function"==typeof J&&"function"==typeof J.for&&ot.symbol(J()),ut=ot.symbol(J.iterator)?J.iterator:"_es6-shim iterator_";x.Set&&"function"==typeof(new x.Set)["@@iterator"]&&(ut="@@iterator"),x.Reflect||g(x,"Reflect",{},!0);var ct,st=x.Reflect,ft=String,lt="undefined"!=typeof document&&document?document.all:null,pt=null==lt?function(t){return null==t}:function(t){return null==t&&t!==lt},yt={Call:function(t,r){var n=arguments.length>2?arguments[2]:[];if(!yt.IsCallable(t))throw new TypeError(t+" is not a function");return e(t,r,n)},RequireObjectCoercible:function(t,e){if(pt(t))throw new TypeError(e||"Cannot call method on "+t);return t},TypeIsObject:function(t){return null!=t&&!0!==t&&!1!==t&&("function"==typeof t||"object"==typeof t||t===lt)},ToObject:function(t,e){return Object(yt.RequireObjectCoercible(t,e))},IsCallable:O,IsConstructor:function(t){return yt.IsCallable(t)},ToInt32:function(t){return yt.ToNumber(t)>>0},ToUint32:function(t){return yt.ToNumber(t)>>>0},ToNumber:function(t){if("[object Symbol]"===w(t))throw new TypeError("Cannot convert a Symbol value to a number");return+t},ToInteger:function(t){var e=yt.ToNumber(t);return Y(e)?0:0!==e&&Z(e)?(e>0?1:-1)*k(L(e)):e},ToLength:function(t){var e=yt.ToInteger(t);return e<=0?0:e>Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e},SameValue:function(t,e){return t===e?0!==t||1/t==1/e:Y(t)&&Y(e)},SameValueZero:function(t,e){return t===e||Y(t)&&Y(e)},IsIterable:function(t){return yt.TypeIsObject(t)&&(void 0!==t[ut]||nt(t))},GetIterator:function(e){if(nt(e))return new t(e,"value");var r=yt.GetMethod(e,ut);if(!yt.IsCallable(r))throw new TypeError("value is not an iterable");var n=yt.Call(r,e);if(!yt.TypeIsObject(n))throw new TypeError("bad iterator");return n},GetMethod:function(t,e){var r=yt.ToObject(t)[e];if(!pt(r)){if(!yt.IsCallable(r))throw new TypeError("Method not callable: "+e);return r}},IteratorComplete:function(t){return!!t.done},IteratorClose:function(t,e){var r=yt.GetMethod(t,"return");if(void 0!==r){var n,o;try{n=yt.Call(r,t)}catch(t){o=t}if(!e){if(o)throw o;if(!yt.TypeIsObject(n))throw new TypeError("Iterator's return method returned a non-object.")}}},IteratorNext:function(t){var e=arguments.length>1?t.next(arguments[1]):t.next();if(!yt.TypeIsObject(e))throw new TypeError("bad iterator");return e},IteratorStep:function(t){var e=yt.IteratorNext(t);return!yt.IteratorComplete(e)&&e},Construct:function(t,e,r,n){var o=void 0===r?t:r;if(!n&&st.construct)return st.construct(t,e,o);var i=o.prototype;yt.TypeIsObject(i)||(i=Object.prototype);var a=S(i),u=yt.Call(t,a,e);return yt.TypeIsObject(u)?u:a},SpeciesConstructor:function(t,e){var r=t.constructor;if(void 0===r)return e;if(!yt.TypeIsObject(r))throw new TypeError("Bad constructor");var n=r[X];if(pt(n))return e;if(!yt.IsConstructor(n))throw new TypeError("Bad @@species");return n},CreateHTML:function(t,e,r,n){var o=yt.ToString(t),i="<"+e;return""!==r&&(i+=" "+r+'="'+yt.ToString(n).replace(/"/g,"&quot;")+'"'),i+">"+o+"</"+e+">"},IsRegExp:function(t){if(!yt.TypeIsObject(t))return!1;var e=t[J.match];return void 0!==e?!!e:ot.regex(t)},ToString:function(t){return ft(t)}};if(p&&at){var ht=function(t){if(ot.symbol(J[t]))return J[t];var e=J.for("Symbol."+t);return Object.defineProperty(J,t,{configurable:!1,enumerable:!1,writable:!1,value:e}),e};if(!ot.symbol(J.search)){var vt=ht("search"),dt=String.prototype.search;g(RegExp.prototype,vt,(function(t){return yt.Call(dt,t,[this])}));var bt=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,vt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(dt,e,[yt.ToString(t)])};it(String.prototype,"search",bt)}if(!ot.symbol(J.replace)){var gt=ht("replace"),mt=String.prototype.replace;g(RegExp.prototype,gt,(function(t,e){return yt.Call(mt,t,[this,e])}));var wt=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,gt);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(mt,r,[yt.ToString(t),e])};it(String.prototype,"replace",wt)}if(!ot.symbol(J.split)){var Ot=ht("split"),jt=String.prototype.split;g(RegExp.prototype,Ot,(function(t,e){return yt.Call(jt,t,[this,e])}));var St=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,Ot);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(jt,r,[yt.ToString(t),e])};it(String.prototype,"split",St)}var Et=ot.symbol(J.match),Tt=Et&&((ct={})[J.match]=function(){return 42},42!=="a".match(ct));if(!Et||Tt){var xt=ht("match"),Pt=String.prototype.match;g(RegExp.prototype,xt,(function(t){return yt.Call(Pt,t,[this])}));var It=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,xt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(Pt,e,[yt.ToString(t)])};it(String.prototype,"match",It)}}var At=function(t,e,r){j.preserveToString(e,t),Object.setPrototypeOf&&Object.setPrototypeOf(t,e),p?h(Object.getOwnPropertyNames(t),(function(n){n in V||r[n]||j.proxy(t,n,e)})):h(Object.keys(t),(function(n){n in V||r[n]||(e[n]=t[n])})),e.prototype=t.prototype,j.redefine(t.prototype,"constructor",e)},_t=function(){return this},Rt=function(t){p&&!G(t,X)&&j.getter(t,X,_t)},Mt=function(t,e){var r=e||function(){return this};g(t,ut,r),!t[ut]&&ot.symbol(ut)&&(t[ut]=r)},Nt=function(t,e,r){p?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,writable:!0,value:r}):t[e]=r},Ct=function(t,e,r){if(Nt(t,e,r),!yt.SameValue(t[e],r))throw new TypeError("property is nonconfigurable")},Dt=function(t,e,r,n){if(!yt.TypeIsObject(t))throw new TypeError("Constructor requires `new`: "+e.name);var o=e.prototype;yt.TypeIsObject(o)||(o=r);var i=S(o);for(var a in n)if(G(n,a)){var u=n[a];g(i,a,u,!0)}return i};if(String.fromCodePoint&&1!==String.fromCodePoint.length){var Ft=String.fromCodePoint;it(String,"fromCodePoint",(function(t){return yt.Call(Ft,this,arguments)}))}var kt={fromCodePoint:function(t){for(var e,r=[],n=0,o=arguments.length;n<o;n++){if(e=Number(arguments[n]),!yt.SameValue(e,yt.ToInteger(e))||e<0||e>1114111)throw new RangeError("Invalid code point "+e);e<65536?M(r,String.fromCharCode(e)):(e-=65536,M(r,String.fromCharCode(55296+(e>>10))),M(r,String.fromCharCode(e%1024+56320)))}return r.join("")},raw:function(t){var e=yt.ToObject(t,"bad callSite"),r=yt.ToObject(e.raw,"bad raw value"),n=r.length,o=yt.ToLength(n);if(o<=0)return"";for(var i,a,u,c,s=[],f=0;f<o&&(i=yt.ToString(f),u=yt.ToString(r[i]),M(s,u),!(f+1>=o));)a=f+1<arguments.length?arguments[f+1]:"",c=yt.ToString(a),M(s,c),f+=1;return s.join("")}};String.raw&&"xy"!==String.raw({raw:{0:"x",1:"y",length:2}})&&it(String,"raw",kt.raw),m(String,kt);var Lt=function t(e,r){if(r<1)return"";if(r%2)return t(e,r-1)+e;var n=t(e,r/2);return n+n},Ut=1/0,Bt={repeat:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t);if(r<0||r>=Ut)throw new RangeError("repeat count must be less than infinity and not overflow maximum string size");return Lt(e,r)},startsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "startsWith" with a regex');var r,n=yt.ToString(t);arguments.length>1&&(r=arguments[1]);var o=D(yt.ToInteger(r),0);return R(e,o,o+n.length)===n},endsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "endsWith" with a regex');var r,n=yt.ToString(t),o=e.length;arguments.length>1&&(r=arguments[1]);var i=void 0===r?o:yt.ToInteger(r),a=F(D(i,0),o);return R(e,a-n.length,a)===n},includes:function(t){if(yt.IsRegExp(t))throw new TypeError('"includes" does not accept a RegExp');var e,r=yt.ToString(t);return arguments.length>1&&(e=arguments[1]),-1!==I(this,r,e)},codePointAt:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t),n=e.length;if(r>=0&&r<n){var o=e.charCodeAt(r);if(o<55296||o>56319||r+1===n)return o;var i=e.charCodeAt(r+1);return i<56320||i>57343?o:1024*(o-55296)+(i-56320)+65536}}};if(String.prototype.includes&&!1!=="a".includes("a",1/0)&&it(String.prototype,"includes",Bt.includes),String.prototype.startsWith&&String.prototype.endsWith){var qt=c((function(){return"/a/".startsWith(/a/)})),Gt=s((function(){return!1==="abc".startsWith("a",1/0)}));qt&&Gt||(it(String.prototype,"startsWith",Bt.startsWith),it(String.prototype,"endsWith",Bt.endsWith))}if(at){var Vt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".startsWith(t)}));Vt||it(String.prototype,"startsWith",Bt.startsWith);var zt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".endsWith(t)}));zt||it(String.prototype,"endsWith",Bt.endsWith);var Ht=s((function(){var t=/a/;return t[J.match]=!1,"/a/".includes(t)}));Ht||it(String.prototype,"includes",Bt.includes)}m(String.prototype,Bt);var Wt=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),$t=new RegExp("(^["+Wt+"]+)|(["+Wt+"]+$)","g"),Kt=function(){return yt.ToString(yt.RequireObjectCoercible(this)).replace($t,"")},Jt=["","​","￾"].join(""),Xt=new RegExp("["+Jt+"]","g"),Yt=/^[-+]0x[0-9a-f]+$/i,Zt=Jt.trim().length!==Jt.length;g(String.prototype,"trim",Kt,Zt);var Qt=function(t){return{value:t,done:0===arguments.length}},te=function(t){yt.RequireObjectCoercible(t),this._s=yt.ToString(t),this._i=0};te.prototype.next=function(){var t=this._s,e=this._i;if(void 0===t||e>=t.length)return this._s=void 0,Qt();var r,n,o=t.charCodeAt(e);return n=o<55296||o>56319||e+1===t.length||(r=t.charCodeAt(e+1))<56320||r>57343?1:2,this._i=e+n,Qt(t.substr(e,n))},Mt(te.prototype),Mt(String.prototype,(function(){return new te(this)}));var ee={from:function(t){var e,n,o,i=this;if(arguments.length>1&&(e=arguments[1]),void 0===e)n=!1;else{if(!yt.IsCallable(e))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(o=arguments[2]),n=!0}var a,u,c,s=void 0!==(nt(t)||yt.GetMethod(t,ut));if(s){u=yt.IsConstructor(i)?Object(new i):[];var f,l,p=yt.GetIterator(t);for(c=0;!1!==(f=yt.IteratorStep(p));){l=f.value;try{n&&(l=void 0===o?e(l,c):r(e,o,l,c)),u[c]=l}catch(t){throw yt.IteratorClose(p,!0),t}c+=1}a=c}else{var y,h=yt.ToObject(t);for(a=yt.ToLength(h.length),u=yt.IsConstructor(i)?Object(new i(a)):new Array(a),c=0;c<a;++c)y=h[c],n&&(y=void 0===o?e(y,c):r(e,o,y,c)),Ct(u,c,y)}return u.length=a,u},of:function(){for(var t=arguments.length,e=this,r=i(e)||!yt.IsCallable(e)?new Array(t):yt.Construct(e,[t]),n=0;n<t;++n)Ct(r,n,arguments[n]);return r.length=t,r}};m(Array,ee),Rt(Array),m((t=function(t,e){this.i=0,this.array=t,this.kind=e}).prototype,{next:function(){var e=this.i,r=this.array;if(!(this instanceof t))throw new TypeError("Not an ArrayIterator");if(void 0!==r)for(var n=yt.ToLength(r.length);e<n;e++){var o,i=this.kind;return"key"===i?o=e:"value"===i?o=r[e]:"entry"===i&&(o=[e,r[e]]),this.i=e+1,Qt(o)}return this.array=void 0,Qt()}}),Mt(t.prototype);var re=Array.of===ee.of||function(){var t=function(t){this.length=t};t.prototype=[];var e=Array.of.apply(t,[1,2]);return e instanceof t&&2===e.length}();re||it(Array,"of",ee.of);var ne={copyWithin:function(t,e){var r,n=yt.ToObject(this),o=yt.ToLength(n.length),i=yt.ToInteger(t),a=yt.ToInteger(e),u=i<0?D(o+i,0):F(i,o),c=a<0?D(o+a,0):F(a,o);arguments.length>2&&(r=arguments[2]);var s=void 0===r?o:yt.ToInteger(r),f=s<0?D(o+s,0):F(s,o),l=F(f-c,o-u),p=1;for(c<u&&u<c+l&&(p=-1,c+=l-1,u+=l-1);l>0;)c in n?n[u]=n[c]:delete n[u],c+=p,u+=p,l-=1;return n},fill:function(t){var e,r;arguments.length>1&&(e=arguments[1]),arguments.length>2&&(r=arguments[2]);var n=yt.ToObject(this),o=yt.ToLength(n.length);e=yt.ToInteger(void 0===e?0:e),r=yt.ToInteger(void 0===r?o:r);for(var i=e<0?D(o+e,0):F(e,o),a=r<0?o+r:r,u=i;u<o&&u<a;++u)n[u]=t;return n},find:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#find: predicate must be a function");for(var o,i=arguments.length>1?arguments[1]:null,a=0;a<n;a++)if(o=e[a],i){if(r(t,i,o,a,e))return o}else if(t(o,a,e))return o},findIndex:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#findIndex: predicate must be a function");for(var o=arguments.length>1?arguments[1]:null,i=0;i<n;i++)if(o){if(r(t,o,e[i],i,e))return i}else if(t(e[i],i,e))return i;return-1},keys:function(){return new t(this,"key")},values:function(){return new t(this,"value")},entries:function(){return new t(this,"entry")}};if(Array.prototype.keys&&!yt.IsCallable([1].keys().next)&&delete Array.prototype.keys,Array.prototype.entries&&!yt.IsCallable([1].entries().next)&&delete Array.prototype.entries,Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[ut]&&(m(Array.prototype,{values:Array.prototype[ut]}),ot.symbol(J.unscopables)&&(Array.prototype[J.unscopables].values=!0)),y&&Array.prototype.values&&"values"!==Array.prototype.values.name){var oe=Array.prototype.values;it(Array.prototype,"values",(function(){return yt.Call(oe,this,arguments)})),g(Array.prototype,ut,Array.prototype.values,!0)}m(Array.prototype,ne),1/[!0].indexOf(!0,-0)<0&&g(Array.prototype,"indexOf",(function(t){var e=A(this,arguments);return 0===e&&1/e<0?0:e}),!0),Mt(Array.prototype,(function(){return this.values()})),Object.getPrototypeOf&&Mt(Object.getPrototypeOf([].values()));var ie,ae=s((function(){return 0===Array.from({length:-1}).length})),ue=1===(ie=Array.from([0].entries())).length&&i(ie[0])&&0===ie[0][0]&&0===ie[0][1];ae&&ue||it(Array,"from",ee.from);var ce=s((function(){return Array.from([0],void 0)}));if(!ce){var se=Array.from;it(Array,"from",(function(t){return arguments.length>1&&void 0!==arguments[1]?yt.Call(se,this,arguments):r(se,this,t)}))}var fe=-(Math.pow(2,32)-1),le=function(t,e){var n={length:fe};return n[e?(n.length>>>0)-1:0]=!0,s((function(){return r(t,n,(function(){throw new RangeError("should not reach here")}),[]),!0}))};if(!le(Array.prototype.forEach)){var pe=Array.prototype.forEach;it(Array.prototype,"forEach",(function(t){return yt.Call(pe,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.map)){var ye=Array.prototype.map;it(Array.prototype,"map",(function(t){return yt.Call(ye,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.filter)){var he=Array.prototype.filter;it(Array.prototype,"filter",(function(t){return yt.Call(he,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.some)){var ve=Array.prototype.some;it(Array.prototype,"some",(function(t){return yt.Call(ve,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.every)){var de=Array.prototype.every;it(Array.prototype,"every",(function(t){return yt.Call(de,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduce)){var be=Array.prototype.reduce;it(Array.prototype,"reduce",(function(t){return yt.Call(be,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduceRight,!0)){var ge=Array.prototype.reduceRight;it(Array.prototype,"reduceRight",(function(t){return yt.Call(ge,this.length>=0?this:[],arguments)}),!0)}var me=8!==Number("0o10"),we=2!==Number("0b10"),Oe=b(Jt,(function(t){return 0===Number(t+0+t)}));if(me||we||Oe){var je=Number,Se=/^0b[01]+$/i,Ee=/^0o[0-7]+$/i,Te=Se.test.bind(Se),xe=Ee.test.bind(Ee),Pe=function(t){var e;if("function"==typeof t.valueOf&&(e=t.valueOf(),ot.primitive(e)))return e;if("function"==typeof t.toString&&(e=t.toString(),ot.primitive(e)))return e;throw new TypeError("No default value")},Ie=Xt.test.bind(Xt),Ae=Yt.test.bind(Yt),_e=function(){var t=function(e){var r;"string"==typeof(r=arguments.length>0?ot.primitive(e)?e:Pe(e,"number"):0)&&(r=yt.Call(Kt,r),Te(r)?r=parseInt(R(r,2),2):xe(r)?r=parseInt(R(r,2),8):(Ie(r)||Ae(r))&&(r=NaN));var n=this,o=s((function(){return je.prototype.valueOf.call(n),!0}));return n instanceof t&&!o?new je(r):je(r)};return t}();At(je,_e,{}),m(_e,{NaN:je.NaN,MAX_VALUE:je.MAX_VALUE,MIN_VALUE:je.MIN_VALUE,NEGATIVE_INFINITY:je.NEGATIVE_INFINITY,POSITIVE_INFINITY:je.POSITIVE_INFINITY}),Number=_e,j.redefine(x,"Number",_e)}var Re=Math.pow(2,53)-1;m(Number,{MAX_SAFE_INTEGER:Re,MIN_SAFE_INTEGER:-Re,EPSILON:2220446049250313e-31,parseInt:x.parseInt,parseFloat:x.parseFloat,isFinite:Z,isInteger:function(t){return Z(t)&&yt.ToInteger(t)===t},isSafeInteger:function(t){return Number.isInteger(t)&&L(t)<=Number.MAX_SAFE_INTEGER},isNaN:Y}),g(Number,"parseInt",x.parseInt,Number.parseInt!==x.parseInt),1===[,1].find((function(){return!0}))&&it(Array.prototype,"find",ne.find),0!==[,1].findIndex((function(){return!0}))&&it(Array.prototype,"findIndex",ne.findIndex);var Me,Ne,Ce,De=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable),Fe=function(t,e){p&&De(t,e)&&Object.defineProperty(t,e,{enumerable:!1})},ke=function(){for(var t=Number(this),e=arguments.length,r=e-t,n=new Array(r<0?0:r),o=t;o<e;++o)n[o-t]=arguments[o];return n},Le=function(t){return function(e,r){return e[r]=t[r],e}},Ue=function(t,e){var r,n=a(Object(e));return yt.IsCallable(Object.getOwnPropertySymbols)&&(r=d(Object.getOwnPropertySymbols(Object(e)),De(e))),v(_(n,r||[]),Le(e),t)},Be={assign:function(t,e){var r=yt.ToObject(t,"Cannot convert undefined or null to object");return v(yt.Call(ke,1,arguments),Ue,r)},is:function(t,e){return yt.SameValue(t,e)}},qe=Object.assign&&Object.preventExtensions&&function(){var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}}();if(qe&&it(Object,"assign",Be.assign),m(Object,Be),p){var Ge={setPrototypeOf:function(t,e){var n,o=function(t,e){return function(t,e){if(!yt.TypeIsObject(t))throw new TypeError("cannot set prototype on a non-object");if(null!==e&&!yt.TypeIsObject(e))throw new TypeError("can only set prototype to an object or null"+e)}(t,e),r(n,t,e),t};try{n=t.getOwnPropertyDescriptor(t.prototype,"__proto__").set,r(n,{},null)}catch(e){if(t.prototype!=={}.__proto__)return;n=function(t){this.__proto__=t},o.polyfill=o(o({},null),t.prototype)instanceof t}return o}(Object)};m(Object,Ge)}Object.setPrototypeOf&&Object.getPrototypeOf&&null!==Object.getPrototypeOf(Object.setPrototypeOf({},null))&&null===Object.getPrototypeOf(Object.create(null))&&(Me=Object.create(null),Ne=Object.getPrototypeOf,Ce=Object.setPrototypeOf,Object.getPrototypeOf=function(t){var e=Ne(t);return e===Me?null:e},Object.setPrototypeOf=function(t,e){return Ce(t,null===e?Me:e)},Object.setPrototypeOf.polyfill=!1);var Ve=!c((function(){return Object.keys("foo")}));if(!Ve){var ze=Object.keys;it(Object,"keys",(function(t){return ze(yt.ToObject(t))})),a=Object.keys}var He=c((function(){return Object.keys(/a/g)}));if(He){var We=Object.keys;it(Object,"keys",(function(t){if(ot.regex(t)){var e=[];for(var r in t)G(t,r)&&M(e,r);return e}return We(t)})),a=Object.keys}if(Object.getOwnPropertyNames){var $e=!c((function(){return Object.getOwnPropertyNames("foo")}));if(!$e){var Ke="object"==typeof window?Object.getOwnPropertyNames(window):[],Je=Object.getOwnPropertyNames;it(Object,"getOwnPropertyNames",(function(t){var e=yt.ToObject(t);if("[object Window]"===w(e))try{return Je(e)}catch(t){return _([],Ke)}return Je(e)}))}}if(Object.getOwnPropertyDescriptor){var Xe=!c((function(){return Object.getOwnPropertyDescriptor("foo","bar")}));if(!Xe){var Ye=Object.getOwnPropertyDescriptor;it(Object,"getOwnPropertyDescriptor",(function(t,e){return Ye(yt.ToObject(t),e)}))}}if(Object.seal){var Ze=!c((function(){return Object.seal("foo")}));if(!Ze){var Qe=Object.seal;it(Object,"seal",(function(t){return yt.TypeIsObject(t)?Qe(t):t}))}}if(Object.isSealed){var tr=!c((function(){return Object.isSealed("foo")}));if(!tr){var er=Object.isSealed;it(Object,"isSealed",(function(t){return!yt.TypeIsObject(t)||er(t)}))}}if(Object.freeze){var rr=!c((function(){return Object.freeze("foo")}));if(!rr){var nr=Object.freeze;it(Object,"freeze",(function(t){return yt.TypeIsObject(t)?nr(t):t}))}}if(Object.isFrozen){var or=!c((function(){return Object.isFrozen("foo")}));if(!or){var ir=Object.isFrozen;it(Object,"isFrozen",(function(t){return!yt.TypeIsObject(t)||ir(t)}))}}if(Object.preventExtensions){var ar=!c((function(){return Object.preventExtensions("foo")}));if(!ar){var ur=Object.preventExtensions;it(Object,"preventExtensions",(function(t){return yt.TypeIsObject(t)?ur(t):t}))}}if(Object.isExtensible){var cr=!c((function(){return Object.isExtensible("foo")}));if(!cr){var sr=Object.isExtensible;it(Object,"isExtensible",(function(t){return!!yt.TypeIsObject(t)&&sr(t)}))}}if(Object.getPrototypeOf){var fr=!c((function(){return Object.getPrototypeOf("foo")}));if(!fr){var lr=Object.getPrototypeOf;it(Object,"getPrototypeOf",(function(t){return lr(yt.ToObject(t))}))}}var pr,yr=p&&((pr=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags"))&&yt.IsCallable(pr.get));if(p&&!yr){var hr=function(){if(!yt.TypeIsObject(this))throw new TypeError("Method called on incompatible type: must be an object.");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t};j.getter(RegExp.prototype,"flags",hr)}var vr,dr=p&&s((function(){return"/a/i"===String(new RegExp(/a/g,"i"))})),br=at&&p&&((vr=/./)[J.match]=!1,RegExp(vr)===vr),gr=s((function(){return"/abc/"===RegExp.prototype.toString.call({source:"abc"})})),mr=gr&&s((function(){return"/a/b"===RegExp.prototype.toString.call({source:"a",flags:"b"})}));if(!gr||!mr){var wr=RegExp.prototype.toString;g(RegExp.prototype,"toString",(function(){var t=yt.RequireObjectCoercible(this);return ot.regex(t)?r(wr,t):"/"+ft(t.source)+"/"+ft(t.flags)}),!0),j.preserveToString(RegExp.prototype.toString,wr)}if(p&&(!dr||br)){var Or=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags").get,jr=Object.getOwnPropertyDescriptor(RegExp.prototype,"source")||{},Sr=function(){return this.source},Er=yt.IsCallable(jr.get)?jr.get:Sr,Tr=RegExp,xr=function t(e,r){var n=yt.IsRegExp(e);return this instanceof t||!n||void 0!==r||e.constructor!==t?ot.regex(e)?new t(yt.Call(Er,e),void 0===r?yt.Call(Or,e):r):(n&&(e.source,void 0===r&&e.flags),new Tr(e,r)):e};At(Tr,xr,{$input:!0}),RegExp=xr,j.redefine(x,"RegExp",xr)}if(p){var Pr={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};h(a(Pr),(function(t){t in RegExp&&!(Pr[t]in RegExp)&&j.getter(RegExp,Pr[t],(function(){return RegExp[t]}))}))}Rt(RegExp);var Ir=1/Number.EPSILON,Ar=function(t){return t+Ir-Ir},_r=Math.pow(2,-23),Rr=Math.pow(2,127)*(2-_r),Mr=Math.pow(2,-126),Nr=Math.E,Cr=Math.LOG2E,Dr=Math.LOG10E,Fr=Number.prototype.clz;delete Number.prototype.clz;var kr={acosh:function(t){var e=Number(t);if(Y(e)||t<1)return NaN;if(1===e)return 0;if(e===1/0)return e;var r=1/(e*e);if(e<2)return tt(e-1+q(1-r)*e);var n=e/2;return tt(n+q(1-r)*n-1)+1/Cr},asinh:function(t){var e=Number(t);if(0===e||!P(e))return e;var r=L(e),n=r*r,o=Q(e);return r<1?o*tt(r+n/(q(n+1)+1)):o*(tt(r/2+q(1+1/n)*r/2-1)+1/Cr)},atanh:function(t){var e=Number(t);if(0===e)return e;if(-1===e)return-1/0;if(1===e)return 1/0;if(Y(e)||e<-1||e>1)return NaN;var r=L(e);return Q(e)*tt(2*r/(1-r))/2},cbrt:function(t){var e=Number(t);if(0===e)return e;var r,n=e<0;return n&&(e=-e),r=e===1/0?1/0:(e/((r=U(B(e)/3))*r)+2*r)/3,n?-r:r},clz32:function(t){var e=Number(t),r=yt.ToUint32(e);return 0===r?32:Fr?yt.Call(Fr,r):31-k(B(r+.5)*Cr)},cosh:function(t){var e=Number(t);if(0===e)return 1;if(Y(e))return NaN;if(!P(e))return 1/0;var r=U(L(e)-1);return(r+1/(r*Nr*Nr))*(Nr/2)},expm1:function(t){var e=Number(t);if(e===-1/0)return-1;if(!P(e)||0===e)return e;if(L(e)>.5)return U(e)-1;for(var r=e,n=0,o=1;n+r!==n;)n+=r,r*=e/(o+=1);return n},hypot:function(t,e){for(var r=0,n=0,o=0;o<arguments.length;++o){var i=L(Number(arguments[o]));n<i?(r*=n/i*(n/i),r+=1,n=i):r+=i>0?i/n*(i/n):i}return n===1/0?1/0:n*q(r)},log2:function(t){return B(t)*Cr},log10:function(t){return B(t)*Dr},log1p:tt,sign:Q,sinh:function(t){var e=Number(t);if(!P(e)||0===e)return e;var r=L(e);if(r<1){var n=Math.expm1(r);return Q(e)*n*(1+1/(n+1))/2}var o=U(r-1);return Q(e)*(o-1/(o*Nr*Nr))*(Nr/2)},tanh:function(t){var e=Number(t);return Y(e)||0===e?e:e>=20?1:e<=-20?-1:(Math.expm1(e)-Math.expm1(-e))/(U(e)+U(-e))},trunc:function(t){var e=Number(t);return e<0?-k(-e):k(e)},imul:function(t,e){var r=yt.ToUint32(t),n=yt.ToUint32(e),o=65535&r,i=65535&n;return o*i+((r>>>16&65535)*i+o*(n>>>16&65535)<<16>>>0)|0},fround:function(t){var e=Number(t);if(0===e||e===1/0||e===-1/0||Y(e))return e;var r=Q(e),n=L(e);if(n<Mr)return r*Ar(n/Mr/_r)*Mr*_r;var o=(1+_r/Number.EPSILON)*n,i=o-(o-n);return i>Rr||Y(i)?r*(1/0):r*i}},Lr=function(t,e,r){return L(1-t/e)/Number.EPSILON<(r||8)};m(Math,kr),g(Math,"sinh",kr.sinh,Math.sinh(710)===1/0),g(Math,"cosh",kr.cosh,Math.cosh(710)===1/0),g(Math,"log1p",kr.log1p,-1e-17!==Math.log1p(-1e-17)),g(Math,"asinh",kr.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7)),g(Math,"asinh",kr.asinh,Math.asinh(1e300)===1/0),g(Math,"atanh",kr.atanh,0===Math.atanh(1e-300)),g(Math,"tanh",kr.tanh,-2e-17!==Math.tanh(-2e-17)),g(Math,"acosh",kr.acosh,Math.acosh(Number.MAX_VALUE)===1/0),g(Math,"acosh",kr.acosh,!Lr(Math.acosh(1+Number.EPSILON),Math.sqrt(2*Number.EPSILON))),g(Math,"cbrt",kr.cbrt,!Lr(Math.cbrt(1e-300),1e-100)),g(Math,"sinh",kr.sinh,-2e-17!==Math.sinh(-2e-17));var Ur=Math.expm1(10);g(Math,"expm1",kr.expm1,Ur>22025.465794806718||Ur<22025.465794806718);var Br=Math.round,qr=0===Math.round(.5-Number.EPSILON/4)&&1===Math.round(Number.EPSILON/3.99-.5),Gr=Ir+1,Vr=2*Ir-1,zr=[Gr,Vr].every((function(t){return Math.round(t)===t}));g(Math,"round",(function(t){var e=k(t);return t-e<.5?e:-1===e?-0:e+1}),!qr||!zr),j.preserveToString(Math.round,Br);var Hr=Math.imul;-5!==Math.imul(4294967295,5)&&(Math.imul=kr.imul,j.preserveToString(Math.imul,Hr)),2!==Math.imul.length&&it(Math,"imul",(function(t,e){return yt.Call(Hr,Math,arguments)}));var Wr,$r,Kr=function(){var t=x.setTimeout;if("function"==typeof t||"object"==typeof t){yt.IsPromise=function(t){return!!yt.TypeIsObject(t)&&void 0!==t._promise};var e,n=function(t){if(!yt.IsConstructor(t))throw new TypeError("Bad promise constructor");var e=this;if(e.resolve=void 0,e.reject=void 0,e.promise=new t((function(t,r){if(void 0!==e.resolve||void 0!==e.reject)throw new TypeError("Bad Promise implementation!");e.resolve=t,e.reject=r})),!yt.IsCallable(e.resolve)||!yt.IsCallable(e.reject))throw new TypeError("Bad promise constructor")};"undefined"!=typeof window&&yt.IsCallable(window.postMessage)&&(e=function(){var t=[];return window.addEventListener("message",(function(e){if(e.source===window&&"zero-timeout-message"===e.data){if(e.stopPropagation(),0===t.length)return;C(t)()}}),!0),function(e){M(t,e),window.postMessage("zero-timeout-message","*")}});var i,a,u,c,s=yt.IsCallable(x.setImmediate)?x.setImmediate:"object"==typeof o&&o.nextTick?o.nextTick:(i=x.Promise,(a=i&&i.resolve&&i.resolve())&&function(t){return a.then(t)}||(yt.IsCallable(e)?e():function(e){t(e,0)})),f=function(t){return t},l=function(t){throw t},p={},y=function(t,e,r){s((function(){h(t,e,r)}))},h=function(t,e,r){var n,o;if(e===p)return t(r);try{n=t(r),o=e.resolve}catch(t){n=t,o=e.reject}o(n)},v=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.fulfillReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+0],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=1,r.reactionLength=0},d=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.rejectReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+1],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=2,r.reactionLength=0},b=function(t){var e=!1;return{resolve:function(r){var n;if(!e){if(e=!0,r===t)return d(t,new TypeError("Self resolution"));if(!yt.TypeIsObject(r))return v(t,r);try{n=r.then}catch(e){return d(t,e)}if(!yt.IsCallable(n))return v(t,r);s((function(){w(t,r,n)}))}},reject:function(r){if(!e)return e=!0,d(t,r)}}},g=function(t,e,n,o){t===c?r(t,e,n,o,p):r(t,e,n,o)},w=function(t,e,r){var n=b(t),o=n.resolve,i=n.reject;try{g(r,e,o,i)}catch(t){i(t)}},O=function(){var t=function(e){if(!(this instanceof t))throw new TypeError('Constructor Promise requires "new"');if(this&&this._promise)throw new TypeError("Bad construction");if(!yt.IsCallable(e))throw new TypeError("not a valid resolver");var r=Dt(this,t,u,{_promise:{result:void 0,state:0,reactionLength:0,fulfillReactionHandler0:void 0,rejectReactionHandler0:void 0,reactionCapability0:void 0}}),n=b(r),o=n.reject;try{e(n.resolve,o)}catch(t){o(t)}return r};return t}();u=O.prototype;var j=function(t,e,r,n){var o=!1;return function(i){o||(o=!0,e[t]=i,0==--n.count&&(0,r.resolve)(e))}};return m(O,{all:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i=t.iterator,a=[],u={count:1},c=0;;){try{if(!1===(n=yt.IteratorStep(i))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}a[c]=void 0;var s=e.resolve(o),f=j(c,a,r,u);u.count+=1,g(s.then,s,f,r.reject),c+=1}return 0==--u.count&&(0,r.resolve)(a),r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},race:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i,a=t.iterator;;){try{if(!1===(n=yt.IteratorStep(a))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}i=e.resolve(o),g(i.then,i,r.resolve,r.reject)}return r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},reject:function(t){if(!yt.TypeIsObject(this))throw new TypeError("Bad promise constructor");var e=new n(this);return(0,e.reject)(t),e.promise},resolve:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Bad promise constructor");if(yt.IsPromise(t)&&t.constructor===e)return t;var r=new n(e);return(0,r.resolve)(t),r.promise}}),m(u,{catch:function(t){return this.then(null,t)},then:function(t,e){var r=this;if(!yt.IsPromise(r))throw new TypeError("not a promise");var o,i=yt.SpeciesConstructor(r,O),a=arguments.length>2&&arguments[2]===p;o=a&&i===O?p:new n(i);var u,c=yt.IsCallable(t)?t:f,s=yt.IsCallable(e)?e:l,h=r._promise;if(0===h.state){if(0===h.reactionLength)h.fulfillReactionHandler0=c,h.rejectReactionHandler0=s,h.reactionCapability0=o;else{var v=3*(h.reactionLength-1);h[v+0]=c,h[v+1]=s,h[v+2]=o}h.reactionLength+=1}else if(1===h.state)u=h.result,y(c,o,u);else{if(2!==h.state)throw new TypeError("unexpected Promise state");u=h.result,y(s,o,u)}return o.promise}}),p=new n(O),c=u.then,O}}();if(x.Promise&&(delete x.Promise.accept,delete x.Promise.defer,delete x.Promise.prototype.chain),"function"==typeof Kr){m(x,{Promise:Kr});var Jr=E(x.Promise,(function(t){return t.resolve(42).then((function(){}))instanceof t})),Xr=!c((function(){return x.Promise.reject(42).then(null,5).then(null,V)})),Yr=c((function(){return x.Promise.call(3,V)})),Zr=function(t){var e=t.resolve(5);e.constructor={};var r=t.resolve(e);try{r.then(null,V).then(null,V)}catch(t){return!0}return e===r}(x.Promise),Qr=p&&(Wr=0,$r=Object.defineProperty({},"then",{get:function(){Wr+=1}}),Promise.resolve($r),1===Wr),tn=function t(e){var r=new Promise(e);e(3,(function(){})),this.then=r.then,this.constructor=t};tn.prototype=Promise.prototype,tn.all=Promise.all;var en=s((function(){return!!tn.all([1,2])}));if(Jr&&Xr&&Yr&&!Zr&&Qr&&!en||(Promise=Kr,it(x,"Promise",Kr)),1!==Promise.all.length){var rn=Promise.all;it(Promise,"all",(function(t){return yt.Call(rn,this,arguments)}))}if(1!==Promise.race.length){var nn=Promise.race;it(Promise,"race",(function(t){return yt.Call(nn,this,arguments)}))}if(1!==Promise.resolve.length){var on=Promise.resolve;it(Promise,"resolve",(function(t){return yt.Call(on,this,arguments)}))}if(1!==Promise.reject.length){var an=Promise.reject;it(Promise,"reject",(function(t){return yt.Call(an,this,arguments)}))}Fe(Promise,"all"),Fe(Promise,"race"),Fe(Promise,"resolve"),Fe(Promise,"reject"),Rt(Promise)}var un,cn,sn=function(t){var e=a(v(t,(function(t,e){return t[e]=!0,t}),{}));return t.join(":")===e.join(":")},fn=sn(["z","a","bb"]),ln=sn(["z",1,"a","3",2]);if(p){var pn=function(t,e){return e||fn?pt(t)?"^"+yt.ToString(t):"string"==typeof t?"$"+t:"number"==typeof t?ln?t:"n"+t:"boolean"==typeof t?"b"+t:null:null},yn=function(){return Object.create?Object.create(null):{}},hn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){if(!yt.TypeIsObject(t))throw new TypeError("Iterator value "+t+" is not an entry object");e.set(t[0],t[1])}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t,r){e.set(r,t)}));else{var o,a;if(!pt(n)){if(a=e.set,!yt.IsCallable(a))throw new TypeError("bad map");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{if(!yt.TypeIsObject(c))throw new TypeError("Iterator value "+c+" is not an entry object");r(a,e,c[0],c[1])}catch(t){throw yt.IteratorClose(o,!0),t}}}},vn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){e.add(t)}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t){e.add(t)}));else{var o,a;if(!pt(n)){if(a=e.add,!yt.IsCallable(a))throw new TypeError("bad set");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{r(a,e,c)}catch(t){throw yt.IteratorClose(o,!0),t}}}},dn={Map:function(){var t={},e=function(t,e){this.key=t,this.value=e,this.next=null,this.prev=null};e.prototype.isRemoved=function(){return this.key===t};var n,o=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return!!t._es6map}(t))throw new TypeError("Method Map.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},i=function(t,e){o(t,"[[MapIterator]]"),this.head=t._head,this.i=this.head,this.kind=e};Mt(i.prototype={isMapIterator:!0,next:function(){if(!this.isMapIterator)throw new TypeError("Not a MapIterator");var t,e=this.i,r=this.kind,n=this.head;if(void 0===this.i)return Qt();for(;e.isRemoved()&&e!==n;)e=e.prev;for(;e.next!==n;)if(!(e=e.next).isRemoved())return t="key"===r?e.key:"value"===r?e.value:[e.key,e.value],this.i=e,Qt(t);return this.i=void 0,Qt()}});var a=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');if(this&&this._es6map)throw new TypeError("Bad construction");var r=Dt(this,t,n,{_es6map:!0,_head:null,_map:z?new z:null,_size:0,_storage:yn()}),o=new e(null,null);return o.next=o.prev=o,r._head=o,arguments.length>0&&hn(t,r,arguments[0]),r};return n=a.prototype,j.getter(n,"size",(function(){if(void 0===this._size)throw new TypeError("size method called on incompatible Map");return this._size})),m(n,{get:function(t){var e;o(this,"get");var r=pn(t,!0);if(null!==r)return(e=this._storage[r])?e.value:void 0;if(this._map)return(e=W.call(this._map,t))?e.value:void 0;for(var n=this._head,i=n;(i=i.next)!==n;)if(yt.SameValueZero(i.key,t))return i.value},has:function(t){o(this,"has");var e=pn(t,!0);if(null!==e)return void 0!==this._storage[e];if(this._map)return $.call(this._map,t);for(var r=this._head,n=r;(n=n.next)!==r;)if(yt.SameValueZero(n.key,t))return!0;return!1},set:function(t,r){o(this,"set");var n,i=this._head,a=i,u=pn(t,!0);if(null!==u){if(void 0!==this._storage[u])return this._storage[u].value=r,this;n=this._storage[u]=new e(t,r),a=i.prev}else this._map&&($.call(this._map,t)?W.call(this._map,t).value=r:(n=new e(t,r),K.call(this._map,t,n),a=i.prev));for(;(a=a.next)!==i;)if(yt.SameValueZero(a.key,t))return a.value=r,this;return n=n||new e(t,r),yt.SameValue(-0,t)&&(n.key=0),n.next=this._head,n.prev=this._head.prev,n.prev.next=n,n.next.prev=n,this._size+=1,this},delete:function(e){o(this,"delete");var r=this._head,n=r,i=pn(e,!0);if(null!==i){if(void 0===this._storage[i])return!1;n=this._storage[i].prev,delete this._storage[i]}else if(this._map){if(!$.call(this._map,e))return!1;n=W.call(this._map,e).prev,H.call(this._map,e)}for(;(n=n.next)!==r;)if(yt.SameValueZero(n.key,e))return n.key=t,n.value=t,n.prev.next=n.next,n.next.prev=n.prev,this._size-=1,!0;return!1},clear:function(){o(this,"clear"),this._map=z?new z:null,this._size=0,this._storage=yn();for(var e=this._head,r=e,n=r.next;(r=n)!==e;)r.key=t,r.value=t,n=r.next,r.next=r.prev=e;e.next=e.prev=e},keys:function(){return o(this,"keys"),new i(this,"key")},values:function(){return o(this,"values"),new i(this,"value")},entries:function(){return o(this,"entries"),new i(this,"key+value")},forEach:function(t){o(this,"forEach");for(var e=arguments.length>1?arguments[1]:null,n=this.entries(),i=n.next();!i.done;i=n.next())e?r(t,e,i.value[1],i.value[0],this):t(i.value[1],i.value[0],this)}}),Mt(n,n.entries),a}(),Set:function(){var t,e=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return t._es6set&&void 0!==t._storage}(t))throw new TypeError("Set.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},n=function e(){if(!(this instanceof e))throw new TypeError('Constructor Set requires "new"');if(this&&this._es6set)throw new TypeError("Bad construction");var r=Dt(this,e,t,{_es6set:!0,"[[SetData]]":null,_storage:yn()});if(!r._es6set)throw new TypeError("bad set");return arguments.length>0&&vn(e,r,arguments[0]),r};t=n.prototype;var o=function(t){if(!t["[[SetData]]"]){var e=new dn.Map;t["[[SetData]]"]=e,h(a(t._storage),(function(t){var r=function(t){var e=t;if("^null"===e)return null;if("^undefined"!==e){var r=e.charAt(0);return"$"===r?R(e,1):"n"===r?+R(e,1):"b"===r?"btrue"===e:+e}}(t);e.set(r,r)})),t["[[SetData]]"]=e}t._storage=null};j.getter(n.prototype,"size",(function(){return e(this,"size"),this._storage?a(this._storage).length:(o(this),this["[[SetData]]"].size)})),m(n.prototype,{has:function(t){var r;return e(this,"has"),this._storage&&null!==(r=pn(t))?!!this._storage[r]:(o(this),this["[[SetData]]"].has(t))},add:function(t){var r;return e(this,"add"),this._storage&&null!==(r=pn(t))?(this._storage[r]=!0,this):(o(this),this["[[SetData]]"].set(t,t),this)},delete:function(t){var r;if(e(this,"delete"),this._storage&&null!==(r=pn(t))){var n=G(this._storage,r);return delete this._storage[r]&&n}return o(this),this["[[SetData]]"].delete(t)},clear:function(){e(this,"clear"),this._storage&&(this._storage=yn()),this["[[SetData]]"]&&this["[[SetData]]"].clear()},values:function(){return e(this,"values"),o(this),new i(this["[[SetData]]"].values())},entries:function(){return e(this,"entries"),o(this),new i(this["[[SetData]]"].entries())},forEach:function(t){e(this,"forEach");var n=arguments.length>1?arguments[1]:null,i=this;o(i),this["[[SetData]]"].forEach((function(e,o){n?r(t,n,o,o,i):t(o,o,i)}))}}),g(n.prototype,"keys",n.prototype.values,!0),Mt(n.prototype,n.prototype.values);var i=function(t){this.it=t};return i.prototype={isSetIterator:!0,next:function(){if(!this.isSetIterator)throw new TypeError("Not a SetIterator");return this.it.next()}},Mt(i.prototype),n}()},bn=x.Set&&!Set.prototype.delete&&Set.prototype.remove&&Set.prototype.items&&Set.prototype.map&&Array.isArray((new Set).keys);if(bn&&(x.Set=dn.Set),x.Map||x.Set){var gn=s((function(){return 2===new Map([[1,2]]).get(1)}));gn||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,x.Map.prototype),e},x.Map.prototype=S(z.prototype),g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var mn=new Map,wn=((cn=new Map([[1,0],[2,0],[3,0],[4,0]])).set(-0,cn),cn.get(0)===cn&&cn.get(-0)===cn&&cn.has(0)&&cn.has(-0)),On=mn.set(1,2)===mn;wn&&On||it(Map.prototype,"set",(function(t,e){return r(K,this,0===t?0:t,e),this})),wn||(m(Map.prototype,{get:function(t){return r(W,this,0===t?0:t)},has:function(t){return r($,this,0===t?0:t)}},!0),j.preserveToString(Map.prototype.get,W),j.preserveToString(Map.prototype.has,$));var jn=new Set,Sn=Set.prototype.delete&&Set.prototype.add&&Set.prototype.has&&((un=jn).delete(0),un.add(-0),!un.has(0)),En=jn.add(1)===jn;if(!Sn||!En){var Tn=Set.prototype.add;Set.prototype.add=function(t){return r(Tn,this,0===t?0:t),this},j.preserveToString(Set.prototype.add,Tn)}if(!Sn){var xn=Set.prototype.has;Set.prototype.has=function(t){return r(xn,this,0===t?0:t)},j.preserveToString(Set.prototype.has,xn);var Pn=Set.prototype.delete;Set.prototype.delete=function(t){return r(Pn,this,0===t?0:t)},j.preserveToString(Set.prototype.delete,Pn)}var In=E(x.Map,(function(t){var e=new t([]);return e.set(42,42),e instanceof t})),An=Object.setPrototypeOf&&!In,_n=function(){try{return!(x.Map()instanceof x.Map)}catch(t){return t instanceof TypeError}}();0===x.Map.length&&!An&&_n||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Map.prototype=z.prototype,g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var Rn=E(x.Set,(function(t){var e=new t([]);return e.add(42,42),e instanceof t})),Mn=Object.setPrototypeOf&&!Rn,Nn=function(){try{return!(x.Set()instanceof x.Set)}catch(t){return t instanceof TypeError}}();if(0!==x.Set.length||Mn||!Nn){var Cn=x.Set;x.Set=function t(){if(!(this instanceof t))throw new TypeError('Constructor Set requires "new"');var e=new Cn;return arguments.length>0&&vn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Set.prototype=Cn.prototype,g(x.Set.prototype,"constructor",x.Set,!0),j.preserveToString(x.Set,Cn)}var Dn=new x.Map,Fn=!s((function(){return Dn.keys().next().done}));if(("function"!=typeof x.Map.prototype.clear||0!==(new x.Set).size||0!==Dn.size||"function"!=typeof x.Map.prototype.keys||"function"!=typeof x.Set.prototype.keys||"function"!=typeof x.Map.prototype.forEach||"function"!=typeof x.Set.prototype.forEach||f(x.Map)||f(x.Set)||"function"!=typeof Dn.keys().next||Fn||!In)&&m(x,{Map:dn.Map,Set:dn.Set},!0),x.Set.prototype.keys!==x.Set.prototype.values&&g(x.Set.prototype,"keys",x.Set.prototype.values,!0),Mt(Object.getPrototypeOf((new x.Map).keys())),Mt(Object.getPrototypeOf((new x.Set).keys())),y&&"has"!==x.Set.prototype.has.name){var kn=x.Set.prototype.has;it(x.Set.prototype,"has",(function(t){return r(kn,this,t)}))}}m(x,dn),Rt(x.Map),Rt(x.Set)}var Ln=function(t){if(!yt.TypeIsObject(t))throw new TypeError("target must be an object")},Un={apply:function(){return yt.Call(yt.Call,null,arguments)},construct:function(t,e){if(!yt.IsConstructor(t))throw new TypeError("First argument must be a constructor.");var r=arguments.length>2?arguments[2]:t;if(!yt.IsConstructor(r))throw new TypeError("new.target must be a constructor.");return yt.Construct(t,e,r,"internal")},deleteProperty:function(t,e){if(Ln(t),p){var r=Object.getOwnPropertyDescriptor(t,e);if(r&&!r.configurable)return!1}return delete t[e]},has:function(t,e){return Ln(t),e in t}};Object.getOwnPropertyNames&&Object.assign(Un,{ownKeys:function(t){Ln(t);var e=Object.getOwnPropertyNames(t);return yt.IsCallable(Object.getOwnPropertySymbols)&&N(e,Object.getOwnPropertySymbols(t)),e}});var Bn=function(t){return!c(t)};if(Object.preventExtensions&&Object.assign(Un,{isExtensible:function(t){return Ln(t),Object.isExtensible(t)},preventExtensions:function(t){return Ln(t),Bn((function(){return Object.preventExtensions(t)}))}}),p){var qn=function(t,e,r){var n=Object.getOwnPropertyDescriptor(t,e);if(!n){var o=Object.getPrototypeOf(t);if(null===o)return;return qn(o,e,r)}return"value"in n?n.value:n.get?yt.Call(n.get,r):void 0},Gn=function(t,e,n,o){var i=Object.getOwnPropertyDescriptor(t,e);if(!i){var a=Object.getPrototypeOf(t);if(null!==a)return Gn(a,e,n,o);i={value:void 0,writable:!0,enumerable:!0,configurable:!0}}return"value"in i?!!i.writable&&!!yt.TypeIsObject(o)&&(Object.getOwnPropertyDescriptor(o,e)?st.defineProperty(o,e,{value:n}):st.defineProperty(o,e,{value:n,writable:!0,enumerable:!0,configurable:!0})):!!i.set&&(r(i.set,o,n),!0)};Object.assign(Un,{defineProperty:function(t,e,r){return Ln(t),Bn((function(){return Object.defineProperty(t,e,r)}))},getOwnPropertyDescriptor:function(t,e){return Ln(t),Object.getOwnPropertyDescriptor(t,e)},get:function(t,e){Ln(t);var r=arguments.length>2?arguments[2]:t;return qn(t,e,r)},set:function(t,e,r){Ln(t);var n=arguments.length>3?arguments[3]:t;return Gn(t,e,r,n)}})}if(Object.getPrototypeOf){var Vn=Object.getPrototypeOf;Un.getPrototypeOf=function(t){return Ln(t),Vn(t)}}if(Object.setPrototypeOf&&Un.getPrototypeOf){var zn=function(t,e){for(var r=e;r;){if(t===r)return!0;r=Un.getPrototypeOf(r)}return!1};Object.assign(Un,{setPrototypeOf:function(t,e){if(Ln(t),null!==e&&!yt.TypeIsObject(e))throw new TypeError("proto must be an object or null");return e===st.getPrototypeOf(t)||!(st.isExtensible&&!st.isExtensible(t))&&!zn(t,e)&&(Object.setPrototypeOf(t,e),!0)}})}var Hn=function(t,e){yt.IsCallable(x.Reflect[t])?s((function(){return x.Reflect[t](1),x.Reflect[t](NaN),x.Reflect[t](!0),!0}))&&it(x.Reflect,t,e):g(x.Reflect,t,e)};Object.keys(Un).forEach((function(t){Hn(t,Un[t])}));var Wn=x.Reflect.getPrototypeOf;if(y&&Wn&&"getPrototypeOf"!==Wn.name&&it(x.Reflect,"getPrototypeOf",(function(t){return r(Wn,x.Reflect,t)})),x.Reflect.setPrototypeOf&&s((function(){return x.Reflect.setPrototypeOf(1,{}),!0}))&&it(x.Reflect,"setPrototypeOf",Un.setPrototypeOf),x.Reflect.defineProperty&&(s((function(){var t=!x.Reflect.defineProperty(1,"test",{value:1}),e="function"!=typeof Object.preventExtensions||!x.Reflect.defineProperty(Object.preventExtensions({}),"test",{});return t&&e}))||it(x.Reflect,"defineProperty",Un.defineProperty)),x.Reflect.construct&&(s((function(){var t=function(){};return x.Reflect.construct((function(){}),[],t)instanceof t}))||it(x.Reflect,"construct",Un.construct)),"Invalid Date"!==String(new Date(NaN))){var $n=Date.prototype.toString,Kn=function(){var t=+this;return t!=t?"Invalid Date":yt.Call($n,this)};it(Date.prototype,"toString",Kn)}var Jn={anchor:function(t){return yt.CreateHTML(this,"a","name",t)},big:function(){return yt.CreateHTML(this,"big","","")},blink:function(){return yt.CreateHTML(this,"blink","","")},bold:function(){return yt.CreateHTML(this,"b","","")},fixed:function(){return yt.CreateHTML(this,"tt","","")},fontcolor:function(t){return yt.CreateHTML(this,"font","color",t)},fontsize:function(t){return yt.CreateHTML(this,"font","size",t)},italics:function(){return yt.CreateHTML(this,"i","","")},link:function(t){return yt.CreateHTML(this,"a","href",t)},small:function(){return yt.CreateHTML(this,"small","","")},strike:function(){return yt.CreateHTML(this,"strike","","")},sub:function(){return yt.CreateHTML(this,"sub","","")},sup:function(){return yt.CreateHTML(this,"sup","","")}};h(Object.keys(Jn),(function(t){var e=String.prototype[t],n=!1;if(yt.IsCallable(e)){var o=r(e,"",' " '),i=_([],o.match(/"/g)).length;n=o!==o.toLowerCase()||i>2}else n=!0;n&&it(String.prototype,t,Jn[t])}));var Xn=function(){if(!at)return!1;var t="object"==typeof JSON&&"function"==typeof JSON.stringify?JSON.stringify:null;if(!t)return!1;if(void 0!==t(J()))return!0;if("[null]"!==t([J()]))return!0;var e={a:J()};return e[J()]=!0,"{}"!==t(e)}(),Yn=s((function(){return!at||"{}"===JSON.stringify(Object(J()))&&"[{}]"===JSON.stringify([Object(J())])}));if(Xn||!Yn){var Zn=JSON.stringify;it(JSON,"stringify",(function(t){if("symbol"!=typeof t){var e;arguments.length>1&&(e=arguments[1]);var n=[t];if(i(e))n.push(e);else{var o=yt.IsCallable(e)?e:null,a=function(t,e){var n=o?r(o,this,t,e):e;if("symbol"!=typeof n)return ot.symbol(n)?Le({})(n):n};n.push(a)}return arguments.length>2&&n.push(arguments[2]),Zn.apply(this,n)}}))}return x})?i.call(e,r,e,t):i)||(t.exports=a)}).call(this,r("yLpj"),r("8oxB"))},rCmP:function(t,e,r){"use strict";t.exports=function(t){return"string"==typeof t||"symbol"==typeof t}},rGdr:function(t,e,r){"use strict";var n=r("HgV8"),o=r("hemD"),i=r("Ii9V"),a=r("TU3P"),u=r("Khql"),c=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,l=u("Array.prototype.concat"),p=u("Array.prototype.reduce"),y=f?function(t){return l(s(t),f(t))}:s,h=o(c)&&o(s);t.exports=function(t){if(i(t),!h)throw new TypeError("getOwnPropertyDescriptors requires Object.getOwnPropertyDescriptor");var e=a(t);return p(y(e),(function(t,r){var o=c(e,r);return void 0!==o&&n(t,r,o),t}),{})}},rQy3:function(t,e,r){"use strict";var n=r("oNNP"),o=r("Ii9V"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=o(t),r=[];for(var a in e)n(e,a)&&i(e,a)&&r.push(e[a]);return r}},rTV3:function(t,e){!function(t){"use strict";if(!t.origin){var e=t.protocol+"//"+t.hostname+(t.port&&":"+t.port);try{Object.defineProperty(t,"origin",{enumerable:!0,value:e})}catch(r){t.origin=e}}}(window.location)},"s+g2":function(t,e,r){"use strict";var n=r("P5mh");t.exports=function(){return"function"==typeof String.prototype.padStart?String.prototype.padStart:n}},"s+gD":function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return u+h}},sYn3:function(t,e,r){"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r("1KsK"),u=Object.prototype.propertyIsEnumerable,c=!u.call({toString:null},"toString"),s=u.call((function(){}),"prototype"),f=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{l(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),u=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var h=s&&r;if(u&&t.length>0&&!o.call(t,0))for(var v=0;v<t.length;++v)p.push(String(v));if(n&&t.length>0)for(var d=0;d<t.length;++d)p.push(String(d));else for(var b in t)h&&"prototype"===b||!o.call(t,b)||p.push(String(b));if(c)for(var g=function(t){if("undefined"==typeof window||!y)return l(t);try{return l(t)}catch(t){return!1}}(t),m=0;m<f.length;++m)g&&"constructor"===f[m]||!o.call(t,f[m])||p.push(f[m]);return p}}t.exports=n},sqVN:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Math%"),i=n("%Number%");t.exports=i.MAX_SAFE_INTEGER||o.pow(2,53)-1},srjY:function(t,e,r){"use strict";(function(e){var n=r("45zb");if(r("UVaH")()||r("FpZJ")()){var o=Symbol.iterator;t.exports=function(t){return null!=t&&void 0!==t[o]?t[o]():n(t)?Array.prototype[o].call(t):void 0}}else{var i=r("lmVY"),a=r("VbLK"),u=r("6ayh"),c=u("%Map%",!0),s=u("%Set%",!0),f=r("Khql"),l=f("Array.prototype.push"),p=f("String.prototype.charCodeAt"),y=f("String.prototype.slice"),h=function(t){var e=0;return{next:function(){var r,n=e>=t.length;return n||(r=t[e],e+=1),{done:n,value:r}}}},v=function(t){if(i(t)||n(t))return h(t);if(a(t)){var e=0;return{next:function(){var r=function(t,e){if(e+1>=t.length)return e+1;var r=p(t,e);if(r<55296||r>56319)return e+1;var n=p(t,e+1);return n<56320||n>57343?e+1:e+2}(t,e),n=y(t,e,r);return e=r,{done:r>t.length,value:n}}}}};if(c||s){var d=r("/RMt"),b=r("vgOX"),g=f("Map.prototype.forEach",!0),m=f("Set.prototype.forEach",!0);if(void 0===e||!e.versions||!e.versions.node)var w=f("Map.prototype.iterator",!0),O=f("Set.prototype.iterator",!0),j=function(t){var e=!1;return{next:function(){try{return{done:e,value:e?void 0:t.next()}}catch(t){return e=!0,{done:!0,value:void 0}}}}};var S=f("Map.prototype.@@iterator",!0)||f("Map.prototype._es6-shim iterator_",!0),E=f("Set.prototype.@@iterator",!0)||f("Set.prototype._es6-shim iterator_",!0);t.exports=function(t){return function(t){if(d(t)){if(w)return j(w(t));if(S)return S(t);if(g){var e=[];return g(t,(function(t,r){l(e,[r,t])})),h(e)}}if(b(t)){if(O)return j(O(t));if(E)return E(t);if(m){var r=[];return m(t,(function(t){l(r,t)})),h(r)}}}(t)||v(t)}}else t.exports=v}}).call(this,r("8oxB"))},szxn:function(t,e){!function(){if(!Object.setPrototypeOf&&!{}.__proto__){var t=Object.getPrototypeOf;Object.getPrototypeOf=function(e){return e.__proto__?e.__proto__:t.call(Object,e)}}}()},tPqs:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("hLiU"),i=r("RIFg");t.exports=function(t,e){var r=o(t,"next",arguments.length<2?[]:[e]);if("Object"!==i(r))throw new n("iterator next must return an object");return r}},tihr:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("TU3P");t.exports=function(t,e){if(!o(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");return i(t)[e]}},u1xu:function(t,e,r){"use strict";t.exports=function(t){return+t}},uKH6:function(t,e,r){"use strict";var n=r("wX2V");t.exports=function(){if(String.prototype.matchAll)try{"".matchAll(RegExp.prototype)}catch(t){return String.prototype.matchAll}return n}},ucYh:function(t,e){var r="undefined"!=typeof requestIdleCallback;t.exports=r?requestIdleCallback:function(t){return setTimeout((function(){var e=Date.now();t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})}),1)},t.exports.cancelIdleCallback=r?cancelIdleCallback:clearTimeout},uuTH:function(t,e,r){"use strict";var n=r("Lcws"),o=r("UBBE"),i=r("cCsD"),a=r("NKaP"),u=r("IFfy"),c=r("xhJ2"),s=r("6ayh"),f=r("Khql"),l=r("VbLK"),p=f("String.prototype.charAt"),y=s("%Array.prototype.indexOf%");t.exports=function(t){var e=arguments.length>1?n(arguments[1]):0;if(y&&!u(t)&&c(e)&&void 0!==t)return y.apply(this,arguments)>-1;var r=i(this),s=o(r.length);if(0===s)return!1;for(var f=e>=0?e:Math.max(0,s+e);f<s;){if(a(t,l(r)?p(r,f):r[f]))return!0;f+=1}return!1}},v3P4:function(t,e,r){"use strict";var n=r("82c2"),o=r("22yB");t.exports=function(){var t=o();return n(Array.prototype,{flat:t},{flat:function(){return Array.prototype.flat!==t}}),t}},vgOX:function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;i||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||u||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(u.call(t),a)try{a.call(t)}catch(t){return!0}return t instanceof i}catch(t){}return!1}},vndB:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.prototype.finally` requires a global `Promise` be available.")}},vzKJ:function(t,e,r){"use strict";(function(e){var n=r("hBby");t.exports=function(){return"object"==typeof e&&e&&e.Math===Math&&e.Array===Array?e:n}}).call(this,r("yLpj"))},wX2V:function(t,e,r){"use strict";var n=r("aTj1"),o=r("2GRh"),i=r("XDGy"),a=r("PyeM"),u=r("R5T6"),c=r("Ii9V"),s=r("Khql"),f=r("UVaH")(),l=r("5xAX"),p=s("String.prototype.indexOf"),y=r("bBhT"),h=function(t){var e=y();if(f&&"symbol"==typeof Symbol.matchAll){var r=i(t,Symbol.matchAll);return r===RegExp.prototype[Symbol.matchAll]&&r!==e?e:r}if(a(t))return e};t.exports=function(t){var e=c(this);if(null!=t){if(a(t)){var r="flags"in t?o(t,"flags"):l(t);if(c(r),p(u(r),"g")<0)throw new TypeError("matchAll requires a global regular expression")}var i=h(t);if(void 0!==i)return n(i,t,[e])}var s=u(e),f=new RegExp(t,"g");return n(h(f),f,[s])}},wrft:function(t,e,r){"use strict";var n=r("0yco"),o=r("1Fze");t.exports=function(t){var e=o(t);return n(e)}},xEkU:function(t,e,r){(function(e){for(var n=r("bQgK"),o="undefined"==typeof window?e:window,i=["moz","webkit"],a="AnimationFrame",u=o["request"+a],c=o["cancel"+a]||o["cancelRequest"+a],s=0;!u&&s<i.length;s++)u=o[i[s]+"Request"+a],c=o[i[s]+"Cancel"+a]||o[i[s]+"CancelRequest"+a];if(!u||!c){var f=0,l=0,p=[];u=function(t){if(0===p.length){var e=n(),r=Math.max(0,1e3/60-(e-f));f=r+e,setTimeout((function(){var t=p.slice(0);p.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(f)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return p.push({handle:++l,callback:t,cancelled:!1}),l},c=function(t){for(var e=0;e<p.length;e++)p[e].handle===t&&(p[e].cancelled=!0)}}t.exports=function(t){return u.call(o,t)},t.exports.cancel=function(){c.apply(o,arguments)},t.exports.polyfill=function(t){t||(t=o),t.requestAnimationFrame=u,t.cancelAnimationFrame=c}}).call(this,r("yLpj"))},xG2L:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%SyntaxError%"),a=r("oNNP"),u={"Property Descriptor":function(t,e){if("Object"!==t(e))return!1;var r={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var n in e)if(a(e,n)&&!r[n])return!1;var i=a(e,"[[Value]]"),u=a(e,"[[Get]]")||a(e,"[[Set]]");if(i&&u)throw new o("Property Descriptors may not be both accessor and data descriptors");return!0}};t.exports=function(t,e,r,n){var a=u[e];if("function"!=typeof a)throw new i("unknown record type: "+e);if(!a(t,n))throw new o(r+" must be a "+e)}},xby5:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("UsSR"),i=r("b0r7"),a=r("aTj1"),u=r("XDGy"),c=r("1Soo"),s=r("RIFg");t.exports=function(t,e){var r=e;arguments.length<2&&(r=o({AdvanceStringIndex:i,GetMethod:u,IsArray:c,Type:s},t));var f=a(r,t);if("Object"!==s(f))throw new n("iterator must return an object");return f}},xdJO:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("RegExp.prototype.exec"),i=r("aTj1"),a=r("2GRh"),u=r("hemD"),c=r("RIFg");t.exports=function(t,e){if("Object"!==c(t))throw new n("Assertion failed: `R` must be an Object");if("String"!==c(e))throw new n("Assertion failed: `S` must be a String");var r=a(t,"exec");if(u(r)){var s=i(r,t,[e]);if(null===s||"Object"===c(s))return s;throw new n('"exec" method must return `null` or an Object')}return o(t,e)}},xhJ2:function(t,e,r){"use strict";var n=Number.isNaN||function(t){return t!=t};t.exports=Number.isFinite||function(t){return"number"==typeof t&&!n(t)&&t!==1/0&&t!==-1/0}},xmva:function(t,e,r){"use strict";r("v3P4")()},xoj2:function(t,e,r){"use strict";var n=r("rQy3");t.exports=function(){return"function"==typeof Object.values?Object.values:n}},y14U:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r=Array,n=r.prototype,o=Object,i=o.prototype,a=Function,u=a.prototype,c=String,s=c.prototype,f=Number,l=f.prototype,p=n.slice,y=n.splice,h=n.push,v=n.unshift,d=n.concat,b=n.join,g=u.call,m=u.apply,w=Math.max,O=Math.min,j=i.toString,S="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,E=Function.prototype.toString,T=/^\s*class /,x=function(t){try{var e=E.call(t).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return T.test(e)}catch(t){return!1}},P=function(t){try{return!x(t)&&(E.call(t),!0)}catch(t){return!1}},I="[object Function]",A="[object GeneratorFunction]",_=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(S)return P(t);if(x(t))return!1;var e=j.call(t);return e===I||e===A},R=RegExp.prototype.exec,M=function(t){try{return R.call(t),!0}catch(t){return!1}},N="[object RegExp]";t=function(t){return"object"==typeof t&&(S?M(t):j.call(t)===N)};var C=String.prototype.valueOf,D=function(t){try{return C.call(t),!0}catch(t){return!1}},F="[object String]";e=function(t){return"string"==typeof t||"object"==typeof t&&(S?D(t):j.call(t)===F)};var k=o.defineProperty&&function(){try{var t={};for(var e in o.defineProperty(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),L=(V=i.hasOwnProperty,z=k?function(t,e,r,n){!n&&e in t||o.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(t,e,r,n){!n&&e in t||(t[e]=r)},function(t,e,r){for(var n in e)V.call(e,n)&&z(t,n,e[n],r)}),U=function(t){var e=typeof t;return null===t||"object"!==e&&"function"!==e},B=f.isNaN||function(t){return t!=t},q={ToInteger:function(t){var e=+t;return B(e)?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e},ToPrimitive:function(t){var e,r,n;if(U(t))return t;if(r=t.valueOf,_(r)&&(e=r.call(t),U(e)))return e;if(n=t.toString,_(n)&&(e=n.call(t),U(e)))return e;throw new TypeError},ToObject:function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return o(t)},ToUint32:function(t){return t>>>0}},G=function(){};var V,z;L(u,{bind:function(t){var e=this;if(!_(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,n=p.call(arguments,1),i=function(){if(this instanceof r){var i=m.call(e,this,d.call(n,p.call(arguments)));return o(i)===i?i:this}return m.call(e,t,d.call(n,p.call(arguments)))},u=w(0,e.length-n.length),c=[],s=0;s<u;s++)h.call(c,"$"+s);return r=a("binder","return function ("+b.call(c,",")+"){ return binder.apply(this, arguments); }")(i),e.prototype&&(G.prototype=e.prototype,r.prototype=new G,G.prototype=null),r}});var H=g.bind(i.hasOwnProperty),W=g.bind(i.toString),$=g.bind(p),K=m.bind(p);if("object"==typeof document&&document&&document.documentElement)try{$(document.documentElement.childNodes)}catch(t){var J=$,X=K;$=function(t){for(var e=[],r=t.length;r-- >0;)e[r]=t[r];return X(e,J(arguments,1))},K=function(t,e){return X($(t),e)}}var Y=g.bind(s.slice),Z=g.bind(s.split),Q=g.bind(s.indexOf),tt=g.bind(h),et=g.bind(i.propertyIsEnumerable),rt=g.bind(n.sort),nt=r.isArray||function(t){return"[object Array]"===W(t)},ot=1!==[].unshift(0);L(n,{unshift:function(){return v.apply(this,arguments),this.length}},ot),L(r,{isArray:nt});var it=o("a"),at="a"!==it[0]||!(0 in it),ut=function(t){var e=!0,r=!0,n=!1;if(t)try{t.call("foo",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([1],(function(){r="string"==typeof this}),"x")}catch(t){n=!0}return!!t&&!n&&e&&r};L(n,{forEach:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=-1,a=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++i<a;)i in o&&(void 0===r?t(o[i],i,n):t.call(r,o[i],i,n))}},!ut(n.forEach)),L(n,{map:function(t){var n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=r(a);if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.map callback must be a function");for(var c=0;c<a;c++)c in i&&(u[c]=void 0===n?t(i[c],c,o):t.call(n,i[c],c,o));return u}},!ut(n.map)),L(n,{filter:function(t){var r,n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=[];if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.filter callback must be a function");for(var c=0;c<a;c++)c in i&&(r=i[c],(void 0===n?t(r,c,o):t.call(n,r,c,o))&&tt(u,r));return u}},!ut(n.filter)),L(n,{every:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.every callback must be a function");for(var a=0;a<i;a++)if(a in o&&!(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!1;return!0}},!ut(n.every)),L(n,{some:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.some callback must be a function");for(var a=0;a<i;a++)if(a in o&&(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!0;return!1}},!ut(n.some));var ct=!1;n.reduce&&(ct="object"==typeof n.reduce.call("es5",(function(t,e,r,n){return n})));L(n,{reduce:function(t){var r=q.ToObject(this),n=at&&e(this)?Z(this,""):r,o=q.ToUint32(n.length);if(!_(t))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===o&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var i,a=0;if(arguments.length>=2)i=arguments[1];else for(;;){if(a in n){i=n[a++];break}if(++a>=o)throw new TypeError("reduce of empty array with no initial value")}for(;a<o;a++)a in n&&(i=t(i,n[a],a,r));return i}},!ct);var st=!1;n.reduceRight&&(st="object"==typeof n.reduceRight.call("es5",(function(t,e,r,n){return n})));L(n,{reduceRight:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(!_(t))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===i&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var a=i-1;if(arguments.length>=2)r=arguments[1];else for(;;){if(a in o){r=o[a--];break}if(--a<0)throw new TypeError("reduceRight of empty array with no initial value")}if(a<0)return r;do{a in o&&(r=t(r,o[a],a,n))}while(a--);return r}},!st);var ft=n.indexOf&&-1!==[0,1].indexOf(1,2);L(n,{indexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=0;for(arguments.length>1&&(o=q.ToInteger(arguments[1])),o=o>=0?o:w(0,n+o);o<n;o++)if(o in r&&r[o]===t)return o;return-1}},ft);var lt=n.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);L(n,{lastIndexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=n-1;for(arguments.length>1&&(o=O(o,q.ToInteger(arguments[1]))),o=o>=0?o:n-Math.abs(o);o>=0;o--)if(o in r&&t===r[o])return o;return-1}},lt);var pt=(yt=[1,2],ht=yt.splice(),2===yt.length&&nt(ht)&&0===ht.length);var yt,ht;L(n,{splice:function(t,e){return 0===arguments.length?[]:y.apply(this,arguments)}},!pt);var vt=(dt={},n.splice.call(dt,0,0,1),1===dt.length);var dt;L(n,{splice:function(t,e){if(0===arguments.length)return[];var r=arguments;return this.length=w(q.ToInteger(this.length),0),arguments.length>0&&"number"!=typeof e&&((r=$(arguments)).length<2?tt(r,this.length-t):r[1]=q.ToInteger(e)),y.apply(this,r)}},!vt);var bt=(mt=new r(1e5),mt[8]="x",mt.splice(1,1),7===mt.indexOf("x")),gt=function(){var t=[];return t[256]="a",t.splice(257,0,"b"),"a"===t[256]}();var mt;L(n,{splice:function(t,e){for(var r,n=q.ToObject(this),o=[],i=q.ToUint32(n.length),a=q.ToInteger(t),u=a<0?w(i+a,0):O(a,i),s=0===arguments.length?0:1===arguments.length?i-u:O(w(q.ToInteger(e),0),i-u),f=0;f<s;)r=c(u+f),H(n,r)&&(o[f]=n[r]),f+=1;var l,p=$(arguments,2),y=p.length;if(y<s){f=u;for(var h=i-s;f<h;)r=c(f+s),l=c(f+y),H(n,r)?n[l]=n[r]:delete n[l],f+=1;f=i;for(var v=i-s+y;f>v;)delete n[f-1],f-=1}else if(y>s)for(f=i-s;f>u;)r=c(f+s-1),l=c(f+y-1),H(n,r)?n[l]=n[r]:delete n[l],f-=1;f=u;for(var d=0;d<p.length;++d)n[f]=p[d],f+=1;return n.length=i-s+y,o}},!bt||!gt);var wt,Ot=n.join;try{wt="1,2,3"!==Array.prototype.join.call("123",",")}catch(t){wt=!0}wt&&L(n,{join:function(t){var r=void 0===t?",":t;return Ot.call(e(this)?Z(this,""):this,r)}},wt);var jt="1,2"!==[1,2].join(void 0);jt&&L(n,{join:function(t){var e=void 0===t?",":t;return Ot.call(this,e)}},jt);var St=function(t){for(var e=q.ToObject(this),r=q.ToUint32(e.length),n=0;n<arguments.length;)e[r+n]=arguments[n],n+=1;return e.length=r+n,r+n},Et=function(){var t={};return 1!==Array.prototype.push.call(t,void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:function(t){return nt(this)?h.apply(this,arguments):St.apply(this,arguments)}},Et);var Tt=function(){var t=[];return 1!==t.push(void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:St},Tt),L(n,{slice:function(t,r){var n=e(this)?Z(this,""):this;return K(n,arguments)}},at);var xt=function(){try{[1,2].sort(null)}catch(t){try{[1,2].sort({})}catch(t){return!1}}return!0}(),Pt=function(){try{return[1,2].sort(/a/),!1}catch(t){}return!0}(),It=function(){try{return[1,2].sort(void 0),!0}catch(t){}return!1}();L(n,{sort:function(t){if(void 0===t)return rt(this);if(!_(t))throw new TypeError("Array.prototype.sort callback must be a function");return rt(this,t)}},xt||!It||!Pt);var At=!et({toString:null},"toString"),_t=et((function(){}),"prototype"),Rt=!H("x","0"),Mt=function(t){var e=t.constructor;return e&&e.prototype===t},Nt={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0,$width:!0,$height:!0,$top:!0,$localStorage:!0},Ct=function(){if("undefined"==typeof window)return!1;for(var t in window)try{!Nt["$"+t]&&H(window,t)&&null!==window[t]&&"object"==typeof window[t]&&Mt(window[t])}catch(t){return!0}return!1}(),Dt=function(t){if("undefined"==typeof window||!Ct)return Mt(t);try{return Mt(t)}catch(t){return!1}},Ft=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],kt=Ft.length,Lt=function(t){return"[object Arguments]"===W(t)},Ut=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&!nt(t)&&_(t.callee)},Bt=Lt(arguments)?Lt:Ut;L(o,{keys:function(t){var r=_(t),n=Bt(t),o=null!==t&&"object"==typeof t,i=o&&e(t);if(!o&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var a=[],u=_t&&r;if(i&&Rt||n)for(var s=0;s<t.length;++s)tt(a,c(s));if(!n)for(var f in t)u&&"prototype"===f||!H(t,f)||tt(a,c(f));if(At)for(var l=Dt(t),p=0;p<kt;p++){var y=Ft[p];l&&"constructor"===y||!H(t,y)||tt(a,y)}return a}});var qt=o.keys&&function(){return 2===o.keys(arguments).length}(1,2),Gt=o.keys&&function(){var t=o.keys(arguments);return 1!==arguments.length||1!==t.length||1!==t[0]}(1),Vt=o.keys;L(o,{keys:function(t){return Bt(t)?Vt($(t)):Vt(t)}},!qt||Gt);var zt,Ht,Wt=0!==new Date(-0xc782b5b342b24).getUTCMonth(),$t=new Date(-0x55d318d56a724),Kt=new Date(14496624e5),Jt="Mon, 01 Jan -45875 11:59:59 GMT"!==$t.toUTCString(),Xt=$t.getTimezoneOffset();Xt<-720?(zt="Tue Jan 02 -45875"!==$t.toDateString(),Ht=!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt))):(zt="Mon Jan 01 -45875"!==$t.toDateString(),Ht=!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt)));var Yt=g.bind(Date.prototype.getFullYear),Zt=g.bind(Date.prototype.getMonth),Qt=g.bind(Date.prototype.getDate),te=g.bind(Date.prototype.getUTCFullYear),ee=g.bind(Date.prototype.getUTCMonth),re=g.bind(Date.prototype.getUTCDate),ne=g.bind(Date.prototype.getUTCDay),oe=g.bind(Date.prototype.getUTCHours),ie=g.bind(Date.prototype.getUTCMinutes),ae=g.bind(Date.prototype.getUTCSeconds),ue=g.bind(Date.prototype.getUTCMilliseconds),ce=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],se=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],fe=function(t,e){return Qt(new Date(e,t,0))};L(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this);return t<0&&Zt(this)>11?t+1:t},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this);return t<0&&e>11?0:e},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this),r=Qt(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this);return t<0&&ee(this)>11?t+1:t},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this);return t<0&&e>11?0:e},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this),r=re(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r}},Wt),L(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=ne(this),e=re(this),r=ee(this),n=te(this),o=oe(this),i=ie(this),a=ae(this);return ce[t]+", "+(e<10?"0"+e:e)+" "+se[r]+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"}},Wt||Jt),L(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear();return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n}},Wt||zt),(Wt||Ht)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear(),o=this.getHours(),i=this.getMinutes(),a=this.getSeconds(),u=this.getTimezoneOffset(),c=Math.floor(Math.abs(u)/60),s=Math.floor(Math.abs(u)%60);return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"+(u>0?"-":"+")+(c<10?"0"+c:c)+(s<10?"0"+s:s)},k&&o.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var le=-621987552e5,pe="-000001",ye=Date.prototype.toISOString&&-1===new Date(le).toISOString().indexOf(pe),he=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date(-1).toISOString(),ve=g.bind(Date.prototype.getTime);L(Date.prototype,{toISOString:function(){if(!isFinite(this)||!isFinite(ve(this)))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var t=te(this),e=ee(this);t+=Math.floor(e/12);var r=[(e=(e%12+12)%12)+1,re(this),oe(this),ie(this),ae(this)];t=(t<0?"-":t>9999?"+":"")+Y("00000"+Math.abs(t),0<=t&&t<=9999?-4:-6);for(var n=0;n<r.length;++n)r[n]=Y("00"+r[n],-2);return t+"-"+$(r,0,2).join("-")+"T"+$(r,2).join(":")+"."+Y("000"+ue(this),-3)+"Z"}},ye||he);var de=function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(le).toJSON().indexOf(pe)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(t){return!1}}();de||(Date.prototype.toJSON=function(t){var e=o(this),r=q.ToPrimitive(e);if("number"==typeof r&&!isFinite(r))return null;var n=e.toISOString;if(!_(n))throw new TypeError("toISOString property is not callable");return n.call(e)});var be=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),ge=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z")),me=isNaN(Date.parse("2000-01-01T00:00:00.000Z"));if(me||ge||!be){var we=Math.pow(2,31)-1,Oe=B(new Date(1970,0,1,0,0,0,we+1).getTime());Date=function(t){var e=function(r,n,o,i,a,u,s){var f,l=arguments.length;if(this instanceof t){var p=u,y=s;if(Oe&&l>=7&&s>we){var h=Math.floor(s/we)*we,v=Math.floor(h/1e3);p+=v,y-=1e3*v}f=1===l&&c(r)===r?new t(e.parse(r)):l>=7?new t(r,n,o,i,a,p,y):l>=6?new t(r,n,o,i,a,p):l>=5?new t(r,n,o,i,a):l>=4?new t(r,n,o,i):l>=3?new t(r,n,o):l>=2?new t(r,n):l>=1?new t(r instanceof t?+r:r):new t}else f=t.apply(this,arguments);return U(f)||L(f,{constructor:e},!0),f},r=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),n=[0,31,59,90,120,151,181,212,243,273,304,334,365],o=function(t,e){var r=e>1?1:0;return n[e]+Math.floor((t-1969+r)/4)-Math.floor((t-1901+r)/100)+Math.floor((t-1601+r)/400)+365*(t-1970)},i=function(e){var r=0,n=e;if(Oe&&n>we){var o=Math.floor(n/we)*we,i=Math.floor(o/1e3);r+=i,n-=1e3*i}return f(new t(1970,0,1,0,0,r,n))};for(var a in t)H(t,a)&&(e[a]=t[a]);L(e,{now:t.now,UTC:t.UTC},!0),e.prototype=t.prototype,L(e.prototype,{constructor:e},!0);return L(e,{parse:function(e){var n=r.exec(e);if(n){var a,u=f(n[1]),c=f(n[2]||1)-1,s=f(n[3]||1)-1,l=f(n[4]||0),p=f(n[5]||0),y=f(n[6]||0),h=Math.floor(1e3*f(n[7]||0)),v=Boolean(n[4]&&!n[8]),d="-"===n[9]?1:-1,b=f(n[10]||0),g=f(n[11]||0),m=p>0||y>0||h>0;return l<(m?24:25)&&p<60&&y<60&&h<1e3&&c>-1&&c<12&&b<24&&g<60&&s>-1&&s<o(u,c+1)-o(u,c)&&(a=1e3*(60*((a=60*(24*(o(u,c)+s)+l+b*d))+p+g*d)+y)+h,v&&(a=i(a)),-864e13<=a&&a<=864e13)?a:NaN}return t.parse.apply(this,arguments)}}),e}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var je=l.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0)),Se={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(t,e){for(var r=-1,n=e;++r<Se.size;)n+=t*Se.data[r],Se.data[r]=n%Se.base,n=Math.floor(n/Se.base)},divide:function(t){for(var e=Se.size,r=0;--e>=0;)r+=Se.data[e],Se.data[e]=Math.floor(r/t),r=r%t*Se.base},numToString:function(){for(var t=Se.size,e="";--t>=0;)if(""!==e||0===t||0!==Se.data[t]){var r=c(Se.data[t]);""===e?e=r:e+=Y("0000000",0,7-r.length)+r}return e},pow:function t(e,r,n){return 0===r?n:r%2==1?t(e,r-1,n*e):t(e*e,r/2,n)},log:function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}},Ee=function(t){var e,r,n,o,i,a,u,s;if(e=f(t),(e=B(e)?0:Math.floor(e))<0||e>20)throw new RangeError("Number.toFixed called with invalid number of decimals");if(r=f(this),B(r))return"NaN";if(r<=-1e21||r>=1e21)return c(r);if(n="",r<0&&(n="-",r=-r),o="0",r>1e-21)if(a=(i=Se.log(r*Se.pow(2,69,1))-69)<0?r*Se.pow(2,-i,1):r/Se.pow(2,i,1),a*=4503599627370496,(i=52-i)>0){for(Se.multiply(0,a),u=e;u>=7;)Se.multiply(1e7,0),u-=7;for(Se.multiply(Se.pow(10,u,1),0),u=i-1;u>=23;)Se.divide(1<<23),u-=23;Se.divide(1<<u),Se.multiply(1,1),Se.divide(2),o=Se.numToString()}else Se.multiply(0,a),Se.multiply(1<<-i,0),o=Se.numToString()+Y("0.00000000000000000000",2,2+e);return o=e>0?(s=o.length)<=e?n+Y("0.0000000000000000000",0,e-s+2)+o:n+Y(o,0,s-e)+"."+Y(o,s-e):n+o};L(l,{toFixed:Ee},je);var Te=function(){try{return"1"===1..toPrecision(void 0)}catch(t){return!0}}(),xe=l.toPrecision;L(l,{toPrecision:function(t){return void 0===t?xe.call(this):xe.call(this,t)}},Te),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(Pe=void 0===/()??/.exec("")[1],Ie=Math.pow(2,32)-1,s.split=function(e,r){var n=String(this);if(void 0===e&&0===r)return[];if(!t(e))return Z(this,e,r);var o,i,a,u,c=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,l=new RegExp(e.source,s+"g");Pe||(o=new RegExp("^"+l.source+"$(?!\\s)",s));var p=void 0===r?Ie:q.ToUint32(r);for(i=l.exec(n);i&&!((a=i.index+i[0].length)>f&&(tt(c,Y(n,f,i.index)),!Pe&&i.length>1&&i[0].replace(o,(function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(i[t]=void 0)})),i.length>1&&i.index<n.length&&h.apply(c,$(i,1)),u=i[0].length,f=a,c.length>=p));)l.lastIndex===i.index&&l.lastIndex++,i=l.exec(n);return f===n.length?!u&&l.test("")||tt(c,""):tt(c,Y(n,f)),c.length>p?$(c,0,p):c}):"0".split(void 0,0).length&&(s.split=function(t,e){return void 0===t&&0===e?[]:Z(this,t,e)});var Pe,Ie;var Ae=s.replace,_e=(Re=[],"x".replace(/x(.)?/g,(function(t,e){tt(Re,e)})),1===Re.length&&void 0===Re[0]);var Re;_e||(s.replace=function(e,r){var n=_(r),o=t(e)&&/\)[*?]/.test(e.source);if(n&&o){return Ae.call(this,e,(function(t){var n=arguments.length,o=e.lastIndex;e.lastIndex=0;var i=e.exec(t)||[];return e.lastIndex=o,tt(i,arguments[n-2],arguments[n-1]),r.apply(this,i)}))}return Ae.call(this,e,r)});var Me=s.substr,Ne="".substr&&"b"!=="0b".substr(-1);L(s,{substr:function(t,e){var r=t;return t<0&&(r=w(this.length+t,0)),Me.call(this,r,e)}},Ne);var Ce="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",De="​",Fe="["+Ce+"]",ke=new RegExp("^"+Fe+Fe+"*"),Le=new RegExp(Fe+Fe+"*$"),Ue=s.trim&&(Ce.trim()||!De.trim());L(s,{trim:function(){if(null==this)throw new TypeError("can't convert "+this+" to object");return c(this).replace(ke,"").replace(Le,"")}},Ue);var Be=g.bind(String.prototype.trim),qe=s.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);L(s,{lastIndexOf:function(t){if(null==this)throw new TypeError("can't convert "+this+" to object");for(var e=c(this),r=c(t),n=arguments.length>1?f(arguments[1]):NaN,o=B(n)?1/0:q.ToInteger(n),i=O(w(o,0),e.length),a=r.length,u=i+a;u>0;){u=w(0,u-a);var s=Q(Y(e,u,i+a),r);if(-1!==s)return u+s}return-1}},qe);var Ge=s.lastIndexOf;L(s,{lastIndexOf:function(t){return Ge.apply(this,arguments)}},1!==s.lastIndexOf.length),(8!==parseInt(Ce+"08")||22!==parseInt(Ce+"0x16"))&&(parseInt=(Ve=parseInt,ze=/^[-+]?0[xX]/,function(t,e){var r=Be(String(t)),n=f(e)||(ze.test(r)?16:10);return Ve(r,n)}));var Ve,ze;1/parseFloat("-0")!=-1/0&&(parseFloat=(He=parseFloat,function(t){var e=Be(String(t)),r=He(e);return 0===r&&"-"===Y(e,0,1)?-0:r}));var He;if("RangeError: test"!==String(new RangeError("test"))){var We=function(){if(null==this)throw new TypeError("can't convert "+this+" to object");var t=this.name;void 0===t?t="Error":"string"!=typeof t&&(t=c(t));var e=this.message;return void 0===e?e="":"string"!=typeof e&&(e=c(e)),t?e?t+": "+e:t:e};Error.prototype.toString=We}if(k){var $e=function(t,e){if(et(t,e)){var r=Object.getOwnPropertyDescriptor(t,e);r.configurable&&(r.enumerable=!1,Object.defineProperty(t,e,r))}};$e(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),$e(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){var Ke=function(){var t="/"+this.source+"/";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),t};RegExp.prototype.toString=Ke}})?n.call(e,r,e,t):n)||(t.exports=o)}()},yBRW:function(t,e,r){"use strict";var n=r("82c2"),o=r("UMYc");t.exports=function(){var t=o();return n(Array.prototype,{map:t},{map:function(){return Array.prototype.map!==t}}),t}},yCJC:function(t,e,r){"use strict";var n=r("82c2"),o=r("l1+S");t.exports=function(){var t=o();return n(Array.prototype,{flatMap:t},{flatMap:function(){return Array.prototype.flatMap!==t}}),t}},yLpj:function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},yN6O:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("wrft"),u=r("ciGR"),c=r("TU3P");t.exports=function(){var t=c(this),e=u(i(t,"length")),r=1;arguments.length>0&&void 0!==arguments[0]&&(r=a(arguments[0]));var s=n(t,0);return o(s,t,e,0,r),s}},yNSe:function(t,e,r){"use strict";r("yCJC")()},yXPU:function(t,e){function r(t,e,r,n,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function u(t){r(a,o,i,u,c,"next",t)}function c(t){r(a,o,i,u,c,"throw",t)}u(void 0)}))}}},zODz:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},zWG1:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zkC3:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zpJY:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("KUT7"),i=Object.getOwnPropertyDescriptor;t.exports=function(){if(!n||"function"!=typeof i)return null;var t=i(Symbol.prototype,"description");if(!t||"function"!=typeof t.get)return o;var e=t.get.call(Symbol());return(void 0===e||""===e)&&"a"===t.get.call(Symbol("a"))?t.get:o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5hbGxzZXR0bGVkL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUucGFkZW5kL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5lbnRyaWVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3JlZ2V4cC1tYXRjaGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxNy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWJyb3dzZXItc2hpbXMvYnJvd3Nlci1vbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNJbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0Y2htZWRpYS1wb2x5ZmlsbC9tYXRjaE1lZGlhLmFkZExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9HZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzNS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYXJndW1lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxOS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uc29sZS1wb2x5ZmlsbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQWRkRW50cmllc0Zyb21JdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZnJvbWVudHJpZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvU3BlY2llc0NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbGlzdC1wb2x5ZmlsbC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2l0ZXJhdGUtdmFsdWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGNobWVkaWEtcG9seWZpbGwvbWF0Y2hNZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5hbGxzZXR0bGVkL3JlcXVpcmVQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWZpbmUtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1Byb21pc2VSZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1NhbWVWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWJyb3dzZXItc2hpbXMvZG9jdW1lbnQtY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvcmVnZXhUZXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRhdGUtb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYWYvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNQcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LWluY2x1ZGVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub1Byb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWpzLXNoaW1zL3RhcmdldC9lczIwMTguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvY3VtZW50LmNvbnRhaW5zL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0bWFwL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmVudHJpZXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmZyb21lbnRyaWVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzTmFOLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1jYWxsYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbnMtaGF2ZS1uYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9JdGVyYXRvckNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtaW5zcGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9Jc0NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9TYW1lVmFsdWVaZXJvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5L2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNFeHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItYnJvd3Nlci1zaGltcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9IYXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9PYmplY3RDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0U3ltYm9sRGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzUvQ2hlY2tPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9oZWxwZXJzL2lzUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9Ub0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzUvVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVJdGVyUmVzdWx0T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5L3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0SXRlcmF0b3JNZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy90YXJnZXQvZXMyMDE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXMyMDE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvaW50ZXJzZWN0aW9uLW9ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0dldE1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5wYWRlbmQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9Cb29sZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvVWludDMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRlcm5hbC1zbG90L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL2hlbHBlcnMvUmVnRXhwU3RyaW5nSXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2l0ZXJhdGUtaXRlcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5lbnRyaWVzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5hbGxzZXR0bGVkL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2JhbHRoaXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWpzLXNoaW1zL3RhcmdldC9lczIwMjAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQWR2YW5jZVN0cmluZ0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3BvbHlmaWxsLXJlZ2V4cC1tYXRjaGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGVyZm9ybWFuY2Utbm93L2xpYi9wZXJmb3JtYW5jZS1ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydC9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc21vb3Roc2Nyb2xsLXBvbHlmaWxsL2Rpc3Qvc21vb3Roc2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXQtcGxhY2Vob2xkZXItcG9seWZpbGwvZGlzdC9tYWluLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseS9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9Jc0NhbGxhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lczUtc2hpbS9lczUtc2hhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9PcmRpbmFyeUdldE93blByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9TcGVjaWVzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0SW5mZXJyZWROYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbG9iYWx0aGlzL2ltcGxlbWVudGF0aW9uLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtY2xvc2VzdC9lbGVtZW50LWNsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzRGF0YURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNDYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXktaW5jbHVkZXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbG9iYWx0aGlzL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFycmF5LW1ldGhvZC1ib3hlcy1wcm9wZXJseS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb2N1cy12aXNpYmxlL2Rpc3QvZm9jdXMtdmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZ2V0LWl0ZXJhdG9yL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoaW0ta2V5Ym9hcmQtZXZlbnQta2V5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yU3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvY3VtZW50LmNvbnRhaW5zL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yQ29tcGxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXRlcmF0b3JWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzNi1zaGltL2VzNi1zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aW5kb3ctbG9jYXRpb24tb3JpZ2luL3NyYy93aW5kb3ctbG9jYXRpb24tb3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0L3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZGVuZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbWF4U2FmZUludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWdldC1pdGVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW1hLWJhYmVsNi1wb2x5ZmlsbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9JdGVyYXRvck5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvR2V0Vi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5tYXRjaGFsbC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmljLXNoaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LWluY2x1ZGVzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1zZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvcmVxdWlyZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2JhbHRoaXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYWYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvYXNzZXJ0UmVjb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0dldEl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1JlZ0V4cEV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzNS1zaGltL2VzNS1zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUubWFwL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0bWFwL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0bWFwL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL3BvbHlmaWxsLmpzIl0sIm5hbWVzIjpbIkFycmF5U3BlY2llc0NyZWF0ZSIsIkNhbGwiLCJDcmVhdGVEYXRhUHJvcGVydHlPclRocm93IiwiR2V0IiwiSGFzUHJvcGVydHkiLCJJc0NhbGxhYmxlIiwiVG9VaW50MzIiLCJUb09iamVjdCIsIlRvU3RyaW5nIiwiY2FsbEJvdW5kIiwiaXNTdHJpbmciLCJib3hlZFN0cmluZyIsIk9iamVjdCIsInNwbGl0U3RyaW5nIiwic3RyU3BsaXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbGJhY2tmbiIsIlQiLCJPIiwidGhpcyIsInNlbGYiLCJsZW4iLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJhcmd1bWVudHMiLCJBIiwiayIsIlBrIiwia1ByZXNlbnQiLCJrVmFsdWUiLCJtYXBwZWRWYWx1ZSIsInJlcXVpcmVQcm9taXNlIiwiZ2V0UG9seWZpbGwiLCJkZWZpbmUiLCJwb2x5ZmlsbCIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicGFkRW5kIiwiaW1wbGVtZW50YXRpb24iLCJlbnRyaWVzIiwiU2V0IiwiU3BlY2llc0NvbnN0cnVjdG9yIiwiVG9MZW5ndGgiLCJUeXBlIiwiZmxhZ3NHZXR0ZXIiLCJSZWdFeHBTdHJpbmdJdGVyYXRvciIsIk9yaWdSZWdFeHAiLCJSZWdFeHAiLCJzdXBwb3J0c0NvbnN0cnVjdGluZ1dpdGhGbGFncyIsInJlZ2V4TWF0Y2hBbGwiLCJzdHJpbmciLCJSIiwiUyIsInRtcCIsIkMiLCJmbGFncyIsIm1hdGNoZXIiLCJzb3VyY2UiLCJjb25zdHJ1Y3RSZWdleFdpdGhGbGFncyIsImxhc3RJbmRleCIsImdsb2JhbCIsImZ1bGxVbmljb2RlIiwiQ3JlYXRlUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJpbmRleE9mIiwiZGVmaW5lUCIsImRlZmluZVByb3BlcnR5IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsImV4cG9ydGVkIiwiJE1hcCIsIk1hcCIsIiRTZXQiLCJ4IiwiJG1hcEhhcyIsImhhcyIsIiRzZXRIYXMiLCJjYWxsIiwiZSIsInRvU3RyIiwidG9TdHJpbmciLCJzeW1Ub1N0ciIsIlN5bWJvbCIsInN5bVN0cmluZ1JlZ2V4IiwidmFsdWVPZiIsInRlc3QiLCJpc1N5bWJvbE9iamVjdCIsImZyb21FbnRyaWVzIiwid2luZG93IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsIml0ZXJhdG9yIiwiVG91Y2hMaXN0IiwiQXJyYXkiLCIkTWF0aCIsIkdldEludHJpbnNpYyIsIlRvTnVtYmVyIiwiJGlzTmFOIiwiJGlzRmluaXRlIiwiJHNpZ24iLCIkZmxvb3IiLCJmbG9vciIsIiRhYnMiLCJhYnMiLCJudW1iZXIiLCIkVHlwZUVycm9yIiwiJE51bWJlciIsIiRSZWdFeHAiLCIkcGFyc2VJbnRlZ2VyIiwicmVnZXhUZXN0ZXIiLCJpc1ByaW1pdGl2ZSIsIiRzdHJTbGljZSIsImlzQmluYXJ5IiwiaXNPY3RhbCIsImlzSW52YWxpZEhleExpdGVyYWwiLCJoYXNOb25XUyIsImpvaW4iLCJ3cyIsInRyaW1SZWdleCIsIiRyZXBsYWNlIiwiVG9QcmltaXRpdmUiLCJhcmd1bWVudCIsIk5hTiIsInRyaW1tZWQiLCIkdHJpbSIsInN0ciIsImlzQXJncyIsImNhbGxlZSIsIiRBcnJheSIsImlzQXJyYXkiLCJJc1Byb3BlcnR5S2V5IiwiUCIsIlYiLCJUaHJvdyIsInNsaWNlIiwib3JpZ0tleXMiLCJrZXlzIiwia2V5c1NoaW0iLCJvIiwib3JpZ2luYWxLZXlzIiwic2hpbSIsImFyZ3MiLCJvYmplY3QiLCJtYXRjaE1lZGlhIiwiYWRkTGlzdGVuZXIiLCJsb2NhbE1hdGNoTWVkaWEiLCJoYXNNZWRpYVF1ZXJpZXMiLCJtYXRjaGVzIiwiaXNMaXN0ZW5pbmciLCJ0aW1lb3V0SUQiLCJxdWVyaWVzIiwiaGFuZGxlQ2hhbmdlIiwiZXZ0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImkiLCJpbCIsIm1xbCIsImxpc3RlbmVycyIsIm1lZGlhIiwiaiIsImpsIiwiaW5kZXgiLCJsaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwdXNoIiwicmVtb3ZlTGlzdGVuZXIiLCJzcGxpY2UiLCJmbGF0IiwiaW5zcGVjdCIsInJlZ2V4RXhlYyIsImV4ZWMiLCJoYXNUb1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZGVzY3JpcHRvciIsInRyeVJlZ2V4RXhlY0NhbGwiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImNyZWF0ZSIsImNoaWxkcmVuIiwiZW51bWVyYWJsZSIsImdldCIsImwiLCIkU3RyaW5nIiwia2V5IiwiaXNTdGFuZGFyZEFyZ3VtZW50cyIsImlzTGVnYWN5QXJndW1lbnRzIiwic3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyIsImNvbnNvbGUiLCJwcm9wIiwibWV0aG9kIiwiY29uIiwiZHVtbXkiLCJwcm9wZXJ0aWVzIiwibWV0aG9kcyIsInNwbGl0IiwicG9wIiwiY2FsbEJpbmQiLCJmbGFnc0JvdW5kIiwiZG9jdW1lbnQiLCJjb250YWlucyIsImJvZHkiLCJHZXRJdGVyYXRvciIsIkl0ZXJhdG9yQ2xvc2UiLCJJdGVyYXRvclN0ZXAiLCJJdGVyYXRvclZhbHVlIiwidGFyZ2V0IiwiaXRlcmFibGUiLCJhZGRlciIsIml0ZXJhdG9yUmVjb3JkIiwibmV4dCIsIm5leHRJdGVtIiwiZXJyb3IiLCJ2IiwiJGdPUEQiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsImhhc1N5bWJvbHMiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXN5bmNHZW5JdGVyYXRvciIsInVuZGVmaW5lZCIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiSU5UUklOU0lDUyIsIkFycmF5QnVmZmVyIiwiZm9yRWFjaCIsInZhbHVlcyIsImFzeW5jSXRlcmF0b3IiLCJBdG9taWNzIiwiQm9vbGVhbiIsIkRhdGFWaWV3IiwiRGF0ZSIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkVycm9yIiwiZXZhbCIsIkV2YWxFcnJvciIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZ1bmN0aW9uIiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJpc0Zpbml0ZSIsImlzTmFOIiwiSlNPTiIsInBhcnNlIiwiTWF0aCIsIk51bWJlciIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsInRoZW4iLCJhbGwiLCJyZWplY3QiLCJyZXNvbHZlIiwiUHJveHkiLCJSYW5nZUVycm9yIiwiUmVmZXJlbmNlRXJyb3IiLCJSZWZsZWN0IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJTeW50YXhFcnJvciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIlVSSUVycm9yIiwiV2Vha01hcCIsIldlYWtTZXQiLCJyZXBsYWNlIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsInJlc3VsdCIsIm1hdGNoIiwicXVvdGUiLCJzdWJTdHJpbmciLCJnZXRCYXNlSW50cmluc2ljIiwibmFtZSIsImFsbG93TWlzc2luZyIsInBhcnRzIiwiQWRkRW50cmllc0Zyb21JdGVyYWJsZSIsIklzQXJyYXkiLCJSZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiVG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5Iiwib2JqIiwiZW50cnkiLCJsZWdhY3lBc3NpZ24iLCIkc3BlY2llcyIsIklzQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJjb25zdHJ1Y3RvciIsImFzc2VydFJlY29yZCIsIkRlc2MiLCJ3cml0YWJsZSIsInNldCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJ2aWV3IiwiZWxlbUN0clByb3RvIiwiRWxlbWVudCIsIm9iakN0ciIsInN0clRyaW0iLCJ0cmltIiwiYXJySW5kZXhPZiIsIml0ZW0iLCJET01FeCIsInR5cGUiLCJtZXNzYWdlIiwiY29kZSIsIkRPTUV4Y2VwdGlvbiIsImNoZWNrVG9rZW5BbmRHZXRJbmRleCIsImNsYXNzTGlzdCIsInRva2VuIiwiQ2xhc3NMaXN0IiwiZWxlbSIsInRyaW1tZWRDbGFzc2VzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlcyIsIl91cGRhdGVDbGFzc05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3RQcm90byIsImNsYXNzTGlzdEdldHRlciIsImFkZCIsInRva2VucyIsInVwZGF0ZWQiLCJyZW1vdmUiLCJ0b2dnbGUiLCJmb3JjZSIsImNsYXNzTGlzdFByb3BEZXNjIiwiZXgiLCJfX2RlZmluZUdldHRlcl9fIiwidGVzdEVsZW1lbnQiLCJjcmVhdGVNZXRob2QiLCJvcmlnaW5hbCIsIkRPTVRva2VuTGlzdCIsIl90b2dnbGUiLCJnZXRJdGVyYXRvciIsIml0ZXJhdGUiLCJzdHlsZU1lZGlhIiwiaW5mbyIsInN0eWxlIiwic2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpZCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwibWF0Y2hNZWRpdW0iLCJ0ZXh0Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ0ZXh0Q29udGVudCIsIndpZHRoIiwiY29uY2F0Iiwib3JpZ0RlZmluZVByb3BlcnR5Iiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIl8iLCJhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkIiwicHJlZGljYXRlIiwiZm4iLCJkZWZpbmVQcm9wZXJ0aWVzIiwibWFwIiwicHJlZGljYXRlcyIsInByb3BzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJvbmNlIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIiRQcm9taXNlUmVzb2x2ZSIsInkiLCJiaW5kIiwiJHRlc3QiLCJyZWdleCIsImdldERheSIsInRyeURhdGVPYmplY3QiLCJpbmNsdWRlcyIsIlByb21pc2VSZXNvbHZlIiwiZ2V0SW50cmluc2ljIiwiaXRlbVByb21pc2UiLCJzdGF0dXMiLCJyZWFzb24iLCJzeW0iLCJzeW1PYmoiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic3ltcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiVG9Cb29sZWFuIiwiT2JqIiwiZ2V0dGVyIiwic2V0dGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIlR5cGVFcnIiLCJwcm90byIsIkZsYXR0ZW5JbnRvQXJyYXkiLCJtYXBwZXJGdW5jdGlvbiIsInNvdXJjZUxlbiIsIkRlZmluZU93blByb3BlcnR5IiwiRnJvbVByb3BlcnR5RGVzY3JpcHRvciIsIk9yZGluYXJ5R2V0T3duUHJvcGVydHkiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNFeHRlbnNpYmxlIiwiU2FtZVZhbHVlIiwib2xkRGVzYyIsImV4dGVuc2libGUiLCJhIiwiZm5Ub1N0ciIsImNvbnN0cnVjdG9yUmVnZXgiLCJpc0VTNkNsYXNzRm4iLCJmblN0ciIsInRyeUZ1bmN0aW9uT2JqZWN0Iiwic3RyQ2xhc3MiLCJmdW5jdGlvbnNIYXZlTmFtZXMiLCJmdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMiLCIkYmluZCIsImJvdW5kRnVuY3Rpb25zSGF2ZU5hbWVzIiwiR2V0TWV0aG9kIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25SZWNvcmQiLCJjb21wbGV0aW9uVGh1bmsiLCJpdGVyYXRvclJldHVybiIsImlubmVyUmVzdWx0IiwiaGFzTWFwIiwibWFwU2l6ZURlc2NyaXB0b3IiLCJtYXBTaXplIiwibWFwRm9yRWFjaCIsImhhc1NldCIsInNldFNpemVEZXNjcmlwdG9yIiwic2V0U2l6ZSIsInNldEZvckVhY2giLCJ3ZWFrTWFwSGFzIiwid2Vha1NldEhhcyIsImJvb2xlYW5WYWx1ZU9mIiwib2JqZWN0VG9TdHJpbmciLCJiaWdJbnRWYWx1ZU9mIiwiQmlnSW50IiwiaW5zcGVjdEN1c3RvbSIsImN1c3RvbSIsImluc3BlY3RTeW1ib2wiLCJpc1N5bWJvbCIsIndyYXBRdW90ZXMiLCJzIiwiZGVmYXVsdFN0eWxlIiwib3B0cyIsInF1b3RlQ2hhciIsInF1b3RlU3R5bGUiLCJpbnNwZWN0XyIsIm9wdGlvbnMiLCJkZXB0aCIsInNlZW4iLCJsb3dieXRlIiwiaW5zcGVjdFN0cmluZyIsIkluZmluaXR5IiwibWF4RGVwdGgiLCJ4cyIsImZyb20iLCJmIiwibSIsIm5hbWVPZiIsInN5bVN0cmluZyIsIm1hcmtCb3hlZCIsIkhUTUxFbGVtZW50Iiwibm9kZU5hbWUiLCJpc0VsZW1lbnQiLCJ0b0xvd2VyQ2FzZSIsImF0dHJzIiwiYXR0cmlidXRlcyIsImNoaWxkTm9kZXMiLCJhcnJPYmpLZXlzIiwiaXNFcnJvciIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzTnVtYmVyIiwiaXNCaWdJbnQiLCJpc0Jvb2xlYW4iLCJpc0RhdGUiLCJpc1JlZ0V4cCIsImhhc093biIsImhhc093blByb3BlcnR5IiwiYyIsIm4iLCJjaGFyQ29kZUF0IiwiOCIsIjkiLCIxMCIsIjEyIiwiMTMiLCJzaXplIiwiaXNBcnIiLCJnZXRTeW1ib2xEZXNjcmlwdGlvbiIsIiRpbmRleE9mIiwiaW50cmluc2ljIiwiJGRlZmluZVByb3BlcnR5IiwiJGlzRW51bWVyYWJsZSIsIkVTNVRvSW50ZWdlciIsImZ1bmN0aW9uUHJvdG8iLCIkT2JqZWN0IiwiJHByZXZlbnRFeHRlbnNpb25zIiwicHJldmVudEV4dGVuc2lvbnMiLCIkaXNFeHRlbnNpYmxlIiwiaXNFeHRlbnNpYmxlIiwiJHNsaWNlIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsInN0cmluZ0xlbmd0aCIsImZpbGxlciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJmTGVuIiwicmVtYWluaW5nQ29kZVVuaXRzIiwidHJ1bmNhdGVkU3RyaW5nRmlsbGVyIiwiRVM1VHlwZSIsIiRtYXRjaCIsImhhc1JlZ0V4cE1hdGNoZXIiLCIkRnVuY3Rpb24iLCIkYXBwbHkiLCIkY2FsbCIsIiRPYmplY3RDcmVhdGUiLCIkU3ludGF4RXJyb3IiLCJoYXNQcm90byIsImludGVybmFsU2xvdHNMaXN0Iiwic2xvdHMiLCJnZXRJbmZlcnJlZE5hbWUiLCJzeW1ib2wiLCJvcHRNZXNzYWdlIiwiZFAiLCJzZXRQcm90byIsInNldFByb3RvdHlwZU9mIiwiaXNNaXNzaW5nIiwiaXNCcm9rZW4iLCJkZXNjcmlwdGlvbiIsIm9yaWdTeW0iLCJlbXB0eVN0cmluZ3MiLCJTeW1OZXciLCJib3VuZEdldHRlciIsIndyYXBwZWRHZXR0ZXIiLCJzeW1ib2xEZXNjcmlwdGlvbiIsInNoaW1HbG9iYWwiLCJDcmVhdGVEYXRhUHJvcGVydHkiLCJzdWNjZXNzIiwiTUFYX1NBRkVfSU5URUdFUiIsIlRvSW50ZWdlciIsImFycmF5TWV0aG9kQm94ZXNQcm9wZXJseSIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwiZG9uZSIsIiRpdGVyYXRvciIsIiRzdHJpbmdTbGljZSIsIkVTIiwidXNpbmdJdGVyYXRvciIsImFyciIsIm5leHRJbmRleCIsIkFkdmFuY2VTdHJpbmdJbmRleCIsImRvdEFsbCIsIiRXZWFrTWFwIiwiJHB1c2giLCIkd2Vha01hcEdldCIsIiR3ZWFrTWFwU2V0IiwiJHdlYWtNYXBIYXMiLCIkbWFwR2V0IiwiJG1hcFNldCIsIiR3bSIsIiRtIiwiJG8iLCJjaGFubmVsIiwiYXNzZXJ0Iiwib2JqZWN0cyIsIm9iamVjdEdldCIsIm9iamVjdEhhcyIsIm9iamVjdFNldCIsInN0clZhbHVlIiwidHJ5U3RyaW5nT2JqZWN0IiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJpc0NhbGxhYmxlIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJtZXRob2ROYW1lcyIsImZ1bmMiLCJpbnB1dCIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSIsImludGVyc2VjdGlvblJhdGlvIiwicmVnaXN0cnkiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIlRIUk9UVExFX1RJTUVPVVQiLCJQT0xMX0lOVEVSVkFMIiwiVVNFX01VVEFUSU9OX09CU0VSVkVSIiwib2JzZXJ2ZSIsIl9vYnNlcnZhdGlvblRhcmdldHMiLCJzb21lIiwiZWxlbWVudCIsIm5vZGVUeXBlIiwiX3JlZ2lzdGVySW5zdGFuY2UiLCJfbW9uaXRvckludGVyc2VjdGlvbnMiLCJfY2hlY2tGb3JJbnRlcnNlY3Rpb25zIiwidW5vYnNlcnZlIiwiZmlsdGVyIiwiX3VubW9uaXRvckludGVyc2VjdGlvbnMiLCJfdW5yZWdpc3Rlckluc3RhbmNlIiwiZGlzY29ubmVjdCIsInRha2VSZWNvcmRzIiwicmVjb3JkcyIsIl9xdWV1ZWRFbnRyaWVzIiwiX2luaXRUaHJlc2hvbGRzIiwib3B0X3RocmVzaG9sZCIsInRocmVzaG9sZCIsInNvcnQiLCJ0IiwiX3BhcnNlUm9vdE1hcmdpbiIsIm9wdF9yb290TWFyZ2luIiwibWFyZ2lucyIsIm1hcmdpbiIsInVuaXQiLCJfbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMiLCJfbW9uaXRvcmluZ0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJhZGRFdmVudCIsIl9kb21PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImNsZWFySW50ZXJ2YWwiLCJyZW1vdmVFdmVudCIsInJvb3RJc0luRG9tIiwiX3Jvb3RJc0luRG9tIiwicm9vdFJlY3QiLCJfZ2V0Um9vdFJlY3QiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJoZWlnaHQiLCJ0YXJnZXRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwicm9vdENvbnRhaW5zVGFyZ2V0IiwiX3Jvb3RDb250YWluc1RhcmdldCIsIm9sZEVudHJ5IiwiaW50ZXJzZWN0aW9uUmVjdCIsIl9jb21wdXRlVGFyZ2V0QW5kUm9vdEludGVyc2VjdGlvbiIsIm5ld0VudHJ5IiwidGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiYm91bmRpbmdDbGllbnRSZWN0Iiwicm9vdEJvdW5kcyIsIl9oYXNDcm9zc2VkVGhyZXNob2xkIiwiaXNJbnRlcnNlY3RpbmciLCJfY2FsbGJhY2siLCJkaXNwbGF5IiwicmVjdDEiLCJyZWN0MiIsInBhcmVudCIsImdldFBhcmVudE5vZGUiLCJhdFJvb3QiLCJwYXJlbnRSZWN0IiwicGFyZW50Q29tcHV0ZWRTdHlsZSIsInJvb3QiLCJkb2N1bWVudEVsZW1lbnQiLCJvdmVyZmxvdyIsIm1heCIsIm1pbiIsImh0bWwiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9leHBhbmRSZWN0QnlSb290TWFyZ2luIiwicmVjdCIsIl9yb290TWFyZ2luVmFsdWVzIiwibmV3UmVjdCIsIm9sZFJhdGlvIiwibmV3UmF0aW8iLCJ0aHJlc2hvbGRzIiwiY29udGFpbnNEZWVwIiwidGFyZ2V0QXJlYSIsImludGVyc2VjdGlvbkFyZWEiLCJ0b0ZpeGVkIiwiY2FsbGJhY2siLCJvcHRfb3B0aW9ucyIsInRpbWVyIiwicm9vdE1hcmdpbiIsIm5vZGUiLCJldmVudCIsIm9wdF91c2VDYXB0dXJlIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YXRjaEV2ZW50IiwiZWwiLCJlcnIiLCJjaGlsZCIsImhvc3QiLCJHZXRWIiwiU0xPVCIsInNsb3QiLCJmcmVlemUiLCJDcmVhdGVJdGVyUmVzdWx0T2JqZWN0IiwiT2JqZWN0Q3JlYXRlIiwiUmVnRXhwRXhlYyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwidGhpc0luZGV4IiwiRVJST1JfTUVTU0FHRSIsInRoYXQiLCJib3VuZCIsImJpbmRlciIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJlbnRyeXMiLCJGIiwiZ2xvYmFsVGhpcyIsIklzSW50ZWdlciIsIiRjaGFyQ29kZUF0IiwiZmlyc3QiLCJzZWNvbmQiLCJyZWdleHBNYXRjaEFsbCIsIm1hdGNoQWxsIiwiZ2V0TmFub1NlY29uZHMiLCJocnRpbWUiLCJsb2FkVGltZSIsIm1vZHVsZUxvYWRUaW1lIiwibm9kZUxvYWRUaW1lIiwidXBUaW1lIiwiaHIiLCJ1cHRpbWUiLCJnZXRUaW1lIiwiZmV0Y2giLCJIZWFkZXJzIiwiYXBwZW5kIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwibGlzdCIsImdldEFsbCIsInRoaXNBcmciLCJzdXBwb3J0IiwiQmxvYiIsIlJlcXVlc3QiLCJjbG9uZSIsIkJvZHkiLCJSZXNwb25zZSIsIl9ib2R5SW5pdCIsInN0YXR1c1RleHQiLCJoZWFkZXJzIiwidXJsIiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJsb2NhdGlvbiIsImluaXQiLCJyZXF1ZXN0IiwiaXNQcm90b3R5cGVPZiIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwicmVzcG9uc2VVUkwiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVGV4dCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJvcGVuIiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiX2luaXRCb2R5IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwicmVqZWN0ZWQiLCJhcnJheUJ1ZmZlciIsInJlYWRBc1RleHQiLCJmb3JtRGF0YSIsImRlY29kZSIsImpzb24iLCJ1cGNhc2VkIiwibW9kZSIsInRvVXBwZXJDYXNlIiwicmVmZXJyZXIiLCJmb3JtIiwiYnl0ZXMiLCJzaGlmdCIsImhlYWRlciIsImJvZHlJbml0Iiwib2siLCJwYWRTdGFydCIsIl90eXBlb2YiLCJ3IiwiZCIsInNjcm9sbCIsInNjcm9sbFRvIiwic2Nyb2xsQnkiLCJlbFNjcm9sbCIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsInNob3VsZEJhaWxPdXQiLCJzbW9vdGhTY3JvbGwiLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiYXJnMCIsImJlaGF2aW9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImZpbmRTY3JvbGxhYmxlUGFyZW50IiwicGFyZW50UmVjdHMiLCJjbGllbnRSZWN0cyIsImlzQm9keSIsImhhc1Njcm9sbGFibGVTcGFjZSIsImhhc1Zpc2libGVPdmVyZmxvdyIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwic3RlcCIsImNvbnRleHQiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZWxhcHNlZCIsInN0YXJ0VGltZSIsImNvcyIsIlBJIiwic3RhcnRYIiwic3RhcnRZIiwic2Nyb2xsYWJsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhpZGVQbGFjZWhvbGRlck9uRm9jdXMiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsInVuZm9jdXNPbkFuRWxlbWVudCIsImlucHV0cyIsInByb21pc2VSZXNvbHZlIiwiT3JpZ2luYWxQcm9taXNlIiwicHJvbWlzZUZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0aGVuRmluYWxseSIsImNhdGNoRmluYWxseSIsImNyZWF0ZVRoZW5GaW5hbGx5IiwiY3JlYXRlQ2F0Y2hGaW5hbGx5IiwiZmFjdG9yeSIsImRlZmluZUdldHRlciIsImRlZmluZVNldHRlciIsImxvb2t1cEdldHRlciIsImxvb2t1cFNldHRlciIsInByb3RvdHlwZU9mT2JqZWN0Iiwib3ducyIsImlzRW51bWVyYWJsZSIsInN1cHBvcnRzQWNjZXNzb3JzIiwiX19kZWZpbmVTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsiLCJzZW50aW5lbCIsImV4Y2VwdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25PYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjayIsInByb3BlcnR5Iiwibm90UHJvdG90eXBlT2ZPYmplY3QiLCJjcmVhdGVFbXB0eSIsImVtcHR5IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsInNob3VsZFVzZUFjdGl2ZVgiLCJ4RG9jIiwid3JpdGUiLCJjbG9zZSIsInBhcmVudFdpbmRvdyIsImdldEVtcHR5VmlhQWN0aXZlWCIsImlmcmFtZSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJyZW1vdmVDaGlsZCIsImdldEVtcHR5VmlhSUZyYW1lIiwidG9Mb2NhbGVTdHJpbmciLCJkb2VzRGVmaW5lUHJvcGVydHlXb3JrIiwiZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0IiwiZGVmaW5lUHJvcGVydHlXb3Jrc09uRG9tIiwiZGVmaW5lUHJvcGVydHlGYWxsYmFjayIsImRlZmluZVByb3BlcnRpZXNGYWxsYmFjayIsImhhc0dldHRlciIsImhhc1NldHRlciIsInNlYWwiLCJmcmVlemVPYmplY3QiLCJpc1NlYWxlZCIsImlzRnJvemVuIiwicmV0dXJuVmFsdWUiLCJJc1JlZ0V4cCIsIlRvUHJvcGVydHlEZXNjcmlwdG9yIiwiYXJyYXlMZW5ndGgiLCJyZWdleExhc3RJbmRleCIsIkVsZW1lbnRQcm90byIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwic2VsZWN0b3IiLCJlbGVtZW50cyIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xvc2VzdCIsIiRhcnJheVNsaWNlIiwiYXJndW1lbnRzTGlzdCIsInByb3Blcmx5Qm94ZXNOb25TdHJpY3QiLCJwcm9wZXJseUJveGVzU3RyaWN0IiwidGhyZXdFeGNlcHRpb24iLCJfXyIsImZsYXRNYXAiLCIkZnVuY3Rpb25Ub1N0cmluZyIsIiRzdHJpbmdNYXRjaCIsImNsYXNzUmVnZXgiLCJpc0NsYXNzIiwiYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCIsInNjb3BlIiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInNlYXJjaCIsInRlbCIsImVtYWlsIiwicGFzc3dvcmQiLCJkYXRlIiwibW9udGgiLCJ3ZWVrIiwiZGF0ZXRpbWUiLCJpc1ZhbGlkRm9jdXNUYXJnZXQiLCJhZGRGb2N1c1Zpc2libGVDbGFzcyIsIm9uUG9pbnRlckRvd24iLCJhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMiLCJvbkluaXRpYWxQb2ludGVyTW92ZSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiYWN0aXZlRWxlbWVudCIsInZpc2liaWxpdHlTdGF0ZSIsInRhZ05hbWUiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiTm9kZSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJydW50aW1lIiwiT3AiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsImFyZyIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJLZXlib2FyZEV2ZW50IiwiV2luIiwiU2Nyb2xsIiwiU3BhY2ViYXIiLCJEb3duIiwiTGVmdCIsIlJpZ2h0IiwiVXAiLCJEZWwiLCJBcHBzIiwiRXNjIiwiTXVsdGlwbHkiLCJBZGQiLCJTdWJ0cmFjdCIsIkRlY2ltYWwiLCJEaXZpZGUiLCJJdGVyYXRvckNvbXBsZXRlIiwiSXRlcmF0b3JOZXh0Iiwic3RhcnQiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiZXhpc3RzIiwic2hvdWxkRmxhdHRlbiIsImVsZW1lbnRMZW4iLCJyZWdleHBNYXRjaEFsbFBvbHlmaWxsIiwib3RoZXIiLCJpdGVyUmVzdWx0IiwiYm91bmRNYXBTaGltIiwib3JpZ2luYWxBcnJheSIsIkFycmF5SXRlcmF0b3IiLCJfYXBwbHkiLCJfY2FsbCIsIm5vdCIsInRocm93c0Vycm9yIiwidmFsdWVPckZhbHNlSWZUaHJvd3MiLCJpc0NhbGxhYmxlV2l0aG91dE5ldyIsIl9mb3JFYWNoIiwiX3JlZHVjZSIsInJlZHVjZSIsIl9maWx0ZXIiLCJfc29tZSIsImZvcmNlT3ZlcnJpZGUiLCJfdG9TdHJpbmciLCJWYWx1ZSIsInByb3h5Iiwib3JpZ2luYWxPYmplY3QiLCJ0YXJnZXRPYmplY3QiLCJvcmlnaW5hbERlc2NyaXB0b3IiLCJyZWRlZmluZSIsIm5ld1ZhbHVlIiwiZGVmaW5lQnlEZXNjcmlwdG9yIiwicHJlc2VydmVUb1N0cmluZyIsIlByb3RvdHlwZSIsInN1cHBvcnRzU3ViY2xhc3NpbmciLCJTdWIiLCJTdWJjbGFzcyIsImdldEdsb2JhbCIsImdsb2JhbHMiLCJnbG9iYWxJc0Zpbml0ZSIsIl9pbmRleE9mIiwiX2FycmF5SW5kZXhPZkFwcGx5IiwiX2NvbmNhdCIsIl9zdHJTbGljZSIsIl9wdXNoIiwiX3B1c2hBcHBseSIsIl9zaGlmdCIsIl9tYXgiLCJfbWluIiwiX2Zsb29yIiwiX2FicyIsIl9leHAiLCJleHAiLCJfbG9nIiwibG9nIiwiX3NxcnQiLCJzcXJ0IiwiX2hhc093blByb3BlcnR5IiwiT3JpZ01hcCIsIm9yaWdNYXBEZWxldGUiLCJvcmlnTWFwR2V0Iiwib3JpZ01hcEhhcyIsIm9yaWdNYXBTZXQiLCJzeW1ib2xTcGVjaWVzIiwic3BlY2llcyIsIm51bWJlcklzTmFOIiwibnVtYmVySXNGaW5pdGUiLCJfc2lnbiIsInNpZ24iLCJfbG9nMXAiLCJpc0FyZ3VtZW50cyIsInByaW1pdGl2ZSIsIm92ZXJyaWRlTmF0aXZlIiwicmVwbGFjZW1lbnQiLCIkaXRlcmF0b3IkIiwiZG9tQWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJUeXBlSXNPYmplY3QiLCJUb0ludDMyIiwiYiIsIlNhbWVWYWx1ZVplcm8iLCJJc0l0ZXJhYmxlIiwiaXRGbiIsIml0IiwicCIsImNvbXBsZXRpb25Jc1Rocm93IiwicmV0dXJuTWV0aG9kIiwiaW5uZXJFeGNlcHRpb24iLCJDb25zdHJ1Y3QiLCJuZXdUYXJnZXQiLCJpc0VTNmludGVybmFsIiwiY29uc3RydWN0IiwiQ3JlYXRlSFRNTCIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic3ltYm9sU2VhcmNoIiwib3JpZ2luYWxTZWFyY2giLCJzZWFyY2hTaGltIiwicmVnZXhwIiwic2VhcmNoZXIiLCJzeW1ib2xSZXBsYWNlIiwib3JpZ2luYWxSZXBsYWNlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZVNoaW0iLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VyIiwic3ltYm9sU3BsaXQiLCJvcmlnaW5hbFNwbGl0IiwibGltaXQiLCJzcGxpdFNoaW0iLCJzZXBhcmF0b3IiLCJzcGxpdHRlciIsInN5bWJvbE1hdGNoRXhpc3RzIiwic3RyaW5nTWF0Y2hJZ25vcmVzU3ltYm9sTWF0Y2giLCJzeW1ib2xNYXRjaCIsIm9yaWdpbmFsTWF0Y2giLCJtYXRjaFNoaW0iLCJ3cmFwQ29uc3RydWN0b3IiLCJrZXlzVG9Ta2lwIiwiZGVmYXVsdFNwZWNpZXNHZXR0ZXIiLCJhZGREZWZhdWx0U3BlY2llcyIsImFkZEl0ZXJhdG9yIiwiaW1wbCIsImNyZWF0ZURhdGFQcm9wZXJ0eSIsImNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJlbXVsYXRlRVM2Y29uc3RydWN0IiwiZGVmYXVsdE5ld1RhcmdldCIsImRlZmF1bHRQcm90byIsImZyb21Db2RlUG9pbnQiLCJvcmlnaW5hbEZyb21Db2RlUG9pbnQiLCJjb2RlUG9pbnRzIiwiU3RyaW5nU2hpbXMiLCJmcm9tQ2hhckNvZGUiLCJyYXciLCJjYWxsU2l0ZSIsImNvb2tlZCIsInJhd1N0cmluZyIsImxpdGVyYWxzZWdtZW50cyIsIm5leHRLZXkiLCJuZXh0U2VnIiwibmV4dFN1YiIsInN0cmluZ0VsZW1lbnRzIiwiMCIsIjEiLCJzdHJpbmdSZXBlYXQiLCJyZXBlYXQiLCJ0aW1lcyIsImhhbGYiLCJzdHJpbmdNYXhMZW5ndGgiLCJTdHJpbmdQcm90b3R5cGVTaGltcyIsInRoaXNTdHIiLCJudW1UaW1lcyIsInN0YXJ0c1dpdGgiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsInNlYXJjaFN0ciIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJwb3MiLCJlbmQiLCJjb2RlUG9pbnRBdCIsInN0YXJ0c1dpdGhSZWplY3RzUmVnZXgiLCJzdGFydHNXaXRoSGFuZGxlc0luZmluaXR5Iiwic3RhcnRzV2l0aFN1cHBvcnRzU3ltYm9sTWF0Y2giLCJyZSIsImVuZHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCIsImluY2x1ZGVzU3VwcG9ydHNTeW1ib2xNYXRjaCIsInRyaW1SZWdleHAiLCJ0cmltU2hpbSIsIm5vbldTIiwibm9uV1NyZWdleCIsImlzQmFkSGV4UmVnZXgiLCJoYXNTdHJpbmdUcmltQnVnIiwiaXRlcmF0b3JSZXN1bHQiLCJTdHJpbmdJdGVyYXRvciIsIl9zIiwiX2kiLCJzdWJzdHIiLCJBcnJheVNoaW1zIiwiaXRlbXMiLCJtYXBGbiIsIm1hcHBpbmciLCJuZXh0VmFsdWUiLCJhcnJheUxpa2UiLCJvZiIsImtpbmQiLCJyZXR2YWwiLCJhcnJheU9mU3VwcG9ydHNTdWJjbGFzc2luZyIsIkZvbyIsImZvb0FyciIsIkFycmF5UHJvdG90eXBlU2hpbXMiLCJjb3B5V2l0aGluIiwicmVsYXRpdmVUYXJnZXQiLCJyZWxhdGl2ZVN0YXJ0IiwidG8iLCJyZWxhdGl2ZUVuZCIsImZpbmFsSXRlbSIsImNvdW50IiwiZGlyZWN0aW9uIiwiZmlsbCIsImZpbmQiLCJmaW5kSW5kZXgiLCJ1bnNjb3BhYmxlcyIsIm9yaWdpbmFsQXJyYXlQcm90b3R5cGVWYWx1ZXMiLCJzZWFyY2hFbGVtZW50IiwiYXJyYXlGcm9tU3dhbGxvd3NOZWdhdGl2ZUxlbmd0aHMiLCJhcnJheUZyb21IYW5kbGVzSXRlcmFibGVzIiwiYXJyYXlGcm9tSGFuZGxlc1VuZGVmaW5lZE1hcEZ1bmN0aW9uIiwib3JpZ0FycmF5RnJvbSIsImludDMyc0FzT25lIiwicG93IiwidG9MZW5ndGhzQ29ycmVjdGx5IiwicmV2ZXJzZWQiLCJvcmlnaW5hbEZvckVhY2giLCJjYWxsYmFja0ZuIiwib3JpZ2luYWxNYXAiLCJvcmlnaW5hbEZpbHRlciIsIm9yaWdpbmFsU29tZSIsImV2ZXJ5Iiwib3JpZ2luYWxFdmVyeSIsIm9yaWdpbmFsUmVkdWNlIiwicmVkdWNlUmlnaHQiLCJvcmlnaW5hbFJlZHVjZVJpZ2h0IiwibGFja3NPY3RhbFN1cHBvcnQiLCJsYWNrc0JpbmFyeVN1cHBvcnQiLCJ0cmltc05vbldoaXRlc3BhY2UiLCJPcmlnTnVtYmVyIiwiYmluYXJ5UmVnZXgiLCJvY3RhbFJlZ2V4IiwiaXNCYWRIZXgiLCJOdW1iZXJTaGltIiwicHJpbVZhbHVlIiwicmVjZWl2ZXIiLCJ2YWx1ZU9mU3VjY2VlZHMiLCJNQVhfVkFMVUUiLCJNSU5fVkFMVUUiLCJORUdBVElWRV9JTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4U2FmZUludGVnZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiRVBTSUxPTiIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJGQUtFTlVMTCIsImdwbyIsInNwbyIsImlzRW51bWVyYWJsZU9uIiwiZW5zdXJlRW51bWVyYWJsZSIsInNsaWNlQXJncyIsImluaXRpYWwiLCJkZXNpcmVkQXJnQ291bnQiLCJhc3NpZ25UbyIsImFzc2lnblJlZHVjZXIiLCJzeW1ib2xzIiwic291cmNlS2V5cyIsIk9iamVjdFNoaW1zIiwiYXNzaWduIiwiaXMiLCJhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyIsInRocm93ZXIiLCJFUzVPYmplY3RTaGltcyIsIm1hZ2ljIiwiY2hlY2tBcmdzIiwib2JqZWN0S2V5c0FjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RLZXlzIiwib2JqZWN0S2V5c1JlamVjdHNSZWdleCIsInJlZ2V4UmVqZWN0aW5nT2JqZWN0S2V5cyIsInJlZ2V4S2V5cyIsIm9iamVjdEdPUE5BY2NlcHRzUHJpbWl0aXZlcyIsImNhY2hlZFdpbmRvd05hbWVzIiwib3JpZ2luYWxPYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsIiwib2JqZWN0R09QREFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RTZWFsQWNjZXB0c1ByaW1pdGl2ZXMiLCJvcmlnaW5hbE9iamVjdFNlYWwiLCJvYmplY3RJc1NlYWxlZEFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RJc1NlYWxlZCIsIm9iamVjdEZyZWV6ZUFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RGcmVlemUiLCJvYmplY3RJc0Zyb3plbkFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RJc0Zyb3plbiIsIm9iamVjdFByZXZlbnRFeHRlbnNpb25zQWNjZXB0c1ByaW1pdGl2ZXMiLCJvcmlnaW5hbE9iamVjdFByZXZlbnRFeHRlbnNpb25zIiwib2JqZWN0SXNFeHRlbnNpYmxlQWNjZXB0c1ByaW1pdGl2ZXMiLCJvcmlnaW5hbE9iamVjdElzRXh0ZW5zaWJsZSIsIm9iamVjdEdldFByb3RvQWNjZXB0c1ByaW1pdGl2ZXMiLCJvcmlnaW5hbEdldFByb3RvIiwiaGFzRmxhZ3MiLCJyZWdFeHBGbGFnc0dldHRlciIsInJlZ0V4cFN1cHBvcnRzRmxhZ3NXaXRoUmVnZXgiLCJyZWdFeHBOZWVkc1RvU3VwcG9ydFN5bWJvbE1hdGNoIiwicmVnZXhUb1N0cmluZ0lzR2VuZXJpYyIsInJlZ2V4VG9TdHJpbmdTdXBwb3J0c0dlbmVyaWNGbGFncyIsIm9yaWdSZWdFeHBUb1N0cmluZyIsInNvdXJjZURlc2MiLCJsZWdhY3lTb3VyY2VHZXR0ZXIiLCJzb3VyY2VHZXR0ZXIiLCJSZWdFeHBTaGltIiwicGF0dGVybiIsInBhdHRlcm5Jc1JlZ0V4cCIsIiRpbnB1dCIsInJlZ2V4R2xvYmFscyIsImxhc3RNYXRjaCIsImxhc3RQYXJlbiIsImxlZnRDb250ZXh0IiwicmlnaHRDb250ZXh0IiwiaW52ZXJzZUVwc2lsb24iLCJyb3VuZFRpZXNUb0V2ZW4iLCJCSU5BUllfMzJfRVBTSUxPTiIsIkJJTkFSWV8zMl9NQVhfVkFMVUUiLCJCSU5BUllfMzJfTUlOX1ZBTFVFIiwiRSIsIkxPRzJFIiwiTE9HMTBFIiwibnVtYmVyQ0xaIiwiY2x6IiwiTWF0aFNoaW1zIiwiYWNvc2giLCJ4SW52U3F1YXJlZCIsImhhbGZYIiwiYXNpbmgiLCJhU3F1YXJlZCIsImF0YW5oIiwiY2JydCIsIm5lZ2F0ZSIsImNsejMyIiwiY29zaCIsImV4cG0xIiwic3VtIiwiaHlwb3QiLCJsYXJnZXN0IiwibG9nMiIsImxvZzEwIiwibG9nMXAiLCJzaW5oIiwidSIsInRhbmgiLCJ0cnVuYyIsImltdWwiLCJhbCIsImJsIiwiZnJvdW5kIiwid2l0aGluVUxQRGlzdGFuY2UiLCJleHBlY3RlZCIsImRpc3RhbmNlIiwiZXhwbTFPZlRlbiIsIm9yaWdNYXRoUm91bmQiLCJyb3VuZCIsInJvdW5kSGFuZGxlc0JvdW5kYXJ5Q29uZGl0aW9ucyIsInNtYWxsZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzIiwibGFyZ2VzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyIsInJvdW5kRG9lc05vdEluY3JlYXNlSW50ZWdlcnMiLCJudW0iLCJvcmlnSW11bCIsInRoZW5hYmxlIiwiUHJvbWlzZVNoaW0iLCJJc1Byb21pc2UiLCJwcm9taXNlIiwiX3Byb21pc2UiLCJtYWtlWmVyb1RpbWVvdXQiLCJQcm9taXNlQ2FwYWJpbGl0eSIsImNhcGFiaWxpdHkiLCJwb3N0TWVzc2FnZSIsInRpbWVvdXRzIiwiZGF0YSIsInN0b3BQcm9wYWdhdGlvbiIsInByIiwiUHJvbWlzZSRwcm90b3R5cGUiLCJQcm9taXNlJHByb3RvdHlwZSR0aGVuIiwiZW5xdWV1ZSIsInNldEltbWVkaWF0ZSIsInRhc2siLCJQUk9NSVNFX0lERU5USVRZIiwiUFJPTUlTRV9USFJPV0VSIiwiUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkiLCJlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iIiwiaGFuZGxlciIsInByb21pc2VSZWFjdGlvbkpvYiIsInByb21pc2VDYXBhYmlsaXR5IiwiaGFuZGxlclJlc3VsdCIsImZ1bGZpbGxQcm9taXNlIiwicmVhY3Rpb25MZW5ndGgiLCJmdWxmaWxsUmVhY3Rpb25IYW5kbGVyMCIsInJlYWN0aW9uQ2FwYWJpbGl0eTAiLCJyZWplY3RSZWFjdGlvbnMwIiwiaWR4IiwicmVqZWN0UHJvbWlzZSIsInJlamVjdFJlYWN0aW9uSGFuZGxlcjAiLCJjcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMiLCJhbHJlYWR5UmVzb2x2ZWQiLCJyZXNvbHV0aW9uIiwicHJvbWlzZVJlc29sdmVUaGVuYWJsZUpvYiIsIm9wdGltaXplZFRoZW4iLCJyZXNvbHZpbmdGdW5jdGlvbnMiLCJyZXNvbHZlciIsIl9wcm9taXNlQWxsUmVzb2x2ZXIiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmVzdWx0Q2FwYWJpbGl0eSIsIm5leHRQcm9taXNlIiwicmVzb2x2ZUVsZW1lbnQiLCJwZXJmb3JtUHJvbWlzZUFsbCIsImVlIiwicmFjZSIsInBlcmZvcm1Qcm9taXNlUmFjZSIsInJlamVjdEZ1bmMiLCJyZXNvbHZlRnVuYyIsIm9uUmVqZWN0ZWQiLCJvbkZ1bGZpbGxlZCIsInJldHVyblZhbHVlSXNJZ25vcmVkIiwiZnVsZmlsbFJlYWN0aW9uSGFuZGxlciIsInJlamVjdFJlYWN0aW9uSGFuZGxlciIsImFjY2VwdCIsImRlZmVyIiwiY2hhaW4iLCJwcm9taXNlU3VwcG9ydHNTdWJjbGFzc2luZyIsInByb21pc2VJZ25vcmVzTm9uRnVuY3Rpb25UaGVuQ2FsbGJhY2tzIiwicHJvbWlzZVJlcXVpcmVzT2JqZWN0Q29udGV4dCIsInByb21pc2VSZXNvbHZlQnJva2VuIiwicDIiLCJnZXRzVGhlblN5bmNocm9ub3VzbHkiLCJCYWRSZXNvbHZlclByb21pc2UiLCJleGVjdXRvciIsImhhc0JhZFJlc29sdmVyUHJvbWlzZSIsIm9yaWdBbGwiLCJvcmlnUmFjZSIsIm9yaWdSZXNvbHZlIiwib3JpZ1JlamVjdCIsInIiLCJ0ZXN0T3JkZXIiLCJwcmVzZXJ2ZXNJbnNlcnRpb25PcmRlciIsInByZXNlcnZlc051bWVyaWNJbnNlcnRpb25PcmRlciIsImZhc3RrZXkiLCJza2lwSW5zZXJ0aW9uT3JkZXJDaGVjayIsImVtcHR5T2JqZWN0IiwiYWRkSXRlcmFibGVUb01hcCIsIk1hcENvbnN0cnVjdG9yIiwiYWRkSXRlcmFibGVUb1NldCIsIlNldENvbnN0cnVjdG9yIiwiY29sbGVjdGlvblNoaW1zIiwiTWFwRW50cnkiLCJpc1JlbW92ZWQiLCJNYXAkcHJvdG90eXBlIiwicmVxdWlyZU1hcFNsb3QiLCJfZXM2bWFwIiwiTWFwSXRlcmF0b3IiLCJfaGVhZCIsImlzTWFwSXRlcmF0b3IiLCJNYXBTaGltIiwiX21hcCIsIl9zaXplIiwiX3N0b3JhZ2UiLCJma2V5IiwiY2xlYXIiLCJTZXQkcHJvdG90eXBlIiwicmVxdWlyZVNldFNsb3QiLCJfZXM2c2V0IiwiU2V0U2hpbSIsImVuc3VyZU1hcCIsImRlY29kZUtleSIsImhhc0ZLZXkiLCJTZXRJdGVyYXRvciIsImVudGlyZVNldCIsImlzU2V0SXRlcmF0b3IiLCJpc0dvb2dsZVRyYW5zbGF0ZSIsIm1hcEFjY2VwdHNBcmd1bWVudHMiLCJ0ZXN0TWFwIiwibWFwVXNlc1NhbWVWYWx1ZVplcm8iLCJtYXBTdXBwb3J0c0NoYWluaW5nIiwidGVzdFNldCIsInNldFVzZXNTYW1lVmFsdWVaZXJvIiwic2V0U3VwcG9ydHNDaGFpbmluZyIsIm9yaWdTZXRBZGQiLCJvcmlnU2V0SGFzIiwib3JpZ1NldERlbCIsIm1hcFN1cHBvcnRzU3ViY2xhc3NpbmciLCJNIiwibWFwRmFpbHNUb1N1cHBvcnRTdWJjbGFzc2luZyIsIm1hcFJlcXVpcmVzTmV3Iiwic2V0U3VwcG9ydHNTdWJjbGFzc2luZyIsInNldEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmciLCJzZXRSZXF1aXJlc05ldyIsIk9yaWdTZXQiLCJuZXdNYXAiLCJtYXBJdGVyYXRpb25UaHJvd3NTdG9wSXRlcmF0b3IiLCJhbm9ueW1vdXNTZXRIYXMiLCJ0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0IiwiUmVmbGVjdFNoaW1zIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwiY2FsbEFuZENhdGNoRXhjZXB0aW9uIiwiaW50ZXJuYWxHZXQiLCJpbnRlcm5hbFNldCIsIm9iamVjdERvdEdldFByb3RvdHlwZU9mIiwid2lsbENyZWF0ZUNpcmN1bGFyUHJvdG90eXBlIiwibGFzdFByb3RvIiwiZGVmaW5lT3JPdmVycmlkZVJlZmxlY3RQcm9wZXJ0eSIsIm9yaWdpbmFsUmVmbGVjdEdldFByb3RvIiwiYmFzaWMiLCJkYXRlVG9TdHJpbmciLCJzaGltbWVkRGF0ZVRvU3RyaW5nIiwic3RyaW5nSFRNTHNoaW1zIiwiYW5jaG9yIiwiYmlnIiwiYmxpbmsiLCJib2xkIiwiZml4ZWQiLCJmb250Y29sb3IiLCJjb2xvciIsImZvbnRzaXplIiwiaXRhbGljcyIsImxpbmsiLCJzbWFsbCIsInN0cmlrZSIsInN1YiIsInN1cCIsInNob3VsZE92ZXJ3cml0ZSIsIm91dHB1dCIsInF1b3Rlc0NvdW50IiwiSlNPTnN0cmluZ2lmaWVzU3ltYm9scyIsInN0cmluZ2lmeSIsIkpTT05zdHJpbmdpZnlBY2NlcHRzT2JqZWN0U3ltYm9sIiwib3JpZ1N0cmluZ2lmeSIsInJlcGxhY2VGbiIsIndyYXBwZWRSZXBsYWNlciIsInBhcnNlZFZhbHVlIiwiJGdldE93bk5hbWVzIiwiJGdldFN5bWJvbHMiLCIkY29uY2F0IiwiJHJlZHVjZSIsImlzRVM1IiwiYWNjIiwidmFscyIsIm9yaWdpbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsIiRhcnJheVB1c2giLCJnZXRBcnJheUl0ZXJhdG9yIiwiYXJyYXlsaWtlIiwiZ2V0Tm9uQ29sbGVjdGlvbkl0ZXJhdG9yIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiJG1hcEZvckVhY2giLCIkc2V0Rm9yRWFjaCIsIiRtYXBJdGVyYXRvciIsIiRzZXRJdGVyYXRvciIsImdldFN0b3BJdGVyYXRpb25JdGVyYXRvciIsIiRtYXBBdEF0SXRlcmF0b3IiLCIkc2V0QXRBdEl0ZXJhdG9yIiwiZ2V0Q29sbGVjdGlvbkl0ZXJhdG9yIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCJJbnZva2UiLCJpc1N1cHBvcnRlZCIsImNiIiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCIkY2hhckF0IiwiZnJvbUluZGV4IiwiZ2V0TWF0Y2hlciIsIm1hdGNoZXJQb2x5ZmlsbCIsInJ4IiwidmVuZG9ycyIsInN1ZmZpeCIsInJhZiIsImNhZiIsImxhc3QiLCJfbm93IiwiY3AiLCJjYW5jZWxsZWQiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImFsbG93ZWQiLCJpc0RhdGEiLCJJc0FjY2Vzc29yIiwicmVjb3JkVHlwZSIsImFyZ3VtZW50TmFtZSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYWN0dWFsTWV0aG9kIiwiaXNSZWdleCIsIkFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJTdHJpbmdQcm90b3R5cGUiLCJOdW1iZXJQcm90b3R5cGUiLCJhcnJheV9zbGljZSIsImFycmF5X3NwbGljZSIsImFycmF5X3B1c2giLCJhcnJheV91bnNoaWZ0IiwidW5zaGlmdCIsImFycmF5X2NvbmNhdCIsImFycmF5X2pvaW4iLCJ0b19zdHJpbmciLCJzcGFjZVN0cmlwcGVkIiwiZm5DbGFzcyIsImdlbkNsYXNzIiwidHJ5UmVnZXhFeGVjIiwicmVnZXhDbGFzcyIsInN0cmluZ0NsYXNzIiwiZm9yY2VBc3NpZ24iLCJpc0FjdHVhbE5hTiIsImFycmF5U2xpY2UiLCJhcnJheVNsaWNlQXBwbHkiLCJvcmlnQXJyYXlTbGljZSIsIm9yaWdBcnJheVNsaWNlQXBwbHkiLCJzdHJTbGljZSIsInN0ckluZGV4T2YiLCJwdXNoQ2FsbCIsImlzRW51bSIsImFycmF5U29ydCIsImhhc1Vuc2hpZnRSZXR1cm5WYWx1ZUJ1ZyIsInByb3Blcmx5Qm94ZXNDb250ZXh0IiwicmVkdWNlQ29lcmNlc1RvT2JqZWN0IiwiX19fIiwicmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QiLCJoYXNGaXJlZm94MkluZGV4T2ZCdWciLCJoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnIiwibGFzdEluZGV4T2YiLCJzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkiLCJkZWxldGVDb3VudCIsInNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0Iiwic3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMiLCJzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyIsImFjdHVhbFN0YXJ0IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJpdGVtQ291bnQiLCJtYXhLIiwibWluSyIsImhhc1N0cmluZ0pvaW5CdWciLCJvcmlnaW5hbEpvaW4iLCJzZXAiLCJoYXNKb2luVW5kZWZpbmVkQnVnIiwicHVzaFNoaW0iLCJwdXNoSXNOb3RHZW5lcmljIiwicHVzaFVuZGVmaW5lZElzV2VpcmQiLCJzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyIsImUyIiwic29ydFRocm93c09uUmVnZXgiLCJzb3J0SWdub3Jlc1VuZGVmaW5lZCIsImNvbXBhcmVGbiIsImhhc1N0cmluZ0VudW1CdWciLCIkd2lkdGgiLCIkaGVpZ2h0IiwiJHRvcCIsIiRsb2NhbFN0b3JhZ2UiLCJkb250RW51bXNMZW5ndGgiLCJpc0ZuIiwiaXNTdHIiLCJkb250RW51bSIsImtleXNXb3Jrc1dpdGhBcmd1bWVudHMiLCJrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnIiwiYXJnS2V5cyIsImhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZyIsImhhc1RvU3RyaW5nRm9ybWF0QnVnIiwiaGFzTmVnYXRpdmVNb250aFllYXJCdWciLCJnZXRVVENNb250aCIsImFOZWdhdGl2ZVRlc3REYXRlIiwiYVBvc2l0aXZlVGVzdERhdGUiLCJoYXNUb1VUQ1N0cmluZ0Zvcm1hdEJ1ZyIsInRvVVRDU3RyaW5nIiwidGltZVpvbmVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsInRvRGF0ZVN0cmluZyIsIm9yaWdpbmFsR2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsIm9yaWdpbmFsR2V0TW9udGgiLCJnZXRNb250aCIsIm9yaWdpbmFsR2V0RGF0ZSIsImdldERhdGUiLCJvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJvcmlnaW5hbEdldFVUQ01vbnRoIiwib3JpZ2luYWxHZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsIm9yaWdpbmFsR2V0VVRDRGF5IiwiZ2V0VVRDRGF5Iiwib3JpZ2luYWxHZXRVVENIb3VycyIsImdldFVUQ0hvdXJzIiwib3JpZ2luYWxHZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsIm9yaWdpbmFsR2V0VVRDU2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImRheU5hbWUiLCJtb250aE5hbWUiLCJkYXlzSW5Nb250aCIsInllYXIiLCJkYXkiLCJob3VyIiwibWludXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsInRpbWV6b25lT2Zmc2V0IiwiaG91cnNPZmZzZXQiLCJtaW51dGVzT2Zmc2V0IiwibmVnYXRpdmVEYXRlIiwibmVnYXRpdmVZZWFyU3RyaW5nIiwiaGFzTmVnYXRpdmVEYXRlQnVnIiwidG9JU09TdHJpbmciLCJoYXNTYWZhcmk1MURhdGVCdWciLCJkYXRlVG9KU09OSXNTdXBwb3J0ZWQiLCJ0b0pTT04iLCJ0diIsInRvSVNPIiwic3VwcG9ydHNFeHRlbmRlZFllYXJzIiwiYWNjZXB0c0ludmFsaWREYXRlcyIsImRvZXNOb3RQYXJzZVkyS05ld1llYXIiLCJtYXhTYWZlVW5zaWduZWQzMkJpdCIsImhhc1NhZmFyaVNpZ25lZEludEJ1ZyIsIk5hdGl2ZURhdGUiLCJEYXRlU2hpbSIsIlkiLCJEIiwiaCIsIm1zIiwic2Vjb25kcyIsIm1pbGxpcyIsIm1zVG9TaGlmdCIsInNUb1NoaWZ0IiwiaXNvRGF0ZUV4cHJlc3Npb24iLCJtb250aHMiLCJkYXlGcm9tTW9udGgiLCJ0b1VUQyIsIlVUQyIsIm1pbGxpc2Vjb25kIiwiaXNMb2NhbFRpbWUiLCJzaWduT2Zmc2V0IiwiaG91ck9mZnNldCIsIm1pbnV0ZU9mZnNldCIsImhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyIsImhhc1RvRml4ZWRCdWdzIiwidG9GaXhlZEhlbHBlcnMiLCJiYXNlIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwieDIiLCJ0b0ZpeGVkU2hpbSIsImZyYWN0aW9uRGlnaXRzIiwieiIsImhhc1RvUHJlY2lzaW9uVW5kZWZpbmVkQnVnIiwidG9QcmVjaXNpb24iLCJvcmlnaW5hbFRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiY29tcGxpYW50RXhlY05wY2ciLCJtYXhTYWZlMzJCaXRJbnQiLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXRMaW1pdCIsInN0cl9yZXBsYWNlIiwicmVwbGFjZVJlcG9ydHNHcm91cHNDb3JyZWN0bHkiLCJncm91cHMiLCJncm91cCIsImhhc0NhcHR1cmluZ0dyb3VwcyIsIm9yaWdpbmFsTGFzdEluZGV4Iiwic3RyaW5nX3N1YnN0ciIsImhhc05lZ2F0aXZlU3Vic3RyQnVnIiwibm9ybWFsaXplZFN0YXJ0IiwiemVyb1dpZHRoIiwid3NSZWdleENoYXJzIiwidHJpbUJlZ2luUmVnZXhwIiwidHJpbUVuZFJlZ2V4cCIsImhhc1RyaW1XaGl0ZXNwYWNlQnVnIiwiaGFzTGFzdEluZGV4QnVnIiwibnVtUG9zIiwic2VhcmNoTGVuIiwib3JpZ2luYWxMYXN0SW5kZXhPZiIsIm9yaWdQYXJzZUludCIsImhleFJlZ2V4IiwicmFkaXgiLCJkZWZhdWx0ZWRSYWRpeCIsIm9yaWdQYXJzZUZsb2F0IiwiaW5wdXRTdHJpbmciLCJlcnJvclRvU3RyaW5nU2hpbSIsIm1zZyIsImVuc3VyZU5vbkVudW1lcmFibGUiLCJyZWdleFRvU3RyaW5nIiwiZyIsImRlcHRoTnVtIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJlbXB0eVN5bWJvbERlc2MiXSwibWFwcGluZ3MiOiJxR0FFQSxJQUFJQSxFQUFxQixFQUFRLFFBQzdCQyxFQUFPLEVBQVEsUUFDZkMsRUFBNEIsRUFBUSxRQUNwQ0MsRUFBTSxFQUFRLFFBQ2RDLEVBQWMsRUFBUSxRQUN0QkMsRUFBYSxFQUFRLFFBQ3JCQyxFQUFXLEVBQVEsUUFDbkJDLEVBQVcsRUFBUSxRQUNuQkMsRUFBVyxFQUFRLFFBQ25CQyxFQUFZLEVBQVEsUUFDcEJDLEVBQVcsRUFBUSxRQUduQkMsRUFBY0MsT0FBTyxLQUNyQkMsRUFBaUMsTUFBbkJG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QVEsUUFDekI0QixFQUFPekQsT0FBTzBELHlCQUVsQnZELEVBQU9DLFFBQVUsV0FDaEIsSUFBS2dOLEdBQThCLG1CQUFUM0osRUFDekIsT0FBTyxLQUdSLElBQUlFLEVBQU9GLEVBQUtrQixPQUFPaEQsVUFBVyxlQUNsQyxJQUFLZ0MsR0FBNEIsbUJBQWJBLEVBQUttSCxJQUN4QixPQUFPakosRUFHUixJQUFJeTJELEVBQWtCMzBELEVBQUttSCxJQUFJeEcsS0FBS0ssVUFFcEMsWUFEZ0QsSUFBcEIyekQsR0FBdUQsS0FBcEJBLElBQ1QsTUFBL0IzMEQsRUFBS21ILElBQUl4RyxLQUFLSyxPQUFPLE1BR3JDaEIsRUFBS21ILElBRkpqSiIsImZpbGUiOiJ2ZW5kb3JzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQXJyYXlTcGVjaWVzQ3JlYXRlJyk7XG52YXIgQ2FsbCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQ2FsbCcpO1xudmFyIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIEhhc1Byb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9IYXNQcm9wZXJ0eScpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUnKTtcbnZhciBUb1VpbnQzMiA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9VaW50MzInKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnaXMtc3RyaW5nJyk7XG5cbi8vIENoZWNrIGZhaWx1cmUgb2YgYnktaW5kZXggYWNjZXNzIG9mIHN0cmluZyBjaGFyYWN0ZXJzIChJRSA8IDkpIGFuZCBmYWlsdXJlIG9mIGAwIGluIGJveGVkU3RyaW5nYCAoUmhpbm8pXG52YXIgYm94ZWRTdHJpbmcgPSBPYmplY3QoJ2EnKTtcbnZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxudmFyIHN0clNwbGl0ID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNwbGl0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4pIHtcblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyhPKSA/IHN0clNwbGl0KE8sICcnKSA6IE87XG5cdHZhciBsZW4gPSBUb1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cblx0Ly8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cblx0aWYgKCFJc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLm1hcCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0fVxuXG5cdHZhciBUO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRUID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgbGVuKTtcblx0dmFyIGsgPSAwO1xuXHR3aGlsZSAoayA8IGxlbikge1xuXHRcdHZhciBQayA9IFRvU3RyaW5nKGspO1xuXHRcdHZhciBrUHJlc2VudCA9IEhhc1Byb3BlcnR5KE8sIFBrKTtcblx0XHRpZiAoa1ByZXNlbnQpIHtcblx0XHRcdHZhciBrVmFsdWUgPSBHZXQoTywgUGspO1xuXHRcdFx0dmFyIG1hcHBlZFZhbHVlID0gQ2FsbChjYWxsYmFja2ZuLCBULCBba1ZhbHVlLCBrLCBPXSk7XG5cdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KEEsIFBrLCBtYXBwZWRWYWx1ZSk7XG5cdFx0fVxuXHRcdGsgKz0gMTtcblx0fVxuXG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQWxsU2V0dGxlZCgpIHtcblx0cmVxdWlyZVByb21pc2UoKTtcblxuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoUHJvbWlzZSwgeyBhbGxTZXR0bGVkOiBwb2x5ZmlsbCB9LCB7XG5cdFx0YWxsU2V0dGxlZDogZnVuY3Rpb24gdGVzdEFsbFNldHRsZWQoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGxTZXR0bGVkICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltUGFkRW5kKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgeyBwYWRFbmQ6IHBvbHlmaWxsIH0sIHtcblx0XHRwYWRFbmQ6IGZ1bmN0aW9uIHRlc3RQYWRFbmQoKSB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5wYWRFbmQgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5lbnRyaWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXIgQ29uc3RydWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Db25zdHJ1Y3QnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIFNldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvU2V0Jyk7XG52YXIgU3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9TcGVjaWVzQ29uc3RydWN0b3InKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG52YXIgZmxhZ3NHZXR0ZXIgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG5cbnZhciBSZWdFeHBTdHJpbmdJdGVyYXRvciA9IHJlcXVpcmUoJy4vaGVscGVycy9SZWdFeHBTdHJpbmdJdGVyYXRvcicpO1xudmFyIE9yaWdSZWdFeHAgPSBSZWdFeHA7XG5cbnZhciBDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIENyZWF0ZVJlZ0V4cFN0cmluZ0l0ZXJhdG9yKFIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpIHtcblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJTXCIgdmFsdWUgbXVzdCBiZSBhIFN0cmluZycpO1xuXHR9XG5cdGlmIChUeXBlKGdsb2JhbCkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZ2xvYmFsXCIgdmFsdWUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoVHlwZShmdWxsVW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZnVsbFVuaWNvZGVcIiB2YWx1ZSBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIGl0ZXJhdG9yID0gbmV3IFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKFIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xuXHRyZXR1cm4gaXRlcmF0b3I7XG59O1xuXG52YXIgc3VwcG9ydHNDb25zdHJ1Y3RpbmdXaXRoRmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciBjb25zdHJ1Y3RSZWdleFdpdGhGbGFncyA9IGZ1bmN0aW9uIGNvbnN0cnVjdFJlZ2V4KEMsIFIpIHtcblx0dmFyIG1hdGNoZXI7XG5cdC8vIHdvcmthcm91bmQgZm9yIG9sZGVyIGVuZ2luZXMgdGhhdCBsYWNrIFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3Ncblx0dmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSID8gR2V0KFIsICdmbGFncycpIDogVG9TdHJpbmcoZmxhZ3NHZXR0ZXIoUikpO1xuXHRpZiAoc3VwcG9ydHNDb25zdHJ1Y3RpbmdXaXRoRmxhZ3MgJiYgdHlwZW9mIGZsYWdzID09PSAnc3RyaW5nJykge1xuXHRcdG1hdGNoZXIgPSBuZXcgQyhSLCBmbGFncyk7XG5cdH0gZWxzZSBpZiAoQyA9PT0gT3JpZ1JlZ0V4cCkge1xuXHRcdC8vIHdvcmthcm91bmQgZm9yIG9sZGVyIGVuZ2luZXMgdGhhdCBjYW4gbm90IGNvbnN0cnVjdCBhIFJlZ0V4cCB3aXRoIGZsYWdzXG5cdFx0bWF0Y2hlciA9IG5ldyBDKFIuc291cmNlLCBmbGFncyk7XG5cdH0gZWxzZSB7XG5cdFx0bWF0Y2hlciA9IG5ldyBDKFIsIGZsYWdzKTtcblx0fVxuXHRyZXR1cm4geyBmbGFnczogZmxhZ3MsIG1hdGNoZXI6IG1hdGNoZXIgfTtcbn07XG5cbnZhciByZWdleE1hdGNoQWxsID0gZnVuY3Rpb24gU3ltYm9sTWF0Y2hBbGwoc3RyaW5nKSB7XG5cdHZhciBSID0gdGhpcztcblx0aWYgKFR5cGUoUikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgdmFsdWUgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHR2YXIgUyA9IFRvU3RyaW5nKHN0cmluZyk7XG5cdHZhciBDID0gU3BlY2llc0NvbnN0cnVjdG9yKFIsIE9yaWdSZWdFeHApO1xuXG5cdHZhciB0bXAgPSBjb25zdHJ1Y3RSZWdleFdpdGhGbGFncyhDLCBSKTtcblx0Ly8gdmFyIGZsYWdzID0gVG9TdHJpbmcoR2V0KFIsICdmbGFncycpKTtcblx0dmFyIGZsYWdzID0gdG1wLmZsYWdzO1xuXHQvLyB2YXIgbWF0Y2hlciA9IENvbnN0cnVjdChDLCBbUiwgZmxhZ3NdKTtcblx0dmFyIG1hdGNoZXIgPSB0bXAubWF0Y2hlcjtcblxuXHR2YXIgbGFzdEluZGV4ID0gVG9MZW5ndGgoR2V0KFIsICdsYXN0SW5kZXgnKSk7XG5cdFNldChtYXRjaGVyLCAnbGFzdEluZGV4JywgbGFzdEluZGV4LCB0cnVlKTtcblx0dmFyIGdsb2JhbCA9IGZsYWdzLmluZGV4T2YoJ2cnKSA+IC0xO1xuXHR2YXIgZnVsbFVuaWNvZGUgPSBmbGFncy5pbmRleE9mKCd1JykgPiAtMTtcblx0cmV0dXJuIENyZWF0ZVJlZ0V4cFN0cmluZ0l0ZXJhdG9yKG1hdGNoZXIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xufTtcblxudmFyIGRlZmluZVAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmlmIChkZWZpbmVQICYmIGdPUEQpIHtcblx0dmFyIGRlc2MgPSBnT1BEKHJlZ2V4TWF0Y2hBbGwsICduYW1lJyk7XG5cdGlmIChkZXNjICYmIGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0ZGVmaW5lUChyZWdleE1hdGNoQWxsLCAnbmFtZScsIHsgdmFsdWU6ICdbU3ltYm9sLm1hdGNoQWxsXScgfSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWdleE1hdGNoQWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE1hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZSA/IE1hcCA6IG51bGw7XG52YXIgJFNldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZSA/IFNldCA6IG51bGw7XG5cbnZhciBleHBvcnRlZDtcblxuaWYgKCEkTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXHRleHBvcnRlZCA9IGZ1bmN0aW9uIGlzTWFwKHgpIHtcblx0XHQvLyBgTWFwYCBpcyBub3QgcHJlc2VudCBpbiB0aGlzIGVudmlyb25tZW50LlxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxudmFyICRtYXBIYXMgPSAkTWFwID8gTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyICRzZXRIYXMgPSAkU2V0ID8gU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xuaWYgKCFleHBvcnRlZCAmJiAhJG1hcEhhcykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc01hcCh4KSB7XG5cdFx0Ly8gYE1hcGAgZG9lcyBub3QgaGF2ZSBhIGBoYXNgIG1ldGhvZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZCB8fCBmdW5jdGlvbiBpc01hcCh4KSB7XG5cdGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHQkbWFwSGFzLmNhbGwoeCk7XG5cdFx0aWYgKCRzZXRIYXMpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdCRzZXRIYXMuY2FsbCh4KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB4IGluc3RhbmNlb2YgJE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIHN5bVRvU3RyID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIHN5bVN0cmluZ1JlZ2V4ID0gL15TeW1ib2xcXCguKlxcKSQvO1xuXHR2YXIgaXNTeW1ib2xPYmplY3QgPSBmdW5jdGlvbiBpc1JlYWxTeW1ib2xPYmplY3QodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHN5bVN0cmluZ1JlZ2V4LnRlc3Qoc3ltVG9TdHIuY2FsbCh2YWx1ZSkpO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuXHRcdC8vIHRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2xzLlxuXHRcdHJldHVybiBmYWxzZSAmJiB2YWx1ZTtcblx0fTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUVudHJpZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgZnJvbUVudHJpZXM6IHBvbHlmaWxsIH0sIHtcblx0XHRmcm9tRW50cmllczogZnVuY3Rpb24gdGVzdEVudHJpZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBPYmplY3QudmFsdWVzL09iamVjdC5lbnRyaWVzIGFyZSBzdGFnZSA0LCBpbiBFUzIwMTdcbnJlcXVpcmUoJ29iamVjdC52YWx1ZXMvc2hpbScpKCk7XG5yZXF1aXJlKCdvYmplY3QuZW50cmllcy9zaGltJykoKTtcblxuLy8gU3RyaW5nI3BhZFN0YXJ0L1N0cmluZyNwYWRFbmQgYXJlIHN0YWdlIDQsIGluIEVTMjAxN1xucmVxdWlyZSgnc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydC9zaGltJykoKTtcbnJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUucGFkZW5kL3NoaW0nKSgpO1xuXG4vLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyBpcyBzdGFnZSA0LCBpbiBFUzIwMTdcbnJlcXVpcmUoJ29iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzL3NoaW0nKSgpO1xuXG5yZXF1aXJlKCcuL2VzMjAxOCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IDAgKi9cblxuLy8gRml4ZXMgc3VwZXItY29uc3RydWN0b3IgY2FsbHMgaW4gSUU5LzEwXG5yZXF1aXJlKCdpbWEtYmFiZWw2LXBvbHlmaWxsJyk7XG5cbi8vIGRvY3VtZW50LmNvbnRhaW5zIHBvbHlmaWxsXG5yZXF1aXJlKCcuL2RvY3VtZW50LWNvbnRhaW5zJyk7XG5cbi8vIGNvbnNvbGUuKiBwb2x5ZmlsbCBmb3Igb2xkIGJyb3dzZXJzXG5yZXF1aXJlKCdjb25zb2xlLXBvbHlmaWxsJyk7XG5cbnJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gRWxlbWVudC5jbGFzc0xpc3QgcG9seWZpbGxcbiAgcmVxdWlyZSgnY2xhc3NsaXN0LXBvbHlmaWxsJyk7XG5cbiAgLy8gRWxlbWVudC5jbG9zZXN0IHBvbHlmaWxsXG4gIHJlcXVpcmUoJ2VsZW1lbnQtY2xvc2VzdCcpO1xuXG4gIC8vIFBvbHlmaWxsIGZvciBzbW9vdGggc2Nyb2xsaW5nIGJlaGF2aW9yXG4gIHJlcXVpcmUoJ3Ntb290aHNjcm9sbC1wb2x5ZmlsbCcpLnBvbHlmaWxsKCk7XG5cbiAgLy8gUG9seWZpbGwgd2luZG93Lm1hdGNoTWVkaWEgKHByaW1hcmlseSBmb3IgSUU5KVxuICByZXF1aXJlKCdtYXRjaG1lZGlhLXBvbHlmaWxsJyk7XG4gIHJlcXVpcmUoJ21hdGNobWVkaWEtcG9seWZpbGwvbWF0Y2hNZWRpYS5hZGRMaXN0ZW5lcicpO1xuXG4gIC8vIFBvbHlmaWxsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKGZvciBJRSA8IDExKVxuICByZXF1aXJlKCd3aW5kb3ctbG9jYXRpb24tb3JpZ2luJyk7XG5cbiAgLy8gZm9yIDw9IElFIDksIE9wZXJhIG1pbmlcbiAgcmVxdWlyZSgnaW5wdXQtcGxhY2Vob2xkZXItcG9seWZpbGwnKTtcblxuICByZXF1aXJlKCdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInKTtcblxuICAvLyBLZXlib2FyZEV2ZW50LmtleSBzaGltXG4gIHJlcXVpcmUoJ3NoaW0ta2V5Ym9hcmQtZXZlbnQta2V5Jyk7XG59XG5cbi8vIDpmb2N1cy12aXNpYmxlIHNoaW1cbnJlcXVpcmUoJ2ZvY3VzLXZpc2libGUnKTtcblxucmVxdWlyZSgncmFmL3BvbHlmaWxsJyk7XG5cbmdsb2JhbC5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWlyZSgncmljLXNoaW0nKTtcblxuZ2xvYmFsLmNhbmNlbElkbGVDYWxsYmFjayA9IGdsb2JhbC5yZXF1ZXN0SWRsZUNhbGxiYWNrLmNhbmNlbElkbGVDYWxsYmFjaztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcblxuLyogZ2xvYmFscyBUb3VjaExpc3QgKi9cbmlmIChoYXNTeW1ib2xzICYmIHR5cGVvZiBUb3VjaExpc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFRvdWNoTGlzdC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSAhPT0gJ2Z1bmN0aW9uJykge1xuICBUb3VjaExpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE1hdGggPSBHZXRJbnRyaW5zaWMoJyVNYXRoJScpO1xuXG52YXIgVG9OdW1iZXIgPSByZXF1aXJlKCcuL1RvTnVtYmVyJyk7XG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcbnZhciAkc2lnbiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc2lnbicpO1xuXG52YXIgJGZsb29yID0gJE1hdGguZmxvb3I7XG52YXIgJGFicyA9ICRNYXRoLmFicztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuNFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRpZiAoJGlzTmFOKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0aWYgKG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRyZXR1cm4gJHNpZ24obnVtYmVyKSAqICRmbG9vcigkYWJzKG51bWJlcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyICRSZWdFeHAgPSBHZXRJbnRyaW5zaWMoJyVSZWdFeHAlJyk7XG52YXIgJHBhcnNlSW50ZWdlciA9IEdldEludHJpbnNpYygnJXBhcnNlSW50JScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVnZXhUZXN0ZXInKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRzdHJTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGlzQmluYXJ5ID0gcmVnZXhUZXN0ZXIoL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gcmVnZXhUZXN0ZXIoL14wb1swLTddKyQvaSk7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IHJlZ2V4VGVzdGVyKC9eWy0rXTB4WzAtOWEtZl0rJC9pKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSByZWdleFRlc3Rlcihub25XU3JlZ2V4KTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciAkcmVwbGFjZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlJyk7XG52YXIgJHRyaW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuICRyZXBsYWNlKHZhbHVlLCB0cmltUmVnZXgsICcnKTtcbn07XG5cbnZhciBUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vVG9QcmltaXRpdmUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdHZhciB2YWx1ZSA9IGlzUHJpbWl0aXZlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogVG9QcmltaXRpdmUoYXJndW1lbnQsICROdW1iZXIpO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0aWYgKGlzQmluYXJ5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgMikpO1xuXHRcdH0gZWxzZSBpZiAoaXNPY3RhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDgpKTtcblx0XHR9IGVsc2UgaWYgKGhhc05vbldTKHZhbHVlKSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIE5hTjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHRyaW1tZWQgPSAkdHJpbSh2YWx1ZSk7XG5cdFx0XHRpZiAodHJpbW1lZCAhPT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIFRvTnVtYmVyKHRyaW1tZWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gJE51bWJlcih2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbnZhciB0b1N0ciA9ICEkQXJyYXkuaXNBcnJheSAmJiByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNhcnJheVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0cmV0dXJuIHRvU3RyKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2V0LW8tcC12LXRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU2V0KE8sIFAsIFYsIFRocm93KSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgT2AgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFBgIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoVHlwZShUaHJvdykgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgVGhyb3dgIG11c3QgYmUgYSBCb29sZWFuJyk7XG5cdH1cblx0aWYgKFRocm93KSB7XG5cdFx0T1tQXSA9IFY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHR0cnkge1xuXHRcdFx0T1tQXSA9IFY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkTWF0aCA9IEdldEludHJpbnNpYygnJU1hdGglJyk7XG5cbnZhciAkZmxvb3IgPSAkTWF0aC5mbG9vcjtcbnZhciAkYWJzID0gJE1hdGguYWJzO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0ludGVnZXIoYXJndW1lbnQpIHtcblx0aWYgKHR5cGVvZiBhcmd1bWVudCAhPT0gJ251bWJlcicgfHwgJGlzTmFOKGFyZ3VtZW50KSB8fCAhJGlzRmluaXRlKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgYWJzID0gJGFicyhhcmd1bWVudCk7XG5cdHJldHVybiAkZmxvb3IoYWJzKSA9PT0gYWJzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0dmFyIGFyZ3MgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPT09IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIvKiEgbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIGFkZExpc3RlbmVyL3JlbW92ZUxpc3RlbmVyIGV4dGVuc2lvbi4gQXV0aG9yICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLiBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKCl7XG4gICAgLy8gQmFpbCBvdXQgZm9yIGJyb3dzZXJzIHRoYXQgaGF2ZSBhZGRMaXN0ZW5lciBzdXBwb3J0XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhICYmIHdpbmRvdy5tYXRjaE1lZGlhKCdhbGwnKS5hZGRMaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsTWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhLFxuICAgICAgICBoYXNNZWRpYVF1ZXJpZXMgPSBsb2NhbE1hdGNoTWVkaWEoJ29ubHkgYWxsJykubWF0Y2hlcyxcbiAgICAgICAgaXNMaXN0ZW5pbmcgICAgID0gZmFsc2UsXG4gICAgICAgIHRpbWVvdXRJRCAgICAgICA9IDAsICAgIC8vIHNldFRpbWVvdXQgZm9yIGRlYm91bmNpbmcgJ2hhbmRsZUNoYW5nZSdcbiAgICAgICAgcXVlcmllcyAgICAgICAgID0gW10sICAgLy8gQ29udGFpbnMgZWFjaCAnbXFsJyBhbmQgYXNzb2NpYXRlZCAnbGlzdGVuZXJzJyBpZiAnYWRkTGlzdGVuZXInIGlzIHVzZWRcbiAgICAgICAgaGFuZGxlQ2hhbmdlICAgID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAvLyBEZWJvdW5jZVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG5cbiAgICAgICAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gcXVlcmllcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtcWwgICAgICAgICA9IHF1ZXJpZXNbaV0ubXFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzICAgPSBxdWVyaWVzW2ldLmxpc3RlbmVycyB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgICAgID0gbG9jYWxNYXRjaE1lZGlhKG1xbC5tZWRpYSkubWF0Y2hlcztcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbXFsLm1hdGNoZXMgdmFsdWUgYW5kIGNhbGwgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmUgbGlzdGVuZXJzIG9ubHkgaWYgdHJhbnNpdGlvbmluZyB0byBvciBmcm9tIG1hdGNoZWQgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgIT09IG1xbC5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtcWwubWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IGxpc3RlbmVycy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2pdLmNhbGwod2luZG93LCBtcWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMzApO1xuICAgICAgICB9O1xuXG4gICAgd2luZG93Lm1hdGNoTWVkaWEgPSBmdW5jdGlvbihtZWRpYSkge1xuICAgICAgICB2YXIgbXFsICAgICAgICAgPSBsb2NhbE1hdGNoTWVkaWEobWVkaWEpLFxuICAgICAgICAgICAgbGlzdGVuZXJzICAgPSBbXSxcbiAgICAgICAgICAgIGluZGV4ICAgICAgID0gMDtcblxuICAgICAgICBtcWwuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgLy8gQ2hhbmdlcyB3b3VsZCBub3Qgb2NjdXIgdG8gY3NzIG1lZGlhIHR5cGUgc28gcmV0dXJuIG5vdyAoQWZmZWN0cyBJRSA8PSA4KVxuICAgICAgICAgICAgaWYgKCFoYXNNZWRpYVF1ZXJpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCAncmVzaXplJyBsaXN0ZW5lciBmb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUzMgbWVkaWEgcXVlcmllcyAoTm90IGZvciBJRSA8PSA4KVxuICAgICAgICAgICAgLy8gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSAxIHJlc2l6ZSBsaXN0ZW5lciBydW5uaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgaWYgKCFpc0xpc3RlbmluZykge1xuICAgICAgICAgICAgICAgIGlzTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlQ2hhbmdlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHVzaCBvYmplY3Qgb25seSBpZiBpdCBoYXMgbm90IGJlZW4gcHVzaGVkIGFscmVhZHlcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gcXVlcmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbXFsICAgICAgICAgOiBtcWwsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycyAgIDogbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtcWwucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGlsOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG1xbDtcbiAgICB9O1xufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXQgfHwgaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vKipcbiAqIDcuMy4xIEdldCAoTywgUCkgLSBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0LW8tcFxuICogMS4gQXNzZXJ0OiBUeXBlKE8pIGlzIE9iamVjdC5cbiAqIDIuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuICogMy4gUmV0dXJuIE8uW1tHZXRdXShQLCBPKS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldChPLCBQKSB7XG5cdC8vIDcuMy4xLjFcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdC8vIDcuMy4xLjJcblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUsIGdvdCAnICsgaW5zcGVjdChQKSk7XG5cdH1cblx0Ly8gNy4zLjEuM1xuXHRyZXR1cm4gT1tQXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciB0cnlSZWdleEV4ZWNDYWxsID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblx0XHRyZWdleEV4ZWMuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gbGFzdEluZGV4OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fVxuXG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRyeVJlZ2V4RXhlY0NhbGwodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZXM1LXNoaW0nKTtcbnJlcXVpcmUoJ2VzNS1zaGltL2VzNS1zaGFtJyk7XG5cbnJlcXVpcmUoJy4vZXMyMDE1Jyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkU3RyaW5nID0gR2V0SW50cmluc2ljKCclU3RyaW5nJScpO1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCcuL1RvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcm9wZXJ0eWtleVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcblx0dmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkU3RyaW5nKTtcblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnID8ga2V5IDogVG9TdHJpbmcoa2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHR0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQvYXV0bycpO1xucmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvYXV0bycpO1xuXG5yZXF1aXJlKCdzeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL2F1dG8nKTtcblxucmVxdWlyZSgnb2JqZWN0LmZyb21lbnRyaWVzL2F1dG8nKTtcblxucmVxdWlyZSgnLi9lczIwMjAnKTtcbiIsIi8vIENvbnNvbGUtcG9seWZpbGwuIE1JVCBsaWNlbnNlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9jb25zb2xlLXBvbHlmaWxsXG4vLyBNYWtlIGl0IHNhZmUgdG8gZG8gY29uc29sZS5sb2coKSBhbHdheXMuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFnbG9iYWwuY29uc29sZSkge1xuICAgIGdsb2JhbC5jb25zb2xlID0ge307XG4gIH1cbiAgdmFyIGNvbiA9IGdsb2JhbC5jb25zb2xlO1xuICB2YXIgcHJvcCwgbWV0aG9kO1xuICB2YXIgZHVtbXkgPSBmdW5jdGlvbigpIHt9O1xuICB2YXIgcHJvcGVydGllcyA9IFsnbWVtb3J5J107XG4gIHZhciBtZXRob2RzID0gKCdhc3NlcnQsY2xlYXIsY291bnQsZGVidWcsZGlyLGRpcnhtbCxlcnJvcixleGNlcHRpb24sZ3JvdXAsJyArXG4gICAgICdncm91cENvbGxhcHNlZCxncm91cEVuZCxpbmZvLGxvZyxtYXJrVGltZWxpbmUscHJvZmlsZSxwcm9maWxlcyxwcm9maWxlRW5kLCcgK1xuICAgICAnc2hvdyx0YWJsZSx0aW1lLHRpbWVFbmQsdGltZWxpbmUsdGltZWxpbmVFbmQsdGltZVN0YW1wLHRyYWNlLHdhcm4nKS5zcGxpdCgnLCcpO1xuICB3aGlsZSAocHJvcCA9IHByb3BlcnRpZXMucG9wKCkpIGlmICghY29uW3Byb3BdKSBjb25bcHJvcF0gPSB7fTtcbiAgd2hpbGUgKG1ldGhvZCA9IG1ldGhvZHMucG9wKCkpIGlmICghY29uW21ldGhvZF0pIGNvblttZXRob2RdID0gZHVtbXk7XG4gIC8vIFVzaW5nIGB0aGlzYCBmb3Igd2ViIHdvcmtlcnMgJiBzdXBwb3J0cyBCcm93c2VyaWZ5IC8gV2VicGFjay5cbn0pKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gdGhpcyA6IHdpbmRvdyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgZmxhZ3NCb3VuZCA9IGNhbGxCaW5kKGltcGxlbWVudGF0aW9uKTtcblxuZGVmaW5lKGZsYWdzQm91bmQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYWdzQm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoZG9jdW1lbnQuY29udGFpbnMpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jb250YWlucztcblx0XHR9XG5cdFx0aWYgKGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucykge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnM7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIEdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi9HZXRJdGVyYXRvcicpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcbnZhciBJdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi9JdGVyYXRvckNsb3NlJyk7XG52YXIgSXRlcmF0b3JTdGVwID0gcmVxdWlyZSgnLi9JdGVyYXRvclN0ZXAnKTtcbnZhciBJdGVyYXRvclZhbHVlID0gcmVxdWlyZSgnLi9JdGVyYXRvclZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkZC1lbnRyaWVzLWZyb20taXRlcmFibGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlKHRhcmdldCwgaXRlcmFibGUsIGFkZGVyKSB7XG5cdGlmICghSXNDYWxsYWJsZShhZGRlcikpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGFkZGVyYCBpcyBub3QgY2FsbGFibGUnKTtcblx0fVxuXHRpZiAoaXRlcmFibGUgPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgaXRlcmFibGVgIGlzIHByZXNlbnQsIGFuZCBub3QgbnVsbGlzaCcpO1xuXHR9XG5cdHZhciBpdGVyYXRvclJlY29yZCA9IEdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0d2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvclJlY29yZCk7XG5cdFx0aWYgKCFuZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblx0XHR2YXIgbmV4dEl0ZW0gPSBJdGVyYXRvclZhbHVlKG5leHQpO1xuXHRcdGlmIChUeXBlKG5leHRJdGVtKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHZhciBlcnJvciA9IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciBuZXh0IG11c3QgcmV0dXJuIGFuIE9iamVjdCwgZ290ICcgKyBpbnNwZWN0KG5leHRJdGVtKSk7XG5cdFx0XHRyZXR1cm4gSXRlcmF0b3JDbG9zZShcblx0XHRcdFx0aXRlcmF0b3JSZWNvcmQsXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyb3I7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb29wLWZ1bmNcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgayA9IEdldChuZXh0SXRlbSwgJzAnKTtcblx0XHRcdHZhciB2ID0gR2V0KG5leHRJdGVtLCAnMScpO1xuXHRcdFx0Q2FsbChhZGRlciwgdGFyZ2V0LCBbaywgdl0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBJdGVyYXRvckNsb3NlKFxuXHRcdFx0XHRpdGVyYXRvclJlY29yZCxcblx0XHRcdFx0ZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsc1xuXHRBdG9taWNzLFxuXHRTaGFyZWRBcnJheUJ1ZmZlcixcbiovXG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoe30sICcnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdCRnT1BEID0gbnVsbDsgLy8gdGhpcyBpcyBJRSA4LCB3aGljaCBoYXMgYSBicm9rZW4gZ09QRFxuXHR9XG59XG5cbnZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3ICRUeXBlRXJyb3IoKTsgfTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cbnZhciBnZW5lcmF0b3I7IC8vID0gZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBnZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvciA/IGdldFByb3RvKGdlbmVyYXRvcikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNGbjsgLy8gYXN5bmMgZnVuY3Rpb24oKSB7fTtcbnZhciBhc3luY0Z1bmN0aW9uID0gYXN5bmNGbiA/IGFzeW5jRm4uY29uc3RydWN0b3IgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW47IC8vIGFzeW5jIGZ1bmN0aW9uICogKCkge307XG52YXIgYXN5bmNHZW5GdW5jdGlvbiA9IGFzeW5jR2VuID8gZ2V0UHJvdG8oYXN5bmNHZW4pIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jR2VuSXRlcmF0b3IgPSBhc3luY0dlbiA/IGFzeW5jR2VuKCkgOiB1bmRlZmluZWQ7XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIucHJvdG90eXBlLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXJyYXlQcm90b3R5cGUlJzogQXJyYXkucHJvdG90eXBlLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBBcnJheS5wcm90b3R5cGUuZW50cmllcyxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IEFycmF5LnByb3RvdHlwZS5rZXlzLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IEFycmF5LnByb3RvdHlwZS52YWx1ZXMsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IGFzeW5jRnVuY3Rpb24sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBhc3luY0Z1bmN0aW9uID8gYXN5bmNGdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbkl0ZXJhdG9yKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IGFzeW5jR2VuRnVuY3Rpb24sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5GdW5jdGlvbiA/IGFzeW5jR2VuRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5JdGVyYXRvciAmJiBoYXNTeW1ib2xzICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yID8gYXN5bmNHZW5JdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSA6IHVuZGVmaW5lZCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogQm9vbGVhbi5wcm90b3R5cGUsXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldy5wcm90b3R5cGUsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJURhdGVQcm90b3R5cGUlJzogRGF0ZS5wcm90b3R5cGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiBFcnJvcixcblx0JyVFcnJvclByb3RvdHlwZSUnOiBFcnJvci5wcm90b3R5cGUsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBFdmFsRXJyb3IucHJvdG90eXBlLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXkucHJvdG90eXBlLFxuXHQnJUZ1bmN0aW9uJSc6IEZ1bmN0aW9uLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IEZ1bmN0aW9uLnByb3RvdHlwZSxcblx0JyVHZW5lcmF0b3IlJzogZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKCkpIDogdW5kZWZpbmVkLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IGdlbmVyYXRvckZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBnZW5lcmF0b3JGdW5jdGlvbiA/IGdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclSlNPTlBhcnNlJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04ucGFyc2UgOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLnByb3RvdHlwZSxcblx0JyVNYXRoJSc6IE1hdGgsXG5cdCclTnVtYmVyJSc6IE51bWJlcixcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogTnVtYmVyLnByb3RvdHlwZSxcblx0JyVPYmplY3QlJzogT2JqZWN0LFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBPYmplY3QucHJvdG90eXBlLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucHJvdG90eXBlLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucHJvdG90eXBlLnRoZW4sXG5cdCclUHJvbWlzZV9hbGwlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5hbGwsXG5cdCclUHJvbWlzZV9yZWplY3QlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5yZWplY3QsXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVzb2x2ZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogUmFuZ2VFcnJvci5wcm90b3R5cGUsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogUmVmZXJlbmNlRXJyb3IucHJvdG90eXBlLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBSZWdFeHAucHJvdG90eXBlLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNldFByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldC5wcm90b3R5cGUsXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCclU3RyaW5nJSc6IFN0cmluZyxcblx0JyVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogU3RyaW5nLnByb3RvdHlwZSxcblx0JyVTeW1ib2wlJzogaGFzU3ltYm9scyA/IFN5bWJvbCA6IHVuZGVmaW5lZCxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogU3ludGF4RXJyb3IsXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogU3ludGF4RXJyb3IucHJvdG90eXBlLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFR5cGVkQXJyYXkgPyBUeXBlZEFycmF5LnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogJFR5cGVFcnJvci5wcm90b3R5cGUsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDE2QXJyYXklJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogVVJJRXJyb3IucHJvdG90eXBlLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAucHJvdG90eXBlLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldCxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXQucHJvdG90eXBlXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKCEobmFtZSBpbiBJTlRSSU5TSUNTKSkge1xuXHRcdHRocm93IG5ldyBTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcblx0fVxuXG5cdC8vIGlzdGFuYnVsIGlnbm9yZSBpZiAvLyBob3BlZnVsbHkgdGhpcyBpcyBpbXBvc3NpYmxlIHRvIHRlc3QgOi0pXG5cdGlmICh0eXBlb2YgSU5UUklOU0lDU1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHR9XG5cblx0cmV0dXJuIElOVFJJTlNJQ1NbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblxuXHR2YXIgdmFsdWUgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIChwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJykgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdGZvciAodmFyIGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnRzW2ldKTtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcgJiYgIShwYXJ0c1tpXSBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSA9IGRlc2MgPyAoZGVzYy5nZXQgfHwgZGVzYy52YWx1ZSkgOiB2YWx1ZVtwYXJ0c1tpXV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRzW2ldXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEFkZEVudHJpZXNGcm9tSXRlcmFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FkZEVudHJpZXNGcm9tSXRlcmFibGUnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0FycmF5Jyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIFRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG5cbnZhciBhZGRlciA9IGZ1bmN0aW9uIGFkZERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG5cdHZhciBPID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblx0dmFyIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShrZXkpO1xuXHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG59O1xuXG52YXIgbGVnYWN5QXNzaWduID0gZnVuY3Rpb24gYXNzaWduKG9iaiwgZW50cmllcykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZW50cnkgPSBlbnRyaWVzW2ldO1xuXHRcdGlmIChUeXBlKGVudHJ5KSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIHJldHVybmVkIGEgbm9uLW9iamVjdDsgZW50cnkgZXhwZWN0ZWQnKTtcblx0XHR9XG5cblx0XHR2YXIga2V5ID0gR2V0KGVudHJ5LCAnMCcpO1xuXHRcdHZhciB2YWx1ZSA9IEdldChlbnRyeSwgJzEnKTtcblx0XHR2YXIgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KGtleSk7XG5cdFx0Q3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhvYmosIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG5cdH1cbn07XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZShpdGVyYWJsZSk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXG5cdC8vIHRoaXMgcGFydCBpc24ndCBpbiB0aGUgc3BlYywgaXQncyBmb3IgYSByZWFzb25hYmxlIGZhbGxiYWNrIGZvciBwcmUtRVM2IGVudmlyb25tZW50c1xuXHRpZiAoIWhhc1N5bWJvbHMpIHtcblx0XHRpZiAoIUlzQXJyYXkoaXRlcmFibGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGVudmlyb25tZW50IGxhY2tzIG5hdGl2ZSBTeW1ib2xzLCBhbmQgY2FuIG5vdCBzdXBwb3J0IG5vbi1BcnJheSBpdGVyYWJsZXMnKTtcblx0XHR9XG5cdFx0bGVnYWN5QXNzaWduKG9iaiwgaXRlcmFibGUpO1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHRyZXR1cm4gQWRkRW50cmllc0Zyb21JdGVyYWJsZShvYmosIGl0ZXJhYmxlLCBhZGRlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0dmFyIEMgPSBPLmNvbnN0cnVjdG9yO1xuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoVHlwZShDKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignTy5jb25zdHJ1Y3RvciBpcyBub3QgYW4gT2JqZWN0Jyk7XG5cdH1cblx0dmFyIFMgPSAkc3BlY2llcyA/IENbJHNwZWNpZXNdIDogdm9pZCAwO1xuXHRpZiAoUyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoSXNDb25zdHJ1Y3RvcihTKSkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCdubyBjb25zdHJ1Y3RvciBmb3VuZCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydFJlY29yZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXNzZXJ0UmVjb3JkJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZnJvbXByb3BlcnR5ZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIERlc2M7XG5cdH1cblxuXHRhc3NlcnRSZWNvcmQoVHlwZSwgJ1Byb3BlcnR5IERlc2NyaXB0b3InLCAnRGVzYycsIERlc2MpO1xuXG5cdHZhciBvYmogPSB7fTtcblx0aWYgKCdbW1ZhbHVlXV0nIGluIERlc2MpIHtcblx0XHRvYmoudmFsdWUgPSBEZXNjWydbW1ZhbHVlXV0nXTtcblx0fVxuXHRpZiAoJ1tbV3JpdGFibGVdXScgaW4gRGVzYykge1xuXHRcdG9iai53cml0YWJsZSA9IERlc2NbJ1tbV3JpdGFibGVdXSddO1xuXHR9XG5cdGlmICgnW1tHZXRdXScgaW4gRGVzYykge1xuXHRcdG9iai5nZXQgPSBEZXNjWydbW0dldF1dJ107XG5cdH1cblx0aWYgKCdbW1NldF1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLnNldCA9IERlc2NbJ1tbU2V0XV0nXTtcblx0fVxuXHRpZiAoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmVudW1lcmFibGUgPSBEZXNjWydbW0VudW1lcmFibGVdXSddO1xuXHR9XG5cdGlmICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYykge1xuXHRcdG9iai5jb25maWd1cmFibGUgPSBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ107XG5cdH1cblx0cmV0dXJuIG9iajtcbn07XG4iLCIvKlxuICogY2xhc3NMaXN0LmpzOiBDcm9zcy1icm93c2VyIGZ1bGwgZWxlbWVudC5jbGFzc0xpc3QgaW1wbGVtZW50YXRpb24uXG4gKiAxLjEuMjAxNzA0MjdcbiAqXG4gKiBCeSBFbGkgR3JleSwgaHR0cDovL2VsaWdyZXkuY29tXG4gKiBMaWNlbnNlOiBEZWRpY2F0ZWQgdG8gdGhlIHB1YmxpYyBkb21haW4uXG4gKiAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9jbGFzc0xpc3QuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG5cbi8qZ2xvYmFsIHNlbGYsIGRvY3VtZW50LCBET01FeGNlcHRpb24gKi9cblxuLyohIEBzb3VyY2UgaHR0cDovL3B1cmwuZWxpZ3JleS5jb20vZ2l0aHViL2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9jbGFzc0xpc3QuanMgKi9cblxuaWYgKFwiZG9jdW1lbnRcIiBpbiB3aW5kb3cuc2VsZikge1xuXG4vLyBGdWxsIHBvbHlmaWxsIGZvciBicm93c2VycyB3aXRoIG5vIGNsYXNzTGlzdCBzdXBwb3J0XG4vLyBJbmNsdWRpbmcgSUUgPCBFZGdlIG1pc3NpbmcgU1ZHRWxlbWVudC5jbGFzc0xpc3RcbmlmICghKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIikpIFxuXHR8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJnXCIpKSkge1xuXG4oZnVuY3Rpb24gKHZpZXcpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICghKCdFbGVtZW50JyBpbiB2aWV3KSkgcmV0dXJuO1xuXG52YXJcblx0ICBjbGFzc0xpc3RQcm9wID0gXCJjbGFzc0xpc3RcIlxuXHQsIHByb3RvUHJvcCA9IFwicHJvdG90eXBlXCJcblx0LCBlbGVtQ3RyUHJvdG8gPSB2aWV3LkVsZW1lbnRbcHJvdG9Qcm9wXVxuXHQsIG9iakN0ciA9IE9iamVjdFxuXHQsIHN0clRyaW0gPSBTdHJpbmdbcHJvdG9Qcm9wXS50cmltIHx8IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKTtcblx0fVxuXHQsIGFyckluZGV4T2YgPSBBcnJheVtwcm90b1Byb3BdLmluZGV4T2YgfHwgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHR2YXJcblx0XHRcdCAgaSA9IDBcblx0XHRcdCwgbGVuID0gdGhpcy5sZW5ndGhcblx0XHQ7XG5cdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0Ly8gVmVuZG9yczogcGxlYXNlIGFsbG93IGNvbnRlbnQgY29kZSB0byBpbnN0YW50aWF0ZSBET01FeGNlcHRpb25zXG5cdCwgRE9NRXggPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xuXHRcdHRoaXMubmFtZSA9IHR5cGU7XG5cdFx0dGhpcy5jb2RlID0gRE9NRXhjZXB0aW9uW3R5cGVdO1xuXHRcdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdH1cblx0LCBjaGVja1Rva2VuQW5kR2V0SW5kZXggPSBmdW5jdGlvbiAoY2xhc3NMaXN0LCB0b2tlbikge1xuXHRcdGlmICh0b2tlbiA9PT0gXCJcIikge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4KFxuXHRcdFx0XHQgIFwiU1lOVEFYX0VSUlwiXG5cdFx0XHRcdCwgXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWRcIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0aWYgKC9cXHMvLnRlc3QodG9rZW4pKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJJTlZBTElEX0NIQVJBQ1RFUl9FUlJcIlxuXHRcdFx0XHQsIFwiU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyXCJcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJJbmRleE9mLmNhbGwoY2xhc3NMaXN0LCB0b2tlbik7XG5cdH1cblx0LCBDbGFzc0xpc3QgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHZhclxuXHRcdFx0ICB0cmltbWVkQ2xhc3NlcyA9IHN0clRyaW0uY2FsbChlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpXG5cdFx0XHQsIGNsYXNzZXMgPSB0cmltbWVkQ2xhc3NlcyA/IHRyaW1tZWRDbGFzc2VzLnNwbGl0KC9cXHMrLykgOiBbXVxuXHRcdFx0LCBpID0gMFxuXHRcdFx0LCBsZW4gPSBjbGFzc2VzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR0aGlzLnB1c2goY2xhc3Nlc1tpXSk7XG5cdFx0fVxuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy50b1N0cmluZygpKTtcblx0XHR9O1xuXHR9XG5cdCwgY2xhc3NMaXN0UHJvdG8gPSBDbGFzc0xpc3RbcHJvdG9Qcm9wXSA9IFtdXG5cdCwgY2xhc3NMaXN0R2V0dGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBuZXcgQ2xhc3NMaXN0KHRoaXMpO1xuXHR9XG47XG4vLyBNb3N0IERPTUV4Y2VwdGlvbiBpbXBsZW1lbnRhdGlvbnMgZG9uJ3QgYWxsb3cgY2FsbGluZyBET01FeGNlcHRpb24ncyB0b1N0cmluZygpXG4vLyBvbiBub24tRE9NRXhjZXB0aW9ucy4gRXJyb3IncyB0b1N0cmluZygpIGlzIHN1ZmZpY2llbnQgaGVyZS5cbkRPTUV4W3Byb3RvUHJvcF0gPSBFcnJvcltwcm90b1Byb3BdO1xuY2xhc3NMaXN0UHJvdG8uaXRlbSA9IGZ1bmN0aW9uIChpKSB7XG5cdHJldHVybiB0aGlzW2ldIHx8IG51bGw7XG59O1xuY2xhc3NMaXN0UHJvdG8uY29udGFpbnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcblx0dG9rZW4gKz0gXCJcIjtcblx0cmV0dXJuIGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgIT09IC0xO1xufTtcbmNsYXNzTGlzdFByb3RvLmFkZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aWYgKGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgPT09IC0xKSB7XG5cdFx0XHR0aGlzLnB1c2godG9rZW4pO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdFx0LCBpbmRleFxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdHdoaWxlIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uICh0b2tlbiwgZm9yY2UpIHtcblx0dG9rZW4gKz0gXCJcIjtcblxuXHR2YXJcblx0XHQgIHJlc3VsdCA9IHRoaXMuY29udGFpbnModG9rZW4pXG5cdFx0LCBtZXRob2QgPSByZXN1bHQgP1xuXHRcdFx0Zm9yY2UgIT09IHRydWUgJiYgXCJyZW1vdmVcIlxuXHRcdDpcblx0XHRcdGZvcmNlICE9PSBmYWxzZSAmJiBcImFkZFwiXG5cdDtcblxuXHRpZiAobWV0aG9kKSB7XG5cdFx0dGhpc1ttZXRob2RdKHRva2VuKTtcblx0fVxuXG5cdGlmIChmb3JjZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gZm9yY2U7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICFyZXN1bHQ7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuam9pbihcIiBcIik7XG59O1xuXG5pZiAob2JqQ3RyLmRlZmluZVByb3BlcnR5KSB7XG5cdHZhciBjbGFzc0xpc3RQcm9wRGVzYyA9IHtcblx0XHQgIGdldDogY2xhc3NMaXN0R2V0dGVyXG5cdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0fTtcblx0dHJ5IHtcblx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdH0gY2F0Y2ggKGV4KSB7IC8vIElFIDggZG9lc24ndCBzdXBwb3J0IGVudW1lcmFibGU6dHJ1ZVxuXHRcdC8vIGFkZGluZyB1bmRlZmluZWQgdG8gZmlnaHQgdGhpcyBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9jbGFzc0xpc3QuanMvaXNzdWVzLzM2XG5cdFx0Ly8gbW9kZXJuaWUgSUU4LU1TVzcgbWFjaGluZSBoYXMgSUU4IDguMC42MDAxLjE4NzAyIGFuZCBpcyBhZmZlY3RlZFxuXHRcdGlmIChleC5udW1iZXIgPT09IHVuZGVmaW5lZCB8fCBleC5udW1iZXIgPT09IC0weDdGRjVFQzU0KSB7XG5cdFx0XHRjbGFzc0xpc3RQcm9wRGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7XG5cdFx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdFx0fVxuXHR9XG59IGVsc2UgaWYgKG9iakN0cltwcm90b1Byb3BdLl9fZGVmaW5lR2V0dGVyX18pIHtcblx0ZWxlbUN0clByb3RvLl9fZGVmaW5lR2V0dGVyX18oY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0R2V0dGVyKTtcbn1cblxufSh3aW5kb3cuc2VsZikpO1xuXG59XG5cbi8vIFRoZXJlIGlzIGZ1bGwgb3IgcGFydGlhbCBuYXRpdmUgY2xhc3NMaXN0IHN1cHBvcnQsIHNvIGp1c3QgY2hlY2sgaWYgd2UgbmVlZFxuLy8gdG8gbm9ybWFsaXplIHRoZSBhZGQvcmVtb3ZlIGFuZCB0b2dnbGUgQVBJcy5cblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIik7XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImMxXCIsIFwiYzJcIik7XG5cblx0Ly8gUG9seWZpbGwgZm9yIElFIDEwLzExIGFuZCBGaXJlZm94IDwyNiwgd2hlcmUgY2xhc3NMaXN0LmFkZCBhbmRcblx0Ly8gY2xhc3NMaXN0LnJlbW92ZSBleGlzdCBidXQgc3VwcG9ydCBvbmx5IG9uZSBhcmd1bWVudCBhdCBhIHRpbWUuXG5cdGlmICghdGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzJcIikpIHtcblx0XHR2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kKSB7XG5cdFx0XHR2YXIgb3JpZ2luYWwgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF07XG5cblx0XHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHRva2VuKSB7XG5cdFx0XHRcdHZhciBpLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdHRva2VuID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdG9yaWdpbmFsLmNhbGwodGhpcywgdG9rZW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0Y3JlYXRlTWV0aG9kKCdhZGQnKTtcblx0XHRjcmVhdGVNZXRob2QoJ3JlbW92ZScpO1xuXHR9XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImMzXCIsIGZhbHNlKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAgYW5kIEZpcmVmb3ggPDI0LCB3aGVyZSBjbGFzc0xpc3QudG9nZ2xlIGRvZXMgbm90XG5cdC8vIHN1cHBvcnQgdGhlIHNlY29uZCBhcmd1bWVudC5cblx0aWYgKHRlc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImMzXCIpKSB7XG5cdFx0dmFyIF90b2dnbGUgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtcblxuXHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24odG9rZW4sIGZvcmNlKSB7XG5cdFx0XHRpZiAoMSBpbiBhcmd1bWVudHMgJiYgIXRoaXMuY29udGFpbnModG9rZW4pID09PSAhZm9yY2UpIHtcblx0XHRcdFx0cmV0dXJuIGZvcmNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIF90b2dnbGUuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9XG5cblx0dGVzdEVsZW1lbnQgPSBudWxsO1xufSgpKTtcblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCdlcy1nZXQtaXRlcmF0b3InKTtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCdpdGVyYXRlLWl0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXRlcmF0ZVZhbHVlKGl0ZXJhYmxlKSB7XG5cdHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0aWYgKCFpdGVyYXRvcikge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdub24taXRlcmFibGUgdmFsdWUgcHJvdmlkZWQnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRyZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gaXRlcmF0ZShpdGVyYXRvcik7XG59O1xuIiwiLyohIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy4gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gTUlUIGxpY2Vuc2UgKi9cblxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICAgIHZhciBzdHlsZU1lZGlhID0gKHdpbmRvdy5zdHlsZU1lZGlhIHx8IHdpbmRvdy5tZWRpYSk7XG5cbiAgICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gICAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgICAgIHZhciBzdHlsZSAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyksXG4gICAgICAgICAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICAgICAgICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgICAgICBzdHlsZS50eXBlICA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgIHN0eWxlLmlkICAgID0gJ21hdGNobWVkaWFqcy10ZXN0JztcblxuICAgICAgICBpZiAoIXNjcmlwdCkge1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgIGluZm8gPSAoJ2dldENvbXB1dGVkU3R5bGUnIGluIHdpbmRvdykgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgICAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgICAgICAgbWF0Y2hNZWRpdW06IGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGlmIG1lZGlhIHF1ZXJ5IGlzIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgICAgICAgIG1lZGlhOiBtZWRpYSB8fCAnYWxsJ1xuICAgICAgICB9O1xuICAgIH07XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVQcm9taXNlKCkge1xuXHRpZiAodHlwZW9mIFByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgUHJvbWlzZS5hbGxTZXR0bGVkYCByZXF1aXJlcyBhIGdsb2JhbCBgUHJvbWlzZWAgYmUgYXZhaWxhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgb3JpZ0RlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBvYmogPSB7fTtcblx0dHJ5IHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqLCAneCcsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvYmogfSk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRcdGZvciAodmFyIF8gaW4gb2JqKSB7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93VW51c2VkVmFyaWFibGVzXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBvYmoueCA9PT0gb2JqO1xuXHR9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgSUUgOC4gKi9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0ICYmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRQcm9taXNlUmVzb2x2ZSA9IGNhbGxCb3VuZCgnUHJvbWlzZS5yZXNvbHZlJywgdHJ1ZSk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1wcm9taXNlLXJlc29sdmVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBQcm9taXNlUmVzb2x2ZShDLCB4KSB7XG5cdGlmICghJFByb21pc2VSZXNvbHZlKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgUHJvbWlzZXMuJyk7XG5cdH1cblx0cmV0dXJuICRQcm9taXNlUmVzb2x2ZShDLCB4KTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMTJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRpZiAoeCA9PT0geSkgeyAvLyAwID09PSAtMCwgYnV0IHRoZXkgYXJlIG5vdCBpZGVudGljYWwuXG5cdFx0aWYgKHggPT09IDApIHsgcmV0dXJuIDEgLyB4ID09PSAxIC8geTsgfVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiAkaXNOYU4oeCkgJiYgJGlzTmFOKHkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZG9jdW1lbnQuY29udGFpbnMvYXV0bycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICR0ZXN0ID0gR2V0SW50cmluc2ljKCdSZWdFeHAucHJvdG90eXBlLnRlc3QnKTtcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnLi9jYWxsQmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlZ2V4VGVzdGVyKHJlZ2V4KSB7XG5cdHJldHVybiBjYWxsQmluZCgkdGVzdCwgcmVnZXgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldERheSA9IERhdGUucHJvdG90eXBlLmdldERheTtcbnZhciB0cnlEYXRlT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RGF0ZUdldERheUNhbGwodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRnZXREYXkuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RhdGVPYmplY3QodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5RGF0ZU9iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gZGF0ZUNsYXNzO1xufTtcbiIsInJlcXVpcmUoJy4vJykucG9seWZpbGwoKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzIHx8IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG5yZXF1aXJlUHJvbWlzZSgpO1xuXG52YXIgUHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1Byb21pc2VSZXNvbHZlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVHlwZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCdpdGVyYXRlLXZhbHVlJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLm1hcCcpO1xudmFyIGdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciBhbGwgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgZ2V0SW50cmluc2ljKCclUHJvbWlzZV9hbGwlJykpO1xudmFyIHJlamVjdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBnZXRJbnRyaW5zaWMoJyVQcm9taXNlX3JlamVjdCUnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuXHR2YXIgQyA9IHRoaXM7XG5cdGlmIChUeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2B0aGlzYCB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHR9XG5cdHZhciB2YWx1ZXMgPSBpdGVyYXRlKGl0ZXJhYmxlKTtcblx0cmV0dXJuIGFsbChDLCBtYXAodmFsdWVzLCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdHJldHVybiB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuXHRcdH07XG5cdFx0dmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0cmV0dXJuIHsgc3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IHJlYXNvbiB9O1xuXHRcdH07XG5cdFx0dmFyIGl0ZW1Qcm9taXNlID0gUHJvbWlzZVJlc29sdmUoQywgaXRlbSk7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpdGVtUHJvbWlzZS50aGVuKG9uRnVsZmlsbCwgb25SZWplY3QpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiByZWplY3QoQywgZSk7XG5cdFx0fVxuXHR9KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcbnZhciBUb0Jvb2xlYW4gPSByZXF1aXJlKCcuL1RvQm9vbGVhbicpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuNVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJvcGVydHlEZXNjcmlwdG9yKE9iaikge1xuXHRpZiAoVHlwZShPYmopICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdUb1Byb3BlcnR5RGVzY3JpcHRvciByZXF1aXJlcyBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHZhciBkZXNjID0ge307XG5cdGlmIChoYXMoT2JqLCAnZW51bWVyYWJsZScpKSB7XG5cdFx0ZGVzY1snW1tFbnVtZXJhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmouZW51bWVyYWJsZSk7XG5cdH1cblx0aWYgKGhhcyhPYmosICdjb25maWd1cmFibGUnKSkge1xuXHRcdGRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmouY29uZmlndXJhYmxlKTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ3ZhbHVlJykpIHtcblx0XHRkZXNjWydbW1ZhbHVlXV0nXSA9IE9iai52YWx1ZTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ3dyaXRhYmxlJykpIHtcblx0XHRkZXNjWydbW1dyaXRhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmoud3JpdGFibGUpO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnZ2V0JykpIHtcblx0XHR2YXIgZ2V0dGVyID0gT2JqLmdldDtcblx0XHRpZiAodHlwZW9mIGdldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIUlzQ2FsbGFibGUoZ2V0dGVyKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdH1cblx0aWYgKGhhcyhPYmosICdzZXQnKSkge1xuXHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdGlmICh0eXBlb2Ygc2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShzZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdH1cblxuXHRpZiAoKGhhcyhkZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhkZXNjLCAnW1tTZXRdXScpKSAmJiAoaGFzKGRlc2MsICdbW1ZhbHVlXV0nKSB8fCBoYXMoZGVzYywgJ1tbV3JpdGFibGVdXScpKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHR9XG5cdHJldHVybiBkZXNjO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlcXVpcmUoJ3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvYXV0bycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG59XG5cbnJlcXVpcmUoJy4vZXMyMDE5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1Db250YWlucygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRkZWZpbmUoXG5cdFx0XHRkb2N1bWVudCxcblx0XHRcdHsgY29udGFpbnM6IHBvbHlmaWxsIH0sXG5cdFx0XHR7IGNvbnRhaW5zOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5jb250YWlucyAhPT0gcG9seWZpbGw7IH0gfVxuXHRcdCk7XG5cdFx0aWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0ZGVmaW5lKFxuXHRcdFx0XHRFbGVtZW50LnByb3RvdHlwZSxcblx0XHRcdFx0eyBjb250YWluczogcG9seWZpbGwgfSxcblx0XHRcdFx0eyBjb250YWluczogZnVuY3Rpb24gKCkgeyByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUuY29udGFpbnMgIT09IHBvbHlmaWxsOyB9IH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJykuc3VwcG9ydHNEZXNjcmlwdG9ycztcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBUeXBlRXJyID0gVHlwZUVycm9yO1xudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIHJlZ2V4ID0gL2EvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1GbGFncygpIHtcblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzIHx8ICFnZXRQcm90bykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyKCdSZWdFeHAucHJvdG90eXBlLmZsYWdzIHJlcXVpcmVzIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycycpO1xuXHR9XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdHZhciBwcm90byA9IGdldFByb3RvKHJlZ2V4KTtcblx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCAnZmxhZ3MnKTtcblx0aWYgKCFkZXNjcmlwdG9yIHx8IGRlc2NyaXB0b3IuZ2V0ICE9PSBwb2x5ZmlsbCkge1xuXHRcdGRlZmluZVByb3BlcnR5KHByb3RvLCAnZmxhZ3MnLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogcG9seWZpbGxcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvT2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdE1hcChtYXBwZXJGdW5jdGlvbikge1xuXHR2YXIgTyA9IFRvT2JqZWN0KHRoaXMpO1xuXHR2YXIgc291cmNlTGVuID0gVG9MZW5ndGgoR2V0KE8sICdsZW5ndGgnKSk7XG5cblx0aWYgKCFJc0NhbGxhYmxlKG1hcHBlckZ1bmN0aW9uKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ21hcHBlckZ1bmN0aW9uIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHR9XG5cblx0dmFyIFQ7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFQgPSBhcmd1bWVudHNbMV07XG5cdH1cblxuXHR2YXIgQSA9IEFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcblx0RmxhdHRlbkludG9BcnJheShBLCBPLCBzb3VyY2VMZW4sIDAsIDEsIG1hcHBlckZ1bmN0aW9uLCBUKTtcblx0cmV0dXJuIEE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJyk7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRW50cmllcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBlbnRyaWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0ZW50cmllczogZnVuY3Rpb24gdGVzdEVudHJpZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmVudHJpZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBPcmRpbmFyeUdldE93blByb3BlcnR5ID0gcmVxdWlyZSgnLi9PcmRpbmFyeUdldE93blByb3BlcnR5Jyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4vSXNFeHRlbnNpYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNyZWF0ZWRhdGFwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBvbGREZXNjID0gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKTtcblx0dmFyIGV4dGVuc2libGUgPSAhb2xkRGVzYyB8fCBJc0V4dGVuc2libGUoTyk7XG5cdHZhciBpbW11dGFibGUgPSBvbGREZXNjICYmICghb2xkRGVzY1snW1tXcml0YWJsZV1dJ10gfHwgIW9sZERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSk7XG5cdGlmIChpbW11dGFibGUgfHwgIWV4dGVuc2libGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0U2FtZVZhbHVlLFxuXHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0Tyxcblx0XHRQLFxuXHRcdHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogVixcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fVxuXHQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5mcm9tRW50cmllcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5mcm9tRW50cmllcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vNS9DaGVja09iamVjdENvZXJjaWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gZnVuY3Rpb24gZnVuY3Rpb25zSGF2ZU5hbWVzKCkge1xuXHRyZXR1cm4gdHlwZW9mIGZ1bmN0aW9uIGYoKSB7fS5uYW1lID09PSAnc3RyaW5nJztcbn07XG5cbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmIChnT1BEKSB7XG5cdHRyeSB7XG5cdFx0Z09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbmZ1bmN0aW9uc0hhdmVOYW1lcy5mdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMoKSB7XG5cdHJldHVybiBmdW5jdGlvbnNIYXZlTmFtZXMoKSAmJiBnT1BEICYmICEhZ09QRChmdW5jdGlvbiAoKSB7fSwgJ25hbWUnKS5jb25maWd1cmFibGU7XG59O1xuXG52YXIgJGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmJvdW5kRnVuY3Rpb25zSGF2ZU5hbWVzID0gZnVuY3Rpb24gYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiBmdW5jdGlvbnNIYXZlTmFtZXMoKSAmJiB0eXBlb2YgJGJpbmQgPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb24gZigpIHt9LmJpbmQoKS5uYW1lICE9PSAnJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb25zSGF2ZU5hbWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldE1ldGhvZCA9IHJlcXVpcmUoJy4vR2V0TWV0aG9kJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9yY2xvc2VcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKSB7XG5cdGlmIChUeXBlKGl0ZXJhdG9yKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyYXRvcikgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNDYWxsYWJsZShjb21wbGV0aW9uKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjb21wbGV0aW9uIGlzIG5vdCBhIHRodW5rIGZvciBhIENvbXBsZXRpb24gUmVjb3JkJyk7XG5cdH1cblx0dmFyIGNvbXBsZXRpb25UaHVuayA9IGNvbXBsZXRpb247XG5cblx0dmFyIGl0ZXJhdG9yUmV0dXJuID0gR2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG5cblx0aWYgKHR5cGVvZiBpdGVyYXRvclJldHVybiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gY29tcGxldGlvblRodW5rKCk7XG5cdH1cblxuXHR2YXIgY29tcGxldGlvblJlY29yZDtcblx0dHJ5IHtcblx0XHR2YXIgaW5uZXJSZXN1bHQgPSBDYWxsKGl0ZXJhdG9yUmV0dXJuLCBpdGVyYXRvciwgW10pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaWYgd2UgaGl0IGhlcmUsIHRoZW4gXCJlXCIgaXMgdGhlIGlubmVyUmVzdWx0IGNvbXBsZXRpb24gdGhhdCBuZWVkcyByZS10aHJvd2luZ1xuXG5cdFx0Ly8gaWYgdGhlIGNvbXBsZXRpb24gaXMgb2YgdHlwZSBcInRocm93XCIsIHRoaXMgd2lsbCB0aHJvdy5cblx0XHRjb21wbGV0aW9uVGh1bmsoKTtcblx0XHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdFx0Ly8gaWYgbm90LCB0aGVuIHJldHVybiB0aGUgaW5uZXJSZXN1bHQgY29tcGxldGlvblxuXHRcdHRocm93IGU7XG5cdH1cblx0Y29tcGxldGlvblJlY29yZCA9IGNvbXBsZXRpb25UaHVuaygpOyAvLyBpZiBpbm5lclJlc3VsdCB3b3JrZWQsIHRoZW4gdGhyb3cgaWYgdGhlIGNvbXBsZXRpb24gZG9lc1xuXHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdGlmIChUeXBlKGlubmVyUmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgLnJldHVybiBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHJldHVybiBjb21wbGV0aW9uUmVjb3JkO1xufTtcbiIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xuXG52YXIgaW5zcGVjdEN1c3RvbSA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0JykuY3VzdG9tO1xudmFyIGluc3BlY3RTeW1ib2wgPSBpbnNwZWN0Q3VzdG9tICYmIGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zcGVjdF8ob2JqLCBvcHRpb25zLCBkZXB0aCwgc2Vlbikge1xuICAgIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChoYXMob3B0cywgJ3F1b3RlU3R5bGUnKSAmJiAob3B0cy5xdW90ZVN0eWxlICE9PSAnc2luZ2xlJyAmJiBvcHRzLnF1b3RlU3R5bGUgIT09ICdkb3VibGUnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJxdW90ZVN0eWxlXCIgbXVzdCBiZSBcInNpbmdsZVwiIG9yIFwiZG91YmxlXCInKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50JykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHZhbGlkLXR5cGVvZlxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4uc2xpY2UoKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG9wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBuYW1lT2Yob2JqKTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnKSArICddJztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKG9iaikpIHtcbiAgICAgICAgdmFyIHN5bVN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgU3RyaW5nKG9iai5ub2RlTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGF0dHJzID0gb2JqLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gJyAnICsgYXR0cnNbaV0ubmFtZSArICc9JyArIHdyYXBRdW90ZXMocXVvdGUoYXR0cnNbaV0udmFsdWUpLCAnZG91YmxlJywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSAnPic7XG4gICAgICAgIGlmIChvYmouY2hpbGROb2RlcyAmJiBvYmouY2hpbGROb2Rlcy5sZW5ndGgpIHsgcyArPSAnLi4uJzsgfVxuICAgICAgICBzICs9ICc8LycgKyBTdHJpbmcob2JqLm5vZGVOYW1lKS50b0xvd2VyQ2FzZSgpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICByZXR1cm4gJ1sgJyArIGFyck9iaktleXMob2JqLCBpbnNwZWN0KS5qb2luKCcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArIHBhcnRzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtpbnNwZWN0U3ltYm9sXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIG1hcEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMpO1xuICAgIH1cbiAgICBpZiAoaXNTZXQob2JqKSkge1xuICAgICAgICB2YXIgc2V0UGFydHMgPSBbXTtcbiAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB4cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ3t9JzsgfVxuICAgICAgICByZXR1cm4gJ3sgJyArIHhzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG59O1xuXG5mdW5jdGlvbiB3cmFwUXVvdGVzKHMsIGRlZmF1bHRTdHlsZSwgb3B0cykge1xuICAgIHZhciBxdW90ZUNoYXIgPSAob3B0cy5xdW90ZVN0eWxlIHx8IGRlZmF1bHRTdHlsZSkgPT09ICdkb3VibGUnID8gJ1wiJyA6IFwiJ1wiO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXSc7IH1cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nOyB9XG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN5bWJvbF0nOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nOyB9XG5mdW5jdGlvbiBpc051bWJlcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IE51bWJlcl0nOyB9XG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJpZ0ludF0nOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7IH1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gbWF0Y2guY2FsbChmLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTZXQoeCkge1xuICAgIGlmICghc2V0U2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrU2V0KHgpIHtcbiAgICBpZiAoIXdlYWtTZXRIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB4LmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFN0cmluZyhzdHIsIG9wdHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gc3RyLnJlcGxhY2UoLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJykucmVwbGFjZSgvW1xceDAwLVxceDFmXS9nLCBsb3dieXRlKTtcbiAgICByZXR1cm4gd3JhcFF1b3RlcyhzLCAnc2luZ2xlJywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGxvd2J5dGUoYykge1xuICAgIHZhciBuID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB4ID0ge1xuICAgICAgICA4OiAnYicsIDk6ICd0JywgMTA6ICduJywgMTI6ICdmJywgMTM6ICdyJ1xuICAgIH1bbl07XG4gICAgaWYgKHgpIHsgcmV0dXJuICdcXFxcJyArIHg7IH1cbiAgICByZXR1cm4gJ1xcXFx4JyArIChuIDwgMHgxMCA/ICcwJyA6ICcnKSArIG4udG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMpIHtcbiAgICByZXR1cm4gdHlwZSArICcgKCcgKyBzaXplICsgJykgeycgKyBlbnRyaWVzLmpvaW4oJywgJykgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICghaGFzKG9iaiwga2V5KSkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaXNBcnIgJiYgU3RyaW5nKE51bWJlcihrZXkpKSA9PT0ga2V5ICYmIGtleSA8IG9iai5sZW5ndGgpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKCgvW15cXHckXS8pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4cztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi81L0NoZWNrT2JqZWN0Q29lcmNpYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRTeW1ib2xEZXNjcmlwdGlvbiA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0U3ltYm9sRGVzY3JpcHRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcblx0cmV0dXJuIGdldFN5bWJvbERlc2NyaXB0aW9uKHRoaXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuL2NhbGxCaW5kJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBEZWZpbmVPd25Qcm9wZXJ0eShJc0RhdGFEZXNjcmlwdG9yLCBTYW1lVmFsdWUsIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsIE8sIFAsIGRlc2MpIHtcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRpZiAoIUlzRGF0YURlc2NyaXB0b3IoZGVzYykpIHtcblx0XHRcdC8vIEVTMyBkb2VzIG5vdCBzdXBwb3J0IGdldHRlcnMvc2V0dGVyc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIWRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSB8fCAhZGVzY1snW1tXcml0YWJsZV1dJ10pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBmYWxsYmFjayBmb3IgRVMzXG5cdFx0aWYgKFAgaW4gTyAmJiAkaXNFbnVtZXJhYmxlKE8sIFApICE9PSAhIWRlc2NbJ1tbRW51bWVyYWJsZV1dJ10pIHtcblx0XHRcdC8vIGEgbm9uLWVudW1lcmFibGUgZXhpc3RpbmcgcHJvcGVydHlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCBhdCBhbGwsIG9yIGV4aXN0cyBidXQgaXMgZW51bWVyYWJsZVxuXHRcdHZhciBWID0gZGVzY1snW1tWYWx1ZV1dJ107XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0T1tQXSA9IFY7IC8vIHdpbGwgdXNlIFtbRGVmaW5lXV1cblx0XHRyZXR1cm4gU2FtZVZhbHVlKE9bUF0sIFYpO1xuXHR9XG5cdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpKTtcblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzY29uc3RydWN0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG5cdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdmdW5jdGlvbicgJiYgISFhcmd1bWVudC5wcm90b3R5cGU7IC8vIHVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gdHJ1bHkgY2hlY2sgdGhpcyB3aXRob3V0IHRyeS9jYXRjaCBgbmV3IGFyZ3VtZW50YFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEVTNVRvSW50ZWdlciA9IHJlcXVpcmUoJy4uLzUvVG9JbnRlZ2VyJyk7XG5cbnZhciBUb051bWJlciA9IHJlcXVpcmUoJy4vVG9OdW1iZXInKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0cmV0dXJuIEVTNVRvSW50ZWdlcihudW1iZXIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU2FtZVZhbHVlWmVybyh4LCB5KSB7XG5cdHJldHVybiAoeCA9PT0geSkgfHwgKCRpc05hTih4KSAmJiAkaXNOYU4oeSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gcmVxdWlyZSgnZnVuY3Rpb25zLWhhdmUtbmFtZXMnKSgpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU5hbWUoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0XHRyZXR1cm4gcG9seWZpbGw7XG5cdH1cblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1NoaW1taW5nIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lIHN1cHBvcnQgcmVxdWlyZXMgRVM1IHByb3BlcnR5IGRlc2NyaXB0b3Igc3VwcG9ydC4nKTtcblx0fVxuXHR2YXIgZnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblx0ZGVmaW5lUHJvcGVydHkoZnVuY3Rpb25Qcm90bywgJ25hbWUnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG5hbWUgPSBwb2x5ZmlsbC5jYWxsKHRoaXMpO1xuXHRcdFx0aWYgKHRoaXMgIT09IGZ1bmN0aW9uUHJvdG8pIHtcblx0XHRcdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbHVlOiBuYW1lLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9ICRPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgJGlzRXh0ZW5zaWJsZSA9ICRPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzZXh0ZW5zaWJsZS1vXG5cbm1vZHVsZS5leHBvcnRzID0gJHByZXZlbnRFeHRlbnNpb25zXG5cdD8gZnVuY3Rpb24gSXNFeHRlbnNpYmxlKG9iaikge1xuXHRcdHJldHVybiAhaXNQcmltaXRpdmUob2JqKSAmJiAkaXNFeHRlbnNpYmxlKG9iaik7XG5cdH1cblx0OiBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopO1xuXHR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IDAgKi9cblxucmVxdWlyZSgnYWlyYm5iLWpzLXNoaW1zJyk7XG5cbnJlcXVpcmUoJy4vYnJvd3Nlci1vbmx5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCkge1xuXHR2YXIgTyA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG5cdHZhciBTID0gVG9TdHJpbmcoTyk7XG5cdHZhciBzdHJpbmdMZW5ndGggPSBUb0xlbmd0aChTLmxlbmd0aCk7XG5cdHZhciBmaWxsU3RyaW5nO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRmaWxsU3RyaW5nID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cdHZhciBmaWxsZXIgPSB0eXBlb2YgZmlsbFN0cmluZyA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IFRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuXHRpZiAoZmlsbGVyID09PSAnJykge1xuXHRcdGZpbGxlciA9ICcgJztcblx0fVxuXHR2YXIgaW50TWF4TGVuZ3RoID0gVG9MZW5ndGgobWF4TGVuZ3RoKTtcblx0aWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGgpIHtcblx0XHRyZXR1cm4gUztcblx0fVxuXHR2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcblx0d2hpbGUgKGZpbGxlci5sZW5ndGggPCBmaWxsTGVuKSB7XG5cdFx0dmFyIGZMZW4gPSBmaWxsZXIubGVuZ3RoO1xuXHRcdHZhciByZW1haW5pbmdDb2RlVW5pdHMgPSBmaWxsTGVuIC0gZkxlbjtcblx0XHRmaWxsZXIgKz0gZkxlbiA+IHJlbWFpbmluZ0NvZGVVbml0cyA/ICRzbGljZShmaWxsZXIsIDAsIHJlbWFpbmluZ0NvZGVVbml0cykgOiBmaWxsZXI7XG5cdH1cblxuXHR2YXIgdHJ1bmNhdGVkU3RyaW5nRmlsbGVyID0gZmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4gPyAkc2xpY2UoZmlsbGVyLCAwLCBmaWxsTGVuKSA6IGZpbGxlcjtcblx0cmV0dXJuIHRydW5jYXRlZFN0cmluZ0ZpbGxlciArIFM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VHlwZSA9IHJlcXVpcmUoJy4uLzUvVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvc3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHlwZSh4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdH1cblx0cmV0dXJuIEVTNVR5cGUoeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3RhcmdldC9lczUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJG1hdGNoID0gR2V0SW50cmluc2ljKCclU3ltYm9sLm1hdGNoJScsIHRydWUpO1xuXG52YXIgaGFzUmVnRXhwTWF0Y2hlciA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG5cbnZhciBUb0Jvb2xlYW4gPSByZXF1aXJlKCcuL1RvQm9vbGVhbicpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNyZWdleHBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc1JlZ0V4cChhcmd1bWVudCkge1xuXHRpZiAoIWFyZ3VtZW50IHx8IHR5cGVvZiBhcmd1bWVudCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCRtYXRjaCkge1xuXHRcdHZhciBpc1JlZ0V4cCA9IGFyZ3VtZW50WyRtYXRjaF07XG5cdFx0aWYgKHR5cGVvZiBpc1JlZ0V4cCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBUb0Jvb2xlYW4oaXNSZWdFeHApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaGFzUmVnRXhwTWF0Y2hlcihhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkU3RyaW5nID0gR2V0SW50cmluc2ljKCclU3RyaW5nJScpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHR9XG5cdHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzVUeXBlID0gcmVxdWlyZSgnLi4vNS9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykge1xuXHRcdHJldHVybiAnU3ltYm9sJztcblx0fVxuXHRyZXR1cm4gRVM1VHlwZSh4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaGFzcHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBIYXNQcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgT2AgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFBgIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRyZXR1cm4gUCBpbiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRGdW5jdGlvbiA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uJScpO1xudmFyICRhcHBseSA9ICRGdW5jdGlvbi5hcHBseTtcbnZhciAkY2FsbCA9ICRGdW5jdGlvbi5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkY2FsbCwgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkT2JqZWN0Q3JlYXRlID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmNyZWF0ZSUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG52YXIgaGFzUHJvdG8gPSAhKHsgX19wcm90b19fOiBudWxsIH0gaW5zdGFuY2VvZiBPYmplY3QpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdGNyZWF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9iamVjdENyZWF0ZShwcm90bywgaW50ZXJuYWxTbG90c0xpc3QpIHtcblx0aWYgKHByb3RvICE9PSBudWxsICYmIFR5cGUocHJvdG8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgcHJvdG9gIG11c3QgYmUgbnVsbCBvciBhbiBvYmplY3QnKTtcblx0fVxuXHR2YXIgc2xvdHMgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFtdIDogaW50ZXJuYWxTbG90c0xpc3Q7XG5cdGlmIChzbG90cy5sZW5ndGggPiAwKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignZXMtYWJzdHJhY3QgZG9lcyBub3QgeWV0IHN1cHBvcnQgaW50ZXJuYWwgc2xvdHMnKTtcblx0fVxuXG5cdGlmICgkT2JqZWN0Q3JlYXRlKSB7XG5cdFx0cmV0dXJuICRPYmplY3RDcmVhdGUocHJvdG8pO1xuXHR9XG5cdGlmIChoYXNQcm90bykge1xuXHRcdHJldHVybiB7IF9fcHJvdG9fXzogcHJvdG8gfTtcblx0fVxuXG5cdGlmIChwcm90byA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ25hdGl2ZSBPYmplY3QuY3JlYXRlIHN1cHBvcnQgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIG51bGwgb2JqZWN0cycpO1xuXHR9XG5cdHZhciBUID0gZnVuY3Rpb24gVCgpIHt9O1xuXHRULnByb3RvdHlwZSA9IHByb3RvO1xuXHRyZXR1cm4gbmV3IFQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4vY2FsbEJvdW5kJyk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVTeW50YXhFcnJvciUnKTtcbnZhciBzeW1Ub1N0ciA9IGNhbGxCb3VuZCgnU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZycsIHRydWUpO1xuXG52YXIgZ2V0SW5mZXJyZWROYW1lID0gcmVxdWlyZSgnLi9nZXRJbmZlcnJlZE5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTeW1ib2xEZXNjcmlwdGlvbihzeW1ib2wpIHtcblx0aWYgKCFzeW1Ub1N0cikge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1N5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuXHR9XG5cdHZhciBzdHIgPSBzeW1Ub1N0cihzeW1ib2wpOyAvLyB3aWxsIHRocm93IGlmIG5vdCBhIHN5bWJvbFxuXG5cdGlmIChnZXRJbmZlcnJlZE5hbWUpIHtcblx0XHR2YXIgbmFtZSA9IGdldEluZmVycmVkTmFtZShzeW1ib2wpO1xuXHRcdGlmIChuYW1lID09PSAnJykgeyByZXR1cm47IH1cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRyZXR1cm4gbmFtZS5zbGljZSgxLCAtMSk7IC8vIG5hbWUuc2xpY2UoJ1snLmxlbmd0aCwgLSddJy5sZW5ndGgpO1xuXHR9XG5cblx0dmFyIGRlc2MgPSBzdHIuc2xpY2UoNywgLTEpOyAvLyBzdHIuc2xpY2UoJ1N5bWJvbCgnLmxlbmd0aCwgLScpJy5sZW5ndGgpO1xuXHRpZiAoZGVzYykge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdHJldHVybiBkZXNjO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkT2JqZWN0ID0gR2V0SW50cmluc2ljKCclT2JqZWN0JScpO1xuXG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4vUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvb2JqZWN0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9PYmplY3QodmFsdWUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdHJldHVybiAkT2JqZWN0KHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjEwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihvcHRNZXNzYWdlIHx8ICgnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSkpO1xuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBwb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBnZXRJbmZlcnJlZE5hbWUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2dldEluZmVycmVkTmFtZScpO1xuXG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgc2V0UHJvdG8gPSBPYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmVHZXR0ZXIoZ2V0dGVyKSB7XG5cdGRQKFN5bWJvbC5wcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0Z2V0OiBnZXR0ZXJcblx0fSk7XG59O1xuXG52YXIgc2hpbUdsb2JhbCA9IGZ1bmN0aW9uIHNoaW1HbG9iYWxTeW1ib2woZ2V0dGVyKSB7XG5cdHZhciBvcmlnU3ltID0gRnVuY3Rpb24uYXBwbHkuYmluZChTeW1ib2wpO1xuXHR2YXIgZW1wdHlTdHJpbmdzID0gT2JqZWN0LmNyZWF0ZSA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblx0dmFyIFN5bU5ldyA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcblx0XHR2YXIgc3ltID0gb3JpZ1N5bSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gPT09ICcnKSB7XG5cdFx0XHRlbXB0eVN0cmluZ3Nbc3ltXSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBzeW07XG5cdH07XG5cdFN5bU5ldy5wcm90b3R5cGUgPSBTeW1ib2wucHJvdG90eXBlO1xuXHRzZXRQcm90byhTeW1OZXcsIFN5bWJvbCk7XG5cdFN5bWJvbCA9IFN5bU5ldzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uYXRpdmUtcmVhc3NpZ24sIG5vLWdsb2JhbC1hc3NpZ25cblxuXHR2YXIgYm91bmRHZXR0ZXIgPSBGdW5jdGlvbi5jYWxsLmJpbmQoZ2V0dGVyKTtcblx0dmFyIHdyYXBwZWRHZXR0ZXIgPSBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcblx0XHQvKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAwICovXG5cdFx0dmFyIHN5bWJvbERlc2NyaXB0aW9uID0gYm91bmRHZXR0ZXIodGhpcyk7XG5cdFx0aWYgKGVtcHR5U3RyaW5nc1t0aGlzXSkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHRyZXR1cm4gc3ltYm9sRGVzY3JpcHRpb247XG5cdH07XG5cdGRlZmluZSh3cmFwcGVkR2V0dGVyKTtcblx0cmV0dXJuIHdyYXBwZWRHZXR0ZXI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1TeW1ib2xEZXNjcmlwdGlvbigpIHtcblx0aWYgKCFoYXNTeW1ib2xzKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHZhciBkZXNjID0gZ09QRChTeW1ib2wucHJvdG90eXBlLCAnZGVzY3JpcHRpb24nKTtcblx0dmFyIGdldHRlciA9IHBvbHlmaWxsKCk7XG5cdHZhciBpc01pc3NpbmcgPSAhZGVzYyB8fCB0eXBlb2YgZGVzYy5nZXQgIT09ICdmdW5jdGlvbic7XG5cdHZhciBpc0Jyb2tlbiA9ICFpc01pc3NpbmcgJiYgKHR5cGVvZiBTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHwgU3ltYm9sKCcnKS5kZXNjcmlwdGlvbiAhPT0gJycpO1xuXHRpZiAoaXNNaXNzaW5nIHx8IGlzQnJva2VuKSB7XG5cdFx0aWYgKCFnZXRJbmZlcnJlZE5hbWUpIHtcblx0XHRcdHJldHVybiBzaGltR2xvYmFsKGdldHRlcik7XG5cdFx0fVxuXHRcdGRlZmluZShnZXR0ZXIpO1xuXHR9XG5cdHJldHVybiBnZXR0ZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHknKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyAvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5b3J0aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgc3VjY2VzcyA9IENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKTtcblx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgZGF0YSBwcm9wZXJ0eScpO1xuXHR9XG5cdHJldHVybiBzdWNjZXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCcuL1RvSW50ZWdlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdHZhciBsZW4gPSBUb0ludGVnZXIoYXJndW1lbnQpO1xuXHRpZiAobGVuIDw9IDApIHsgcmV0dXJuIDA7IH0gLy8gaW5jbHVkZXMgY29udmVydGluZyAtMCB0byArMFxuXHRpZiAobGVuID4gTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gTUFYX1NBRkVfSU5URUdFUjsgfVxuXHRyZXR1cm4gbGVuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFycmF5TWV0aG9kQm94ZXNQcm9wZXJseSA9IHJlcXVpcmUoJ2VzLWFycmF5LW1ldGhvZC1ib3hlcy1wcm9wZXJseScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHZhciBtZXRob2QgPSBBcnJheS5wcm90b3R5cGUubWFwO1xuXHRyZXR1cm4gYXJyYXlNZXRob2RCb3hlc1Byb3Blcmx5KG1ldGhvZCkgPyBtZXRob2QgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLThcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHggPT09IG51bGwpIHtcblx0XHRyZXR1cm4gJ051bGwnO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiAnT2JqZWN0Jztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG5cdFx0cmV0dXJuICdOdW1iZXInO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0cmV0dXJuICdCb29sZWFuJztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuICdTdHJpbmcnO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodmFsdWUsIGRvbmUpIHtcblx0aWYgKFR5cGUoZG9uZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGRvbmUpIGlzIG5vdCBCb29sZWFuJyk7XG5cdH1cblx0cmV0dXJuIHtcblx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0ZG9uZTogZG9uZVxuXHR9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltUHJvbWlzZUZpbmFsbHkoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFByb21pc2UucHJvdG90eXBlLCB7ICdmaW5hbGx5JzogcG9seWZpbGwgfSwge1xuXHRcdCdmaW5hbGx5JzogZnVuY3Rpb24gdGVzdEZpbmFsbHkoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi9jYWxsQm91bmQnKTtcblxudmFyICRpdGVyYXRvciA9IEdldEludHJpbnNpYygnJVN5bWJvbC5pdGVyYXRvciUnLCB0cnVlKTtcbnZhciAkc3RyaW5nU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRJdGVyYXRvck1ldGhvZChFUywgaXRlcmFibGUpIHtcblx0dmFyIHVzaW5nSXRlcmF0b3I7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0dXNpbmdJdGVyYXRvciA9IEVTLkdldE1ldGhvZChpdGVyYWJsZSwgJGl0ZXJhdG9yKTtcblx0fSBlbHNlIGlmIChFUy5Jc0FycmF5KGl0ZXJhYmxlKSkge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IC0xO1xuXHRcdFx0dmFyIGFyciA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkb25lOiBpID49IGFyci5sZW5ndGgsXG5cdFx0XHRcdFx0XHR2YWx1ZTogYXJyW2ldXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2UgaWYgKEVTLlR5cGUoaXRlcmFibGUpID09PSAnU3RyaW5nJykge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIG5leHRJbmRleCA9IEVTLkFkdmFuY2VTdHJpbmdJbmRleChpdGVyYWJsZSwgaSwgdHJ1ZSk7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gJHN0cmluZ1NsaWNlKGl0ZXJhYmxlLCBpLCBuZXh0SW5kZXgpO1xuXHRcdFx0XHRcdGkgPSBuZXh0SW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRvbmU6IG5leHRJbmRleCA+IGl0ZXJhYmxlLmxlbmd0aCxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gdXNpbmdJdGVyYXRvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWdFeHAucHJvdG90eXBlLmZsYWdzIHJlcXVpcmVzIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycycpO1xuXHR9XG5cdGlmICgoL2EvbWlnKS5mbGFncyA9PT0gJ2dpbScpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9ICRnT1BEKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpO1xuXHRcdGlmIChkZXNjcmlwdG9yICYmIHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKC9hLykuZG90QWxsID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHJldHVybiBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZXM2LXNoaW0nKTtcblxucmVxdWlyZSgnZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvc2hpbScpKCk7XG5cbnJlcXVpcmUoJy4vZXMyMDE2Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcbnZhciAkcHVzaCA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnB1c2gnKTtcblxudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyIG9iamVjdEdldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAob2JqZWN0c1tpXS5rZXkgPT09IGtleSkge1xuXHRcdFx0cmV0dXJuIG9iamVjdHNbaV0udmFsdWU7XG5cdFx0fVxuXHR9XG59O1xudmFyIG9iamVjdFNldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChvYmplY3RzW2ldLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRvYmplY3RzW2ldLnZhbHVlID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblx0JHB1c2gob2JqZWN0cywge1xuXHRcdGtleToga2V5LFxuXHRcdHZhbHVlOiB2YWx1ZVxuXHR9KTtcbn07XG52YXIgb2JqZWN0SGFzID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAob2JqZWN0c1tpXS5rZXkgPT09IGtleSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdHZhciAkd207XG5cdHZhciAkbTtcblx0dmFyICRvO1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEdldCgkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIG9iamVjdEdldCgkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwSGFzKCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0SGFzKCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoISR3bSkge1xuXHRcdFx0XHRcdCR3bSA9IG5ldyAkV2Vha01hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCR3ZWFrTWFwU2V0KCR3bSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbWFwU2V0KCRtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghJG8pIHtcblx0XHRcdFx0XHQkbyA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9iamVjdFNldCgkbywga2V5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJWYWx1ZSA9IFN0cmluZy5wcm90b3R5cGUudmFsdWVPZjtcbnZhciB0cnlTdHJpbmdPYmplY3QgPSBmdW5jdGlvbiB0cnlTdHJpbmdPYmplY3QodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRzdHJWYWx1ZS5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgc3RyQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlTdHJpbmdPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IHN0ckNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgPj0gMCA/IDEgOiAtMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJztcblxudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG52YXIgaXNEYXRlID0gcmVxdWlyZSgnaXMtZGF0ZS1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJ2lzLXN5bWJvbCcpO1xuXG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xuXHRpZiAodHlwZW9mIE8gPT09ICd1bmRlZmluZWQnIHx8IE8gPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2Qgb24gJyArIE8pO1xuXHR9XG5cdGlmICh0eXBlb2YgaGludCAhPT0gJ3N0cmluZycgfHwgKGhpbnQgIT09ICdudW1iZXInICYmIGhpbnQgIT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2hpbnQgbXVzdCBiZSBcInN0cmluZ1wiIG9yIFwibnVtYmVyXCInKTtcblx0fVxuXHR2YXIgbWV0aG9kTmFtZXMgPSBoaW50ID09PSAnc3RyaW5nJyA/IFsndG9TdHJpbmcnLCAndmFsdWVPZiddIDogWyd2YWx1ZU9mJywgJ3RvU3RyaW5nJ107XG5cdHZhciBtZXRob2QsIHJlc3VsdCwgaTtcblx0Zm9yIChpID0gMDsgaSA8IG1ldGhvZE5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0bWV0aG9kID0gT1ttZXRob2ROYW1lc1tpXV07XG5cdFx0aWYgKGlzQ2FsbGFibGUobWV0aG9kKSkge1xuXHRcdFx0cmVzdWx0ID0gbWV0aG9kLmNhbGwoTyk7XG5cdFx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBkZWZhdWx0IHZhbHVlJyk7XG59O1xuXG52YXIgR2V0TWV0aG9kID0gZnVuY3Rpb24gR2V0TWV0aG9kKE8sIFApIHtcblx0dmFyIGZ1bmMgPSBPW1BdO1xuXHRpZiAoZnVuYyAhPT0gbnVsbCAmJiB0eXBlb2YgZnVuYyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoIWlzQ2FsbGFibGUoZnVuYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoZnVuYyArICcgcmV0dXJuZWQgZm9yIHByb3BlcnR5ICcgKyBQICsgJyBvZiBvYmplY3QgJyArIE8gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHRcdHJldHVybiBmdW5jO1xuXHR9XG5cdHJldHVybiB2b2lkIDA7XG59O1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcblx0aWYgKGlzUHJpbWl0aXZlKGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXHR2YXIgaGludCA9ICdkZWZhdWx0Jztcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0aWYgKGFyZ3VtZW50c1sxXSA9PT0gU3RyaW5nKSB7XG5cdFx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdFx0fSBlbHNlIGlmIChhcmd1bWVudHNbMV0gPT09IE51bWJlcikge1xuXHRcdFx0aGludCA9ICdudW1iZXInO1xuXHRcdH1cblx0fVxuXG5cdHZhciBleG90aWNUb1ByaW07XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0aWYgKFN5bWJvbC50b1ByaW1pdGl2ZSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCBTeW1ib2wudG9QcmltaXRpdmUpO1xuXHRcdH0gZWxzZSBpZiAoaXNTeW1ib2woaW5wdXQpKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2Y7XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgZXhvdGljVG9QcmltICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG5cdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYWJsZSB0byBjb252ZXJ0IGV4b3RpYyBvYmplY3QgdG8gcHJpbWl0aXZlJyk7XG5cdH1cblx0aWYgKGhpbnQgPT09ICdkZWZhdWx0JyAmJiAoaXNEYXRlKGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpKSB7XG5cdFx0aGludCA9ICdzdHJpbmcnO1xuXHR9XG5cdHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSAnZGVmYXVsdCcgPyAnbnVtYmVyJyA6IGhpbnQpO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgVzNDIFNPRlRXQVJFIEFORCBET0NVTUVOVCBOT1RJQ0UgQU5EIExJQ0VOU0UuXG4gKlxuICogIGh0dHBzOi8vd3d3LnczLm9yZy9Db25zb3J0aXVtL0xlZ2FsLzIwMTUvY29weXJpZ2h0LXNvZnR3YXJlLWFuZC1kb2N1bWVudFxuICpcbiAqL1xuXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIEV4aXRzIGVhcmx5IGlmIGFsbCBJbnRlcnNlY3Rpb25PYnNlcnZlciBhbmQgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVxuLy8gZmVhdHVyZXMgYXJlIG5hdGl2ZWx5IHN1cHBvcnRlZC5cbmlmICgnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyAmJlxuICAgICdJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5JyBpbiB3aW5kb3cgJiZcbiAgICAnaW50ZXJzZWN0aW9uUmF0aW8nIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSkge1xuXG4gIC8vIE1pbmltYWwgcG9seWZpbGwgZm9yIEVkZ2UgMTUncyBsYWNrIG9mIGBpc0ludGVyc2VjdGluZ2BcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdzNjL0ludGVyc2VjdGlvbk9ic2VydmVyL2lzc3Vlcy8yMTFcbiAgaWYgKCEoJ2lzSW50ZXJzZWN0aW5nJyBpbiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSxcbiAgICAgICdpc0ludGVyc2VjdGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA+IDA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuO1xufVxuXG5cbi8qKlxuICogQW4gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkuIFRoaXMgcmVnaXN0cnkgZXhpc3RzIHRvIGhvbGQgYSBzdHJvbmdcbiAqIHJlZmVyZW5jZSB0byBJbnRlcnNlY3Rpb25PYnNlcnZlciBpbnN0YW5jZXMgY3VycmVudGx5IG9ic2VydmluZyBhIHRhcmdldFxuICogZWxlbWVudC4gV2l0aG91dCB0aGlzIHJlZ2lzdHJ5LCBpbnN0YW5jZXMgd2l0aG91dCBhbm90aGVyIHJlZmVyZW5jZSBtYXkgYmVcbiAqIGdhcmJhZ2UgY29sbGVjdGVkLlxuICovXG52YXIgcmVnaXN0cnkgPSBbXTtcblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IGNvbnN0cnVjdG9yLlxuICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNpbnRlcnNlY3Rpb24tb2JzZXJ2ZXItZW50cnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbnRyeSBBIGRpY3Rpb25hcnkgb2YgaW5zdGFuY2UgcHJvcGVydGllcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KGVudHJ5KSB7XG4gIHRoaXMudGltZSA9IGVudHJ5LnRpbWU7XG4gIHRoaXMudGFyZ2V0ID0gZW50cnkudGFyZ2V0O1xuICB0aGlzLnJvb3RCb3VuZHMgPSBlbnRyeS5yb290Qm91bmRzO1xuICB0aGlzLmJvdW5kaW5nQ2xpZW50UmVjdCA9IGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgdGhpcy5pbnRlcnNlY3Rpb25SZWN0ID0gZW50cnkuaW50ZXJzZWN0aW9uUmVjdCB8fCBnZXRFbXB0eVJlY3QoKTtcbiAgdGhpcy5pc0ludGVyc2VjdGluZyA9ICEhZW50cnkuaW50ZXJzZWN0aW9uUmVjdDtcblxuICAvLyBDYWxjdWxhdGVzIHRoZSBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gIHZhciB0YXJnZXRSZWN0ID0gdGhpcy5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gIHZhciB0YXJnZXRBcmVhID0gdGFyZ2V0UmVjdC53aWR0aCAqIHRhcmdldFJlY3QuaGVpZ2h0O1xuICB2YXIgaW50ZXJzZWN0aW9uUmVjdCA9IHRoaXMuaW50ZXJzZWN0aW9uUmVjdDtcbiAgdmFyIGludGVyc2VjdGlvbkFyZWEgPSBpbnRlcnNlY3Rpb25SZWN0LndpZHRoICogaW50ZXJzZWN0aW9uUmVjdC5oZWlnaHQ7XG5cbiAgLy8gU2V0cyBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gIGlmICh0YXJnZXRBcmVhKSB7XG4gICAgLy8gUm91bmQgdGhlIGludGVyc2VjdGlvbiByYXRpbyB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGlzc3VlczpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL0ludGVyc2VjdGlvbk9ic2VydmVyL2lzc3Vlcy8zMjRcbiAgICB0aGlzLmludGVyc2VjdGlvblJhdGlvID0gTnVtYmVyKChpbnRlcnNlY3Rpb25BcmVhIC8gdGFyZ2V0QXJlYSkudG9GaXhlZCg0KSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgYXJlYSBpcyB6ZXJvIGFuZCBpcyBpbnRlcnNlY3RpbmcsIHNldHMgdG8gMSwgb3RoZXJ3aXNlIHRvIDBcbiAgICB0aGlzLmludGVyc2VjdGlvblJhdGlvID0gdGhpcy5pc0ludGVyc2VjdGluZyA/IDEgOiAwO1xuICB9XG59XG5cblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgY29uc3RydWN0b3IuXG4gKiBodHRwczovL3czYy5naXRodWIuaW8vSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvI2ludGVyc2VjdGlvbi1vYnNlcnZlci1pbnRlcmZhY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkIGFmdGVyIGludGVyc2VjdGlvblxuICogICAgIGNoYW5nZXMgaGF2ZSBxdWV1ZWQuIFRoZSBmdW5jdGlvbiBpcyBub3QgaW52b2tlZCBpZiB0aGUgcXVldWUgaGFzXG4gKiAgICAgYmVlbiBlbXB0aWVkIGJ5IGNhbGxpbmcgdGhlIGB0YWtlUmVjb3Jkc2AgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdF9vcHRpb25zKSB7XG5cbiAgdmFyIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucm9vdCAmJiBvcHRpb25zLnJvb3Qubm9kZVR5cGUgIT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncm9vdCBtdXN0IGJlIGFuIEVsZW1lbnQnKTtcbiAgfVxuXG4gIC8vIEJpbmRzIGFuZCB0aHJvdHRsZXMgYHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9uc2AuXG4gIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyA9IHRocm90dGxlKFxuICAgICAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLmJpbmQodGhpcyksIHRoaXMuVEhST1RUTEVfVElNRU9VVCk7XG5cbiAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzLlxuICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMgPSBbXTtcbiAgdGhpcy5fcXVldWVkRW50cmllcyA9IFtdO1xuICB0aGlzLl9yb290TWFyZ2luVmFsdWVzID0gdGhpcy5fcGFyc2VSb290TWFyZ2luKG9wdGlvbnMucm9vdE1hcmdpbik7XG5cbiAgLy8gUHVibGljIHByb3BlcnRpZXMuXG4gIHRoaXMudGhyZXNob2xkcyA9IHRoaXMuX2luaXRUaHJlc2hvbGRzKG9wdGlvbnMudGhyZXNob2xkKTtcbiAgdGhpcy5yb290ID0gb3B0aW9ucy5yb290IHx8IG51bGw7XG4gIHRoaXMucm9vdE1hcmdpbiA9IHRoaXMuX3Jvb3RNYXJnaW5WYWx1ZXMubWFwKGZ1bmN0aW9uKG1hcmdpbikge1xuICAgIHJldHVybiBtYXJnaW4udmFsdWUgKyBtYXJnaW4udW5pdDtcbiAgfSkuam9pbignICcpO1xufVxuXG5cbi8qKlxuICogVGhlIG1pbmltdW0gaW50ZXJ2YWwgd2l0aGluIHdoaWNoIHRoZSBkb2N1bWVudCB3aWxsIGJlIGNoZWNrZWQgZm9yXG4gKiBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLlRIUk9UVExFX1RJTUVPVVQgPSAxMDA7XG5cblxuLyoqXG4gKiBUaGUgZnJlcXVlbmN5IGluIHdoaWNoIHRoZSBwb2x5ZmlsbCBwb2xscyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKiB0aGlzIGNhbiBiZSB1cGRhdGVkIG9uIGEgcGVyIGluc3RhbmNlIGJhc2lzIGFuZCBtdXN0IGJlIHNldCBwcmlvciB0b1xuICogY2FsbGluZyBgb2JzZXJ2ZWAgb24gdGhlIGZpcnN0IHRhcmdldC5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLlBPTExfSU5URVJWQUwgPSBudWxsO1xuXG4vKipcbiAqIFVzZSBhIG11dGF0aW9uIG9ic2VydmVyIG9uIHRoZSByb290IGVsZW1lbnRcbiAqIHRvIGRldGVjdCBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLlVTRV9NVVRBVElPTl9PQlNFUlZFUiA9IHRydWU7XG5cblxuLyoqXG4gKiBTdGFydHMgb2JzZXJ2aW5nIGEgdGFyZ2V0IGVsZW1lbnQgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzIGJhc2VkIG9uXG4gKiB0aGUgdGhyZXNob2xkcyB2YWx1ZXMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCBUaGUgRE9NIGVsZW1lbnQgdG8gb2JzZXJ2ZS5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdmFyIGlzVGFyZ2V0QWxyZWFkeU9ic2VydmVkID0gdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBpdGVtLmVsZW1lbnQgPT0gdGFyZ2V0O1xuICB9KTtcblxuICBpZiAoaXNUYXJnZXRBbHJlYWR5T2JzZXJ2ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoISh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVUeXBlID09IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBFbGVtZW50Jyk7XG4gIH1cblxuICB0aGlzLl9yZWdpc3Rlckluc3RhbmNlKCk7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5wdXNoKHtlbGVtZW50OiB0YXJnZXQsIGVudHJ5OiBudWxsfSk7XG4gIHRoaXMuX21vbml0b3JJbnRlcnNlY3Rpb25zKCk7XG4gIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucygpO1xufTtcblxuXG4vKipcbiAqIFN0b3BzIG9ic2VydmluZyBhIHRhcmdldCBlbGVtZW50IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBET00gZWxlbWVudCB0byBvYnNlcnZlLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cyA9XG4gICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcblxuICAgIHJldHVybiBpdGVtLmVsZW1lbnQgIT0gdGFyZ2V0O1xuICB9KTtcbiAgaWYgKCF0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fdW5tb25pdG9ySW50ZXJzZWN0aW9ucygpO1xuICAgIHRoaXMuX3VucmVnaXN0ZXJJbnN0YW5jZSgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogU3RvcHMgb2JzZXJ2aW5nIGFsbCB0YXJnZXQgZWxlbWVudHMgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMgPSBbXTtcbiAgdGhpcy5fdW5tb25pdG9ySW50ZXJzZWN0aW9ucygpO1xuICB0aGlzLl91bnJlZ2lzdGVySW5zdGFuY2UoKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFueSBxdWV1ZSBlbnRyaWVzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4gcmVwb3J0ZWQgdG8gdGhlXG4gKiBjYWxsYmFjayBhbmQgY2xlYXJzIHRoZSBxdWV1ZS4gVGhpcyBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZVxuICogY2FsbGJhY2sgdG8gb2J0YWluIHRoZSBhYnNvbHV0ZSBtb3N0IHVwLXRvLWRhdGUgaW50ZXJzZWN0aW9uIGluZm9ybWF0aW9uLlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBjdXJyZW50bHkgcXVldWVkIGVudHJpZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS50YWtlUmVjb3JkcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVjb3JkcyA9IHRoaXMuX3F1ZXVlZEVudHJpZXMuc2xpY2UoKTtcbiAgdGhpcy5fcXVldWVkRW50cmllcyA9IFtdO1xuICByZXR1cm4gcmVjb3Jkcztcbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIHRoZSB0aHJlc2hvbGQgdmFsdWUgZnJvbSB0aGUgdXNlciBjb25maWd1cmF0aW9uIG9iamVjdCBhbmRcbiAqIHJldHVybnMgYSBzb3J0ZWQgYXJyYXkgb2YgdW5pcXVlIHRocmVzaG9sZCB2YWx1ZXMuIElmIGEgdmFsdWUgaXMgbm90XG4gKiBiZXR3ZWVuIDAgYW5kIDEgYW5kIGVycm9yIGlzIHRocm93bi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fG51bWJlcj19IG9wdF90aHJlc2hvbGQgQW4gb3B0aW9uYWwgdGhyZXNob2xkIHZhbHVlIG9yXG4gKiAgICAgYSBsaXN0IG9mIHRocmVzaG9sZCB2YWx1ZXMsIGRlZmF1bHRpbmcgdG8gWzBdLlxuICogQHJldHVybiB7QXJyYXl9IEEgc29ydGVkIGxpc3Qgb2YgdW5pcXVlIGFuZCB2YWxpZCB0aHJlc2hvbGQgdmFsdWVzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2luaXRUaHJlc2hvbGRzID0gZnVuY3Rpb24ob3B0X3RocmVzaG9sZCkge1xuICB2YXIgdGhyZXNob2xkID0gb3B0X3RocmVzaG9sZCB8fCBbMF07XG4gIGlmICghQXJyYXkuaXNBcnJheSh0aHJlc2hvbGQpKSB0aHJlc2hvbGQgPSBbdGhyZXNob2xkXTtcblxuICByZXR1cm4gdGhyZXNob2xkLnNvcnQoKS5maWx0ZXIoZnVuY3Rpb24odCwgaSwgYSkge1xuICAgIGlmICh0eXBlb2YgdCAhPSAnbnVtYmVyJyB8fCBpc05hTih0KSB8fCB0IDwgMCB8fCB0ID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aHJlc2hvbGQgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEgaW5jbHVzaXZlbHknKTtcbiAgICB9XG4gICAgcmV0dXJuIHQgIT09IGFbaSAtIDFdO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIHRoZSByb290TWFyZ2luIHZhbHVlIGZyb20gdGhlIHVzZXIgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBmb3VyIG1hcmdpbiB2YWx1ZXMgYXMgYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAqIHRoZSB2YWx1ZSBhbmQgdW5pdCBwcm9wZXJ0aWVzLiBJZiBhbnkgb2YgdGhlIHZhbHVlcyBhcmUgbm90IHByb3Blcmx5XG4gKiBmb3JtYXR0ZWQgb3IgdXNlIGEgdW5pdCBvdGhlciB0aGFuIHB4IG9yICUsIGFuZCBlcnJvciBpcyB0aHJvd24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfcm9vdE1hcmdpbiBBbiBvcHRpb25hbCByb290TWFyZ2luIHZhbHVlLFxuICogICAgIGRlZmF1bHRpbmcgdG8gJzBweCcuXG4gKiBAcmV0dXJuIHtBcnJheTxPYmplY3Q+fSBBbiBhcnJheSBvZiBtYXJnaW4gb2JqZWN0cyB3aXRoIHRoZSBrZXlzXG4gKiAgICAgdmFsdWUgYW5kIHVuaXQuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcGFyc2VSb290TWFyZ2luID0gZnVuY3Rpb24ob3B0X3Jvb3RNYXJnaW4pIHtcbiAgdmFyIG1hcmdpblN0cmluZyA9IG9wdF9yb290TWFyZ2luIHx8ICcwcHgnO1xuICB2YXIgbWFyZ2lucyA9IG1hcmdpblN0cmluZy5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbihtYXJnaW4pIHtcbiAgICB2YXIgcGFydHMgPSAvXigtP1xcZCpcXC4/XFxkKykocHh8JSkkLy5leGVjKG1hcmdpbik7XG4gICAgaWYgKCFwYXJ0cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290TWFyZ2luIG11c3QgYmUgc3BlY2lmaWVkIGluIHBpeGVscyBvciBwZXJjZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiB7dmFsdWU6IHBhcnNlRmxvYXQocGFydHNbMV0pLCB1bml0OiBwYXJ0c1syXX07XG4gIH0pO1xuXG4gIC8vIEhhbmRsZXMgc2hvcnRoYW5kLlxuICBtYXJnaW5zWzFdID0gbWFyZ2luc1sxXSB8fCBtYXJnaW5zWzBdO1xuICBtYXJnaW5zWzJdID0gbWFyZ2luc1syXSB8fCBtYXJnaW5zWzBdO1xuICBtYXJnaW5zWzNdID0gbWFyZ2luc1szXSB8fCBtYXJnaW5zWzFdO1xuXG4gIHJldHVybiBtYXJnaW5zO1xufTtcblxuXG4vKipcbiAqIFN0YXJ0cyBwb2xsaW5nIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBpZiB0aGUgcG9sbGluZyBpcyBub3QgYWxyZWFkeVxuICogaGFwcGVuaW5nLCBhbmQgaWYgdGhlIHBhZ2UncyB2aXNpYmlsaXR5IHN0YXRlIGlzIHZpc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX21vbml0b3JJbnRlcnNlY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMpIHtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyA9IHRydWU7XG5cbiAgICAvLyBJZiBhIHBvbGwgaW50ZXJ2YWwgaXMgc2V0LCB1c2UgcG9sbGluZyBpbnN0ZWFkIG9mIGxpc3RlbmluZyB0b1xuICAgIC8vIHJlc2l6ZSBhbmQgc2Nyb2xsIGV2ZW50cyBvciBET00gbXV0YXRpb25zLlxuICAgIGlmICh0aGlzLlBPTExfSU5URVJWQUwpIHtcbiAgICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnZhbCA9IHNldEludGVydmFsKFxuICAgICAgICAgIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdGhpcy5QT0xMX0lOVEVSVkFMKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhZGRFdmVudCh3aW5kb3csICdyZXNpemUnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuICAgICAgYWRkRXZlbnQoZG9jdW1lbnQsICdzY3JvbGwnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuXG4gICAgICBpZiAodGhpcy5VU0VfTVVUQVRJT05fT0JTRVJWRVIgJiYgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgICB0aGlzLl9kb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuX2RvbU9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogU3RvcHMgcG9sbGluZyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VubW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX21vbml0b3JpbmdJbnRlcnNlY3Rpb25zKSB7XG4gICAgdGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMgPSBmYWxzZTtcblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fbW9uaXRvcmluZ0ludGVydmFsKTtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJ2YWwgPSBudWxsO1xuXG4gICAgcmVtb3ZlRXZlbnQod2luZG93LCAncmVzaXplJywgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0cnVlKTtcbiAgICByZW1vdmVFdmVudChkb2N1bWVudCwgJ3Njcm9sbCcsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG5cbiAgICBpZiAodGhpcy5fZG9tT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX2RvbU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuX2RvbU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTY2FucyBlYWNoIG9ic2VydmF0aW9uIHRhcmdldCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMgYW5kIGFkZHMgdGhlbVxuICogdG8gdGhlIGludGVybmFsIGVudHJpZXMgcXVldWUuIElmIG5ldyBlbnRyaWVzIGFyZSBmb3VuZCwgaXRcbiAqIHNjaGVkdWxlcyB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gIHZhciByb290SXNJbkRvbSA9IHRoaXMuX3Jvb3RJc0luRG9tKCk7XG4gIHZhciByb290UmVjdCA9IHJvb3RJc0luRG9tID8gdGhpcy5fZ2V0Um9vdFJlY3QoKSA6IGdldEVtcHR5UmVjdCgpO1xuXG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB2YXIgdGFyZ2V0ID0gaXRlbS5lbGVtZW50O1xuICAgIHZhciB0YXJnZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRhcmdldCk7XG4gICAgdmFyIHJvb3RDb250YWluc1RhcmdldCA9IHRoaXMuX3Jvb3RDb250YWluc1RhcmdldCh0YXJnZXQpO1xuICAgIHZhciBvbGRFbnRyeSA9IGl0ZW0uZW50cnk7XG4gICAgdmFyIGludGVyc2VjdGlvblJlY3QgPSByb290SXNJbkRvbSAmJiByb290Q29udGFpbnNUYXJnZXQgJiZcbiAgICAgICAgdGhpcy5fY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24odGFyZ2V0LCByb290UmVjdCk7XG5cbiAgICB2YXIgbmV3RW50cnkgPSBpdGVtLmVudHJ5ID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkoe1xuICAgICAgdGltZTogbm93KCksXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGJvdW5kaW5nQ2xpZW50UmVjdDogdGFyZ2V0UmVjdCxcbiAgICAgIHJvb3RCb3VuZHM6IHJvb3RSZWN0LFxuICAgICAgaW50ZXJzZWN0aW9uUmVjdDogaW50ZXJzZWN0aW9uUmVjdFxuICAgIH0pO1xuXG4gICAgaWYgKCFvbGRFbnRyeSkge1xuICAgICAgdGhpcy5fcXVldWVkRW50cmllcy5wdXNoKG5ld0VudHJ5KTtcbiAgICB9IGVsc2UgaWYgKHJvb3RJc0luRG9tICYmIHJvb3RDb250YWluc1RhcmdldCkge1xuICAgICAgLy8gSWYgdGhlIG5ldyBlbnRyeSBpbnRlcnNlY3Rpb24gcmF0aW8gaGFzIGNyb3NzZWQgYW55IG9mIHRoZVxuICAgICAgLy8gdGhyZXNob2xkcywgYWRkIGEgbmV3IGVudHJ5LlxuICAgICAgaWYgKHRoaXMuX2hhc0Nyb3NzZWRUaHJlc2hvbGQob2xkRW50cnksIG5ld0VudHJ5KSkge1xuICAgICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgcm9vdCBpcyBub3QgaW4gdGhlIERPTSBvciB0YXJnZXQgaXMgbm90IGNvbnRhaW5lZCB3aXRoaW5cbiAgICAgIC8vIHJvb3QgYnV0IHRoZSBwcmV2aW91cyBlbnRyeSBmb3IgdGhpcyB0YXJnZXQgaGFkIGFuIGludGVyc2VjdGlvbixcbiAgICAgIC8vIGFkZCBhIG5ldyByZWNvcmQgaW5kaWNhdGluZyByZW1vdmFsLlxuICAgICAgaWYgKG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMucHVzaChuZXdFbnRyeSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICBpZiAodGhpcy5fcXVldWVkRW50cmllcy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFjayh0aGlzLnRha2VSZWNvcmRzKCksIHRoaXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIHRhcmdldCBhbmQgcm9vdCByZWN0IGNvbXB1dGVzIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGVuXG4gKiBmb2xsb3dpbmcgdGhlIGFsZ29yaXRobSBpbiB0aGUgc3BlYy5cbiAqIFRPRE8ocGhpbGlwd2FsdG9uKTogYXQgdGhpcyB0aW1lIGNsaXAtcGF0aCBpcyBub3QgY29uc2lkZXJlZC5cbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8jY2FsY3VsYXRlLWludGVyc2VjdGlvbi1yZWN0LWFsZ29cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByb290UmVjdCBUaGUgYm91bmRpbmcgcmVjdCBvZiB0aGUgcm9vdCBhZnRlciBiZWluZ1xuICogICAgIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHJldHVybiB7P09iamVjdH0gVGhlIGZpbmFsIGludGVyc2VjdGlvbiByZWN0IG9iamVjdCBvciB1bmRlZmluZWQgaWYgbm9cbiAqICAgICBpbnRlcnNlY3Rpb24gaXMgZm91bmQuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2NvbXB1dGVUYXJnZXRBbmRSb290SW50ZXJzZWN0aW9uID1cbiAgICBmdW5jdGlvbih0YXJnZXQsIHJvb3RSZWN0KSB7XG5cbiAgLy8gSWYgdGhlIGVsZW1lbnQgaXNuJ3QgZGlzcGxheWVkLCBhbiBpbnRlcnNlY3Rpb24gY2FuJ3QgaGFwcGVuLlxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5kaXNwbGF5ID09ICdub25lJykgcmV0dXJuO1xuXG4gIHZhciB0YXJnZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHRhcmdldCk7XG4gIHZhciBpbnRlcnNlY3Rpb25SZWN0ID0gdGFyZ2V0UmVjdDtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudE5vZGUodGFyZ2V0KTtcbiAgdmFyIGF0Um9vdCA9IGZhbHNlO1xuXG4gIHdoaWxlICghYXRSb290KSB7XG4gICAgdmFyIHBhcmVudFJlY3QgPSBudWxsO1xuICAgIHZhciBwYXJlbnRDb21wdXRlZFN0eWxlID0gcGFyZW50Lm5vZGVUeXBlID09IDEgP1xuICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpIDoge307XG5cbiAgICAvLyBJZiB0aGUgcGFyZW50IGlzbid0IGRpc3BsYXllZCwgYW4gaW50ZXJzZWN0aW9uIGNhbid0IGhhcHBlbi5cbiAgICBpZiAocGFyZW50Q29tcHV0ZWRTdHlsZS5kaXNwbGF5ID09ICdub25lJykgcmV0dXJuO1xuXG4gICAgaWYgKHBhcmVudCA9PSB0aGlzLnJvb3QgfHwgcGFyZW50ID09IGRvY3VtZW50KSB7XG4gICAgICBhdFJvb3QgPSB0cnVlO1xuICAgICAgcGFyZW50UmVjdCA9IHJvb3RSZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBub24tdmlzaWJsZSBvdmVyZmxvdywgYW5kIGl0J3Mgbm90IHRoZSA8Ym9keT5cbiAgICAgIC8vIG9yIDxodG1sPiBlbGVtZW50LCB1cGRhdGUgdGhlIGludGVyc2VjdGlvbiByZWN0LlxuICAgICAgLy8gTm90ZTogPGJvZHk+IGFuZCA8aHRtbD4gY2Fubm90IGJlIGNsaXBwZWQgdG8gYSByZWN0IHRoYXQncyBub3QgYWxzb1xuICAgICAgLy8gdGhlIGRvY3VtZW50IHJlY3QsIHNvIG5vIG5lZWQgdG8gY29tcHV0ZSBhIG5ldyBpbnRlcnNlY3Rpb24uXG4gICAgICBpZiAocGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiZcbiAgICAgICAgICBwYXJlbnQgIT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAgcGFyZW50Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyAhPSAndmlzaWJsZScpIHtcbiAgICAgICAgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGVpdGhlciBvZiB0aGUgYWJvdmUgY29uZGl0aW9uYWxzIHNldCBhIG5ldyBwYXJlbnRSZWN0LFxuICAgIC8vIGNhbGN1bGF0ZSBuZXcgaW50ZXJzZWN0aW9uIGRhdGEuXG4gICAgaWYgKHBhcmVudFJlY3QpIHtcbiAgICAgIGludGVyc2VjdGlvblJlY3QgPSBjb21wdXRlUmVjdEludGVyc2VjdGlvbihwYXJlbnRSZWN0LCBpbnRlcnNlY3Rpb25SZWN0KTtcblxuICAgICAgaWYgKCFpbnRlcnNlY3Rpb25SZWN0KSBicmVhaztcbiAgICB9XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZShwYXJlbnQpO1xuICB9XG4gIHJldHVybiBpbnRlcnNlY3Rpb25SZWN0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJvb3QgcmVjdCBhZnRlciBiZWluZyBleHBhbmRlZCBieSB0aGUgcm9vdE1hcmdpbiB2YWx1ZS5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJvb3QgcmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fZ2V0Um9vdFJlY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3RSZWN0O1xuICBpZiAodGhpcy5yb290KSB7XG4gICAgcm9vdFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5yb290KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBVc2UgPGh0bWw+Lzxib2R5PiBpbnN0ZWFkIG9mIHdpbmRvdyBzaW5jZSBzY3JvbGwgYmFycyBhZmZlY3Qgc2l6ZS5cbiAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgcm9vdFJlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IGh0bWwuY2xpZW50V2lkdGggfHwgYm9keS5jbGllbnRXaWR0aCxcbiAgICAgIHdpZHRoOiBodG1sLmNsaWVudFdpZHRoIHx8IGJvZHkuY2xpZW50V2lkdGgsXG4gICAgICBib3R0b206IGh0bWwuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0LFxuICAgICAgaGVpZ2h0OiBodG1sLmNsaWVudEhlaWdodCB8fCBib2R5LmNsaWVudEhlaWdodFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4ocm9vdFJlY3QpO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgYSByZWN0IGFuZCBleHBhbmRzIGl0IGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgVGhlIHJlY3Qgb2JqZWN0IHRvIGV4cGFuZC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJlY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4gPSBmdW5jdGlvbihyZWN0KSB7XG4gIHZhciBtYXJnaW5zID0gdGhpcy5fcm9vdE1hcmdpblZhbHVlcy5tYXAoZnVuY3Rpb24obWFyZ2luLCBpKSB7XG4gICAgcmV0dXJuIG1hcmdpbi51bml0ID09ICdweCcgPyBtYXJnaW4udmFsdWUgOlxuICAgICAgICBtYXJnaW4udmFsdWUgKiAoaSAlIDIgPyByZWN0LndpZHRoIDogcmVjdC5oZWlnaHQpIC8gMTAwO1xuICB9KTtcbiAgdmFyIG5ld1JlY3QgPSB7XG4gICAgdG9wOiByZWN0LnRvcCAtIG1hcmdpbnNbMF0sXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBtYXJnaW5zWzFdLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyBtYXJnaW5zWzJdLFxuICAgIGxlZnQ6IHJlY3QubGVmdCAtIG1hcmdpbnNbM11cbiAgfTtcbiAgbmV3UmVjdC53aWR0aCA9IG5ld1JlY3QucmlnaHQgLSBuZXdSZWN0LmxlZnQ7XG4gIG5ld1JlY3QuaGVpZ2h0ID0gbmV3UmVjdC5ib3R0b20gLSBuZXdSZWN0LnRvcDtcblxuICByZXR1cm4gbmV3UmVjdDtcbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIGFuIG9sZCBhbmQgbmV3IGVudHJ5IGFuZCByZXR1cm5zIHRydWUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICogdGhyZXNob2xkIHZhbHVlcyBoYXMgYmVlbiBjcm9zc2VkLlxuICogQHBhcmFtIHs/SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeX0gb2xkRW50cnkgVGhlIHByZXZpb3VzIGVudHJ5IGZvciBhXG4gKiAgICBwYXJ0aWN1bGFyIHRhcmdldCBlbGVtZW50IG9yIG51bGwgaWYgbm8gcHJldmlvdXMgZW50cnkgZXhpc3RzLlxuICogQHBhcmFtIHtJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5fSBuZXdFbnRyeSBUaGUgY3VycmVudCBlbnRyeSBmb3IgYVxuICogICAgcGFydGljdWxhciB0YXJnZXQgZWxlbWVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIGFueSB0aHJlc2hvbGQgaGFzIGJlZW4gY3Jvc3NlZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5faGFzQ3Jvc3NlZFRocmVzaG9sZCA9XG4gICAgZnVuY3Rpb24ob2xkRW50cnksIG5ld0VudHJ5KSB7XG5cbiAgLy8gVG8gbWFrZSBjb21wYXJpbmcgZWFzaWVyLCBhbiBlbnRyeSB0aGF0IGhhcyBhIHJhdGlvIG9mIDBcbiAgLy8gYnV0IGRvZXMgbm90IGFjdHVhbGx5IGludGVyc2VjdCBpcyBnaXZlbiBhIHZhbHVlIG9mIC0xXG4gIHZhciBvbGRSYXRpbyA9IG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nID9cbiAgICAgIG9sZEVudHJ5LmludGVyc2VjdGlvblJhdGlvIHx8IDAgOiAtMTtcbiAgdmFyIG5ld1JhdGlvID0gbmV3RW50cnkuaXNJbnRlcnNlY3RpbmcgP1xuICAgICAgbmV3RW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gfHwgMCA6IC0xO1xuXG4gIC8vIElnbm9yZSB1bmNoYW5nZWQgcmF0aW9zXG4gIGlmIChvbGRSYXRpbyA9PT0gbmV3UmF0aW8pIHJldHVybjtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGhyZXNob2xkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLnRocmVzaG9sZHNbaV07XG5cbiAgICAvLyBSZXR1cm4gdHJ1ZSBpZiBhbiBlbnRyeSBtYXRjaGVzIGEgdGhyZXNob2xkIG9yIGlmIHRoZSBuZXcgcmF0aW9cbiAgICAvLyBhbmQgdGhlIG9sZCByYXRpbyBhcmUgb24gdGhlIG9wcG9zaXRlIHNpZGVzIG9mIGEgdGhyZXNob2xkLlxuICAgIGlmICh0aHJlc2hvbGQgPT0gb2xkUmF0aW8gfHwgdGhyZXNob2xkID09IG5ld1JhdGlvIHx8XG4gICAgICAgIHRocmVzaG9sZCA8IG9sZFJhdGlvICE9PSB0aHJlc2hvbGQgPCBuZXdSYXRpbykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcm9vdCBlbGVtZW50IGlzIGFuIGVsZW1lbnQgYW5kIGlzIGluIHRoZSBET00uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSByb290IGVsZW1lbnQgaXMgYW4gZWxlbWVudCBhbmQgaXMgaW4gdGhlIERPTS5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcm9vdElzSW5Eb20gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLnJvb3QgfHwgY29udGFpbnNEZWVwKGRvY3VtZW50LCB0aGlzLnJvb3QpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2Ygcm9vdC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgZWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2Ygcm9vdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcm9vdENvbnRhaW5zVGFyZ2V0ID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiBjb250YWluc0RlZXAodGhpcy5yb290IHx8IGRvY3VtZW50LCB0YXJnZXQpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgdGhlIGluc3RhbmNlIHRvIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkgaWYgaXQgaXNuJ3RcbiAqIGFscmVhZHkgcHJlc2VudC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAocmVnaXN0cnkuaW5kZXhPZih0aGlzKSA8IDApIHtcbiAgICByZWdpc3RyeS5wdXNoKHRoaXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgaW5zdGFuY2UgZnJvbSB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyIHJlZ2lzdHJ5LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl91bnJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGluZGV4ID0gcmVnaXN0cnkuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9IC0xKSByZWdpc3RyeS5zcGxpY2UoaW5kZXgsIDEpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2Uubm93KCkgbWV0aG9kIG9yIG51bGwgaW4gYnJvd3NlcnNcbiAqIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgQVBJLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSBwYWdlIHdhcyByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5ub3cgJiYgcGVyZm9ybWFuY2Uubm93KCk7XG59XG5cblxuLyoqXG4gKiBUaHJvdHRsZXMgYSBmdW5jdGlvbiBhbmQgZGVsYXlzIGl0cyBleGVjdXRpb24sIHNvIGl0J3Mgb25seSBjYWxsZWQgYXQgbW9zdFxuICogb25jZSB3aXRoaW4gYSBnaXZlbiB0aW1lIHBlcmlvZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IG11c3QgcGFzcyBiZWZvcmUgdGhlXG4gKiAgICAgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBhZ2Fpbi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgdGltZW91dCkge1xuICB2YXIgdGltZXIgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGltZXIpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgZm4oKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfVxuICB9O1xufVxuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIGEgRE9NIG5vZGUgZW5zdXJpbmcgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmlsaXR5LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBET00gbm9kZSB0byBhZGQgdGhlIGV2ZW50IGhhbmRsZXIgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZXZlbnQgaGFuZGxlciB0byBhZGQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF91c2VDYXB0dXJlIE9wdGlvbmFsbHkgYWRkcyB0aGUgZXZlbiB0byB0aGUgY2FwdHVyZVxuICogICAgIHBoYXNlLiBOb3RlOiB0aGlzIG9ubHkgd29ya3MgaW4gbW9kZXJuIGJyb3dzZXJzLlxuICovXG5mdW5jdGlvbiBhZGRFdmVudChub2RlLCBldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZS5hZGRFdmVudExpc3RlbmVyID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBvcHRfdXNlQ2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIG5vZGUuYXR0YWNoRXZlbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBmbik7XG4gIH1cbn1cblxuXG4vKipcbiAqIFJlbW92ZXMgYSBwcmV2aW91c2x5IGFkZGVkIGV2ZW50IGhhbmRsZXIgZnJvbSBhIERPTSBub2RlLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBET00gbm9kZSB0byByZW1vdmUgdGhlIGV2ZW50IGhhbmRsZXIgZnJvbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBldmVudCBoYW5kbGVyIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X3VzZUNhcHR1cmUgSWYgdGhlIGV2ZW50IGhhbmRsZXIgd2FzIGFkZGVkIHdpdGggdGhpc1xuICogICAgIGZsYWcgc2V0IHRvIHRydWUsIGl0IHNob3VsZCBiZSBzZXQgdG8gdHJ1ZSBoZXJlIGluIG9yZGVyIHRvIHJlbW92ZSBpdC5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnQobm9kZSwgZXZlbnQsIGZuLCBvcHRfdXNlQ2FwdHVyZSkge1xuICBpZiAodHlwZW9mIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUgfHwgZmFsc2UpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBub2RlLmRldGF0Y2hFdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5kZXRhdGNoRXZlbnQoJ29uJyArIGV2ZW50LCBmbik7XG4gIH1cbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIHR3byByZWN0IG9iamVjdHMuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdDEgVGhlIGZpcnN0IHJlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdDIgVGhlIHNlY29uZCByZWN0LlxuICogQHJldHVybiB7P09iamVjdH0gVGhlIGludGVyc2VjdGlvbiByZWN0IG9yIHVuZGVmaW5lZCBpZiBubyBpbnRlcnNlY3Rpb25cbiAqICAgICBpcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVJlY3RJbnRlcnNlY3Rpb24ocmVjdDEsIHJlY3QyKSB7XG4gIHZhciB0b3AgPSBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCk7XG4gIHZhciBib3R0b20gPSBNYXRoLm1pbihyZWN0MS5ib3R0b20sIHJlY3QyLmJvdHRvbSk7XG4gIHZhciBsZWZ0ID0gTWF0aC5tYXgocmVjdDEubGVmdCwgcmVjdDIubGVmdCk7XG4gIHZhciByaWdodCA9IE1hdGgubWluKHJlY3QxLnJpZ2h0LCByZWN0Mi5yaWdodCk7XG4gIHZhciB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgdmFyIGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcblxuICByZXR1cm4gKHdpZHRoID49IDAgJiYgaGVpZ2h0ID49IDApICYmIHtcbiAgICB0b3A6IHRvcCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn1cblxuXG4vKipcbiAqIFNoaW1zIHRoZSBuYXRpdmUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgSUUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHdob3NlIGJvdW5kaW5nIHJlY3QgdG8gZ2V0LlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgKHBvc3NpYmx5IHNoaW1tZWQpIHJlY3Qgb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbCkge1xuICB2YXIgcmVjdDtcblxuICB0cnkge1xuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSWdub3JlIFdpbmRvd3MgNyBJRTExIFwiVW5zcGVjaWZpZWQgZXJyb3JcIlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvcHVsbC8yMDVcbiAgfVxuXG4gIGlmICghcmVjdCkgcmV0dXJuIGdldEVtcHR5UmVjdCgpO1xuXG4gIC8vIE9sZGVyIElFXG4gIGlmICghKHJlY3Qud2lkdGggJiYgcmVjdC5oZWlnaHQpKSB7XG4gICAgcmVjdCA9IHtcbiAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlY3Q7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGVtcHR5IHJlY3Qgb2JqZWN0LiBBbiBlbXB0eSByZWN0IGlzIHJldHVybmVkIHdoZW4gYW4gZWxlbWVudFxuICogaXMgbm90IGluIHRoZSBET00uXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBlbXB0eSByZWN0LlxuICovXG5mdW5jdGlvbiBnZXRFbXB0eVJlY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyB0byBzZWUgaWYgYSBwYXJlbnQgZWxlbWVudCBjb250YWlucyBhIGNoaWxkIGVsZW1lbnQgKGluY2x1ZGluZyBpbnNpZGVcbiAqIHNoYWRvdyBET00pLlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50LlxuICogQHBhcmFtIHtOb2RlfSBjaGlsZCBUaGUgY2hpbGQgZWxlbWVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBhcmVudCBub2RlIGNvbnRhaW5zIHRoZSBjaGlsZCBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc0RlZXAocGFyZW50LCBjaGlsZCkge1xuICB2YXIgbm9kZSA9IGNoaWxkO1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09IHBhcmVudCkgcmV0dXJuIHRydWU7XG5cbiAgICBub2RlID0gZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgbm9kZSBvZiBhbiBlbGVtZW50IG9yIGl0cyBob3N0IGVsZW1lbnQgaWYgdGhlIHBhcmVudCBub2RlXG4gKiBpcyBhIHNoYWRvdyByb290LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHdob3NlIHBhcmVudCB0byBnZXQuXG4gKiBAcmV0dXJuIHtOb2RlfG51bGx9IFRoZSBwYXJlbnQgbm9kZSBvciBudWxsIGlmIG5vIHBhcmVudCBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUobm9kZSkge1xuICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlID09IDExICYmIHBhcmVudC5ob3N0KSB7XG4gICAgLy8gSWYgdGhlIHBhcmVudCBpcyBhIHNoYWRvdyByb290LCByZXR1cm4gdGhlIGhvc3QgZWxlbWVudC5cbiAgICByZXR1cm4gcGFyZW50Lmhvc3Q7XG4gIH1cbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuXG4vLyBFeHBvc2VzIHRoZSBjb25zdHJ1Y3RvcnMgZ2xvYmFsbHkuXG53aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbndpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5ID0gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeTtcblxufSh3aW5kb3csIGRvY3VtZW50KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXRWID0gcmVxdWlyZSgnLi9HZXRWJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcblxuLyoqXG4gKiA3LjMuOSAtIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1nZXRtZXRob2RcbiAqIDEuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuICogMi4gTGV0IGZ1bmMgYmUgR2V0VihPLCBQKS5cbiAqIDMuIFJldHVybklmQWJydXB0KGZ1bmMpLlxuICogNC4gSWYgZnVuYyBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwsIHJldHVybiB1bmRlZmluZWQuXG4gKiA1LiBJZiBJc0NhbGxhYmxlKGZ1bmMpIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gKiA2LiBSZXR1cm4gZnVuYy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdC8vIDcuMy45LjFcblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXG5cdC8vIDcuMy45LjJcblx0dmFyIGZ1bmMgPSBHZXRWKE8sIFApO1xuXG5cdC8vIDcuMy45LjRcblx0aWYgKGZ1bmMgPT0gbnVsbCkge1xuXHRcdHJldHVybiB2b2lkIDA7XG5cdH1cblxuXHQvLyA3LjMuOS41XG5cdGlmICghSXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKFAgKyAnaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0fVxuXG5cdC8vIDcuMy45LjZcblx0cmV0dXJuIGZ1bmM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmQgPT09ICdmdW5jdGlvbicgPyBTdHJpbmcucHJvdG90eXBlLnBhZEVuZCA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvQm9vbGVhbih2YWx1ZSkgeyByZXR1cm4gISF2YWx1ZTsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS42XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9VaW50MzIoeCkge1xuXHRyZXR1cm4gVG9OdW1iZXIoeCkgPj4+IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgY2hhbm5lbCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbCcpKCk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgU0xPVCA9IHtcblx0YXNzZXJ0OiBmdW5jdGlvbiAoTywgc2xvdCkge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHRjaGFubmVsLmFzc2VydChPKTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiAoTywgc2xvdCkge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRyZXR1cm4gc2xvdHMgJiYgc2xvdHNbJyQnICsgc2xvdF07XG5cdH0sXG5cdGhhczogZnVuY3Rpb24gKE8sIHNsb3QpIHtcblx0XHRpZiAoIU8gfHwgKHR5cGVvZiBPICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgTyAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgT2AgaXMgbm90IGFuIG9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHNsb3QgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHNsb3RgIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0dmFyIHNsb3RzID0gY2hhbm5lbC5nZXQoTyk7XG5cdFx0cmV0dXJuICEhc2xvdHMgJiYgaGFzKHNsb3RzLCAnJCcgKyBzbG90KTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoTywgc2xvdCwgVikge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRpZiAoIXNsb3RzKSB7XG5cdFx0XHRzbG90cyA9IHt9O1xuXHRcdFx0Y2hhbm5lbC5zZXQoTywgc2xvdHMpO1xuXHRcdH1cblx0XHRzbG90c1snJCcgKyBzbG90XSA9IFY7XG5cdH1cbn07XG5cbmlmIChPYmplY3QuZnJlZXplKSB7XG5cdE9iamVjdC5mcmVlemUoU0xPVCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU0xPVDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgQWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BZHZhbmNlU3RyaW5nSW5kZXgnKTtcbnZhciBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVJdGVyUmVzdWx0T2JqZWN0Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBPYmplY3RDcmVhdGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L09iamVjdENyZWF0ZScpO1xudmFyIFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlZ0V4cEV4ZWMnKTtcbnZhciBTZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1NldCcpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZycpO1xudmFyIFR5cGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1R5cGUnKTtcbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgU0xPVCA9IHJlcXVpcmUoJ2ludGVybmFsLXNsb3QnKTtcbnZhciB1bmRlZmluZWQ7XG5cbnZhciBSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKFIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpIHtcblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUyBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdH1cblx0aWYgKFR5cGUoZ2xvYmFsKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2xvYmFsIG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblx0aWYgKFR5cGUoZnVsbFVuaWNvZGUpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdmdWxsVW5pY29kZSBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cdFNMT1Quc2V0KHRoaXMsICdbW0l0ZXJhdGluZ1JlZ0V4cF1dJywgUik7XG5cdFNMT1Quc2V0KHRoaXMsICdbW0l0ZXJhdGVkU3RyaW5nXV0nLCBTKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbR2xvYmFsXV0nLCBnbG9iYWwpO1xuXHRTTE9ULnNldCh0aGlzLCAnW1tVbmljb2RlXV0nLCBmdWxsVW5pY29kZSk7XG5cdFNMT1Quc2V0KHRoaXMsICdbW0RvbmVdXScsIGZhbHNlKTtcbn07XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEdldEludHJpbnNpYygnJUl0ZXJhdG9yUHJvdG90eXBlJScsIHRydWUpO1xuaWYgKEl0ZXJhdG9yUHJvdG90eXBlKSB7XG5cdFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdENyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG59XG5cbmRlZmluZShSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUsIHtcblx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHR2YXIgTyA9IHRoaXM7XG5cdFx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoXG5cdFx0XHQhKE8gaW5zdGFuY2VvZiBSZWdFeHBTdHJpbmdJdGVyYXRvcilcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tJdGVyYXRpbmdSZWdFeHBdXScpXG5cdFx0XHR8fCAhU0xPVC5oYXMoTywgJ1tbSXRlcmF0ZWRTdHJpbmddXScpXG5cdFx0XHR8fCAhU0xPVC5oYXMoTywgJ1tbR2xvYmFsXV0nKVxuXHRcdFx0fHwgIVNMT1QuaGFzKE8sICdbW1VuaWNvZGVdXScpXG5cdFx0XHR8fCAhU0xPVC5oYXMoTywgJ1tbRG9uZV1dJylcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIHZhbHVlIG11c3QgYmUgYSBSZWdFeHBTdHJpbmdJdGVyYXRvciBpbnN0YW5jZScpO1xuXHRcdH1cblx0XHRpZiAoU0xPVC5nZXQoTywgJ1tbRG9uZV1dJykpIHtcblx0XHRcdHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0fVxuXHRcdHZhciBSID0gU0xPVC5nZXQoTywgJ1tbSXRlcmF0aW5nUmVnRXhwXV0nKTtcblx0XHR2YXIgUyA9IFNMT1QuZ2V0KE8sICdbW0l0ZXJhdGVkU3RyaW5nXV0nKTtcblx0XHR2YXIgZ2xvYmFsID0gU0xPVC5nZXQoTywgJ1tbR2xvYmFsXV0nKTtcblx0XHR2YXIgZnVsbFVuaWNvZGUgPSBTTE9ULmdldChPLCAnW1tVbmljb2RlXV0nKTtcblx0XHR2YXIgbWF0Y2ggPSBSZWdFeHBFeGVjKFIsIFMpO1xuXHRcdGlmIChtYXRjaCA9PT0gbnVsbCkge1xuXHRcdFx0U0xPVC5zZXQoTywgJ1tbRG9uZV1dJywgdHJ1ZSk7XG5cdFx0XHRyZXR1cm4gQ3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuXHRcdH1cblx0XHRpZiAoZ2xvYmFsKSB7XG5cdFx0XHR2YXIgbWF0Y2hTdHIgPSBUb1N0cmluZyhHZXQobWF0Y2gsICcwJykpO1xuXHRcdFx0aWYgKG1hdGNoU3RyID09PSAnJykge1xuXHRcdFx0XHR2YXIgdGhpc0luZGV4ID0gVG9MZW5ndGgoR2V0KFIsICdsYXN0SW5kZXgnKSk7XG5cdFx0XHRcdHZhciBuZXh0SW5kZXggPSBBZHZhbmNlU3RyaW5nSW5kZXgoUywgdGhpc0luZGV4LCBmdWxsVW5pY29kZSk7XG5cdFx0XHRcdFNldChSLCAnbGFzdEluZGV4JywgbmV4dEluZGV4LCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KG1hdGNoLCBmYWxzZSk7XG5cdFx0fVxuXHRcdFNMT1Quc2V0KE8sICdbW0RvbmVdXScsIHRydWUpO1xuXHRcdHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KG1hdGNoLCBmYWxzZSk7XG5cdH1cbn0pO1xuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIGRlZmluZVAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdGlmIChTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRpZiAoZGVmaW5lUCkge1xuXHRcdFx0ZGVmaW5lUChSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHR2YWx1ZTogJ1JlZ0V4cCBTdHJpbmcgSXRlcmF0b3InLFxuXHRcdFx0XHR3cml0YWJsZTogZmFsc2Vcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdSZWdFeHAgU3RyaW5nIEl0ZXJhdG9yJztcblx0XHR9XG5cdH1cblxuXHRpZiAoIUl0ZXJhdG9yUHJvdG90eXBlICYmIFN5bWJvbC5pdGVyYXRvcikge1xuXHRcdHZhciBmdW5jID0ge307XG5cdFx0ZnVuY1tTeW1ib2wuaXRlcmF0b3JdID0gUmVnRXhwU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gfHwgZnVuY3Rpb24gU3ltYm9sSXRlcmF0b3IoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXHRcdHZhciBwcmVkaWNhdGUgPSB7fTtcblx0XHRwcmVkaWNhdGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSAhPT0gZnVuY1tTeW1ib2wuaXRlcmF0b3JdO1xuXHRcdH07XG5cdFx0ZGVmaW5lKFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSwgZnVuYywgcHJlZGljYXRlKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ0V4cFN0cmluZ0l0ZXJhdG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGl0ZXJhdGVJdGVyYXRvcihpdGVyYXRvcikge1xuXHRpZiAoIWl0ZXJhdG9yIHx8IHR5cGVvZiBpdGVyYXRvci5uZXh0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYSBgbmV4dGAgbWV0aG9kJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzFdO1xuXHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgY2FsbGJhY2tgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHR9XG5cdHZhciB2YWx1ZXMgPSBjYWxsYmFjayB8fCBbXTtcblx0dmFyIHJlc3VsdDtcblx0d2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuXHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2socmVzdWx0LnZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWVzLnB1c2gocmVzdWx0LnZhbHVlKTtcblx0XHR9XG5cdH1cblx0aWYgKCFjYWxsYmFjaykge1xuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW50cmllcyhPKSB7XG5cdHZhciBvYmogPSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgZW50cnlzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzKG9iaiwga2V5KSAmJiAkaXNFbnVtZXJhYmxlKG9iaiwga2V5KSkge1xuXHRcdFx0ZW50cnlzLnB1c2goW2tleSwgb2JqW2tleV1dKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGVudHJ5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlUHJvbWlzZSA9IHJlcXVpcmUoJy4vcmVxdWlyZVByb21pc2UnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXF1aXJlUHJvbWlzZSgpO1xuXHRyZXR1cm4gdHlwZW9mIFByb21pc2UuYWxsU2V0dGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UuYWxsU2V0dGxlZCA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNhbGxcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDYWxsKEYsIFYpIHtcblx0dmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXHRpZiAoIUlzQ2FsbGFibGUoRikpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihpbnNwZWN0KEYpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cdHJldHVybiBGLmFwcGx5KFYsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUdsb2JhbCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0aWYgKGRlZmluZS5zdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBvbHlmaWxsLCAnZ2xvYmFsVGhpcycpO1xuXHRcdGlmICghZGVzY3JpcHRvciB8fCAoZGVzY3JpcHRvci5jb25maWd1cmFibGUgJiYgKGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBkZXNjcmlwdG9yLndyaXRhYmxlIHx8IGdsb2JhbFRoaXMgIT09IHBvbHlmaWxsKSkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtbGVuXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocG9seWZpbGwsICdnbG9iYWxUaGlzJywge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHR2YWx1ZTogcG9seWZpbGwsXG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAnb2JqZWN0JyB8fCBnbG9iYWxUaGlzICE9PSBwb2x5ZmlsbCkge1xuXHRcdHBvbHlmaWxsLmdsb2JhbFRoaXMgPSBwb2x5ZmlsbDtcblx0fVxuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdzdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL2F1dG8nKTtcblxucmVxdWlyZSgnZ2xvYmFsdGhpcy9hdXRvJyk7XG5cbnJlcXVpcmUoJ3Byb21pc2UuYWxsc2V0dGxlZC9hdXRvJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyIElzSW50ZWdlciA9IHJlcXVpcmUoJy4vSXNJbnRlZ2VyJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciAkY2hhckNvZGVBdCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJykoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWR2YW5jZVN0cmluZ0luZGV4KFMsIGluZGV4LCB1bmljb2RlKSB7XG5cdGlmIChUeXBlKFMpICE9PSAnU3RyaW5nJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgU2AgbXVzdCBiZSBhIFN0cmluZycpO1xuXHR9XG5cdGlmICghSXNJbnRlZ2VyKGluZGV4KSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBsZW5ndGhgIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwIGFuZCA8PSAyKio1MycpO1xuXHR9XG5cdGlmIChUeXBlKHVuaWNvZGUpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYHVuaWNvZGVgIG11c3QgYmUgYSBCb29sZWFuJyk7XG5cdH1cblx0aWYgKCF1bmljb2RlKSB7XG5cdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0fVxuXHR2YXIgbGVuZ3RoID0gUy5sZW5ndGg7XG5cdGlmICgoaW5kZXggKyAxKSA+PSBsZW5ndGgpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cblx0dmFyIGZpcnN0ID0gJGNoYXJDb2RlQXQoUywgaW5kZXgpO1xuXHRpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cblx0dmFyIHNlY29uZCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4ICsgMSk7XG5cdGlmIChzZWNvbmQgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGKSB7XG5cdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0fVxuXG5cdHJldHVybiBpbmRleCArIDI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciByZWdleHBNYXRjaEFsbCA9IHJlcXVpcmUoJy4vcmVnZXhwLW1hdGNoYWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UmVnRXhwTWF0Y2hBbGxQb2x5ZmlsbCgpIHtcblx0aWYgKCFoYXNTeW1ib2xzIHx8IHR5cGVvZiBTeW1ib2wubWF0Y2hBbGwgIT09ICdzeW1ib2wnIHx8IHR5cGVvZiBSZWdFeHAucHJvdG90eXBlW1N5bWJvbC5tYXRjaEFsbF0gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gcmVnZXhwTWF0Y2hBbGw7XG5cdH1cblx0cmV0dXJuIFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLm1hdGNoQWxsXTtcbn07XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZ2V0TmFub1NlY29uZHMsIGhydGltZSwgbG9hZFRpbWUsIG1vZHVsZUxvYWRUaW1lLCBub2RlTG9hZFRpbWUsIHVwVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBub2RlTG9hZFRpbWUpIC8gMWU2O1xuICAgIH07XG4gICAgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWU7XG4gICAgZ2V0TmFub1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBocjtcbiAgICAgIGhyID0gaHJ0aW1lKCk7XG4gICAgICByZXR1cm4gaHJbMF0gKiAxZTkgKyBoclsxXTtcbiAgICB9O1xuICAgIG1vZHVsZUxvYWRUaW1lID0gZ2V0TmFub1NlY29uZHMoKTtcbiAgICB1cFRpbWUgPSBwcm9jZXNzLnVwdGltZSgpICogMWU5O1xuICAgIG5vZGVMb2FkVGltZSA9IG1vZHVsZUxvYWRUaW1lIC0gdXBUaW1lO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmb3JtYW5jZS1ub3cuanMubWFwXG4iLCIoZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcblxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBsaXN0ID0gdGhpcy5tYXBbbmFtZV1cbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgIGxpc3QgPSBbXVxuICAgICAgdGhpcy5tYXBbbmFtZV0gPSBsaXN0XG4gICAgfVxuICAgIGxpc3QucHVzaCh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbiAgICByZXR1cm4gdmFsdWVzID8gdmFsdWVzWzBdIDogbnVsbFxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSB8fCBbXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IFtub3JtYWxpemVWYWx1ZSh2YWx1ZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLm1hcCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLm1hcFtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIG5hbWUsIHRoaXMpXG4gICAgICB9LCB0aGlzKVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAvLyBPbmx5IHN1cHBvcnQgQXJyYXlCdWZmZXJzIGZvciBQT1NUIG1ldGhvZC5cbiAgICAgICAgLy8gUmVjZWl2aW5nIEFycmF5QnVmZmVycyBoYXBwZW5zIHZpYSBCbG9icywgaW5zdGVhZC5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cblxuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZCA6IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcbiAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBpbnB1dFxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBoZWFkZXJzKHhocikge1xuICAgIHZhciBoZWFkID0gbmV3IEhlYWRlcnMoKVxuICAgIHZhciBwYWlycyA9ICh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpLnRyaW0oKS5zcGxpdCgnXFxuJylcbiAgICBwYWlycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdmFyIHNwbGl0ID0gaGVhZGVyLnRyaW0oKS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKClcbiAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWQuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfSlcbiAgICByZXR1cm4gaGVhZFxuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dFxuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgPyBvcHRpb25zLmhlYWRlcnMgOiBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0XG4gICAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkgJiYgIWluaXQpIHtcbiAgICAgICAgcmVxdWVzdCA9IGlucHV0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB9XG5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICBmdW5jdGlvbiByZXNwb25zZVVSTCgpIHtcbiAgICAgICAgaWYgKCdyZXNwb25zZVVSTCcgaW4geGhyKSB7XG4gICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVVSTFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXZvaWQgc2VjdXJpdHkgd2FybmluZ3Mgb24gZ2V0UmVzcG9uc2VIZWFkZXIgd2hlbiBub3QgYWxsb3dlZCBieSBDT1JTXG4gICAgICAgIGlmICgvXlgtUmVxdWVzdC1VUkw6L20udGVzdCh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHhoci5nZXRSZXNwb25zZUhlYWRlcignWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhdHVzID0gKHhoci5zdGF0dXMgPT09IDEyMjMpID8gMjA0IDogeGhyLnN0YXR1c1xuICAgICAgICBpZiAoc3RhdHVzIDwgMTAwIHx8IHN0YXR1cyA+IDU5OSkge1xuICAgICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVycyh4aHIpLFxuICAgICAgICAgIHVybDogcmVzcG9uc2VVUkwoKVxuICAgICAgICB9XG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1QYWRTdGFydCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIHsgcGFkU3RhcnQ6IHBvbHlmaWxsIH0sIHtcblx0XHRwYWRTdGFydDogZnVuY3Rpb24gdGVzdFBhZFN0YXJ0KCkge1xuXHRcdFx0cmV0dXJuIFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG5cbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9vYmplY3RcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb09iamVjdCh2YWx1ZSkge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHZhbHVlKTtcblx0cmV0dXJuICRPYmplY3QodmFsdWUpO1xufTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXhTYWZlSW50ZWdlcicpO1xuXG52YXIgVG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9Ub0ludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0xlbmd0aChhcmd1bWVudCkge1xuXHR2YXIgbGVuID0gVG9JbnRlZ2VyKGFyZ3VtZW50KTtcblx0aWYgKGxlbiA8PSAwKSB7IHJldHVybiAwOyB9IC8vIGluY2x1ZGVzIGNvbnZlcnRpbmcgLTAgdG8gKzBcblx0aWYgKGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIE1BWF9TQUZFX0lOVEVHRVI7IH1cblx0cmV0dXJuIGxlbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1HZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoXG5cdFx0T2JqZWN0LFxuXHRcdHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogcG9seWZpbGwgfSxcblx0XHR7IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIvKlxuICogc21vb3Roc2Nyb2xsIHBvbHlmaWxsIC0gdjAuMy41XG4gKiBodHRwczovL2lhbWR1c3Rhbi5naXRodWIuaW8vc21vb3Roc2Nyb2xsXG4gKiAyMDE2IChjKSBEdXN0YW4gS2FzdGVuLCBKZXJlbWlhcyBNZW5pY2hlbGxpIC0gTUlUIExpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24odywgZCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKlxuICAgKiBhbGlhc2VzXG4gICAqIHc6IHdpbmRvdyBnbG9iYWwgb2JqZWN0XG4gICAqIGQ6IGRvY3VtZW50XG4gICAqIHVuZGVmaW5lZDogdW5kZWZpbmVkXG4gICAqL1xuXG4gIC8vIHBvbHlmaWxsXG4gIGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIC8vIHJldHVybiB3aGVuIHNjcm9sbEJlaGF2aW9yIGludGVyZmFjZSBpcyBzdXBwb3J0ZWRcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogZ2xvYmFsc1xuICAgICAqL1xuICAgIHZhciBFbGVtZW50ID0gdy5IVE1MRWxlbWVudCB8fCB3LkVsZW1lbnQ7XG4gICAgdmFyIFNDUk9MTF9USU1FID0gNDY4O1xuXG4gICAgLypcbiAgICAgKiBvYmplY3QgZ2F0aGVyaW5nIG9yaWdpbmFsIHNjcm9sbCBtZXRob2RzXG4gICAgICovXG4gICAgdmFyIG9yaWdpbmFsID0ge1xuICAgICAgc2Nyb2xsOiB3LnNjcm9sbCB8fCB3LnNjcm9sbFRvLFxuICAgICAgc2Nyb2xsQnk6IHcuc2Nyb2xsQnksXG4gICAgICBlbFNjcm9sbDogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIHx8IHNjcm9sbEVsZW1lbnQsXG4gICAgICBzY3JvbGxJbnRvVmlldzogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBkZWZpbmUgdGltaW5nIG1ldGhvZFxuICAgICAqL1xuICAgIHZhciBub3cgPSB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICA/IHcucGVyZm9ybWFuY2Uubm93LmJpbmQody5wZXJmb3JtYW5jZSkgOiBEYXRlLm5vdztcblxuICAgIC8qKlxuICAgICAqIGNoYW5nZXMgc2Nyb2xsIHBvc2l0aW9uIGluc2lkZSBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBzY3JvbGxFbGVtZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjcm9sbEVsZW1lbnQoeCwgeSkge1xuICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHJlc3VsdCBvZiBhcHBseWluZyBlYXNlIG1hdGggZnVuY3Rpb24gdG8gYSBudW1iZXJcbiAgICAgKiBAbWV0aG9kIGVhc2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHNtb290aCBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZFxuICAgICAqIEBtZXRob2Qgc2hvdWxkQmFpbE91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0geFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3VsZEJhaWxPdXQoeCkge1xuICAgICAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgfHwgeCA9PT0gbnVsbFxuICAgICAgICAgICAgfHwgeC5iZWhhdmlvciA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICB8fCB4LmJlaGF2aW9yID09PSAnYXV0bydcbiAgICAgICAgICAgIHx8IHguYmVoYXZpb3IgPT09ICdpbnN0YW50Jykge1xuICAgICAgICAvLyBmaXJzdCBhcmcgbm90IGFuIG9iamVjdC9udWxsXG4gICAgICAgIC8vIG9yIGJlaGF2aW9yIGlzIGF1dG8sIGluc3RhbnQgb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnXG4gICAgICAgICAgICAmJiB4LmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3QgYW5kIGJlaGF2aW9yIGlzIHNtb290aFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRocm93IGVycm9yIHdoZW4gYmVoYXZpb3IgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmVoYXZpb3Igbm90IHZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmluZHMgc2Nyb2xsYWJsZSBwYXJlbnQgb2YgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2QgZmluZFNjcm9sbGFibGVQYXJlbnRcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHJldHVybnMge05vZGV9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZFNjcm9sbGFibGVQYXJlbnQoZWwpIHtcbiAgICAgIHZhciBpc0JvZHk7XG4gICAgICB2YXIgaGFzU2Nyb2xsYWJsZVNwYWNlO1xuICAgICAgdmFyIGhhc1Zpc2libGVPdmVyZmxvdztcblxuICAgICAgZG8ge1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgLy8gc2V0IGNvbmRpdGlvbiB2YXJpYWJsZXNcbiAgICAgICAgaXNCb2R5ID0gZWwgPT09IGQuYm9keTtcbiAgICAgICAgaGFzU2Nyb2xsYWJsZVNwYWNlID1cbiAgICAgICAgICBlbC5jbGllbnRIZWlnaHQgPCBlbC5zY3JvbGxIZWlnaHQgfHxcbiAgICAgICAgICBlbC5jbGllbnRXaWR0aCA8IGVsLnNjcm9sbFdpZHRoO1xuICAgICAgICBoYXNWaXNpYmxlT3ZlcmZsb3cgPVxuICAgICAgICAgIHcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkub3ZlcmZsb3cgPT09ICd2aXNpYmxlJztcbiAgICAgIH0gd2hpbGUgKCFpc0JvZHkgJiYgIShoYXNTY3JvbGxhYmxlU3BhY2UgJiYgIWhhc1Zpc2libGVPdmVyZmxvdykpO1xuXG4gICAgICBpc0JvZHkgPSBoYXNTY3JvbGxhYmxlU3BhY2UgPSBoYXNWaXNpYmxlT3ZlcmZsb3cgPSBudWxsO1xuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VsZiBpbnZva2VkIGZ1bmN0aW9uIHRoYXQsIGdpdmVuIGEgY29udGV4dCwgc3RlcHMgdGhyb3VnaCBzY3JvbGxpbmdcbiAgICAgKiBAbWV0aG9kIHN0ZXBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBjdXJyZW50WDtcbiAgICAgIHZhciBjdXJyZW50WTtcbiAgICAgIHZhciBlbGFwc2VkID0gKHRpbWUgLSBjb250ZXh0LnN0YXJ0VGltZSkgLyBTQ1JPTExfVElNRTtcblxuICAgICAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gICAgICB2YWx1ZSA9IGVhc2UoZWxhcHNlZCk7XG5cbiAgICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgICBjdXJyZW50WSA9IGNvbnRleHQuc3RhcnRZICsgKGNvbnRleHQueSAtIGNvbnRleHQuc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgIGlmIChjdXJyZW50WCAhPT0gY29udGV4dC54IHx8IGN1cnJlbnRZICE9PSBjb250ZXh0LnkpIHtcbiAgICAgICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHcsIGNvbnRleHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxzIHdpbmRvdyB3aXRoIGEgc21vb3RoIGJlaGF2aW9yXG4gICAgICogQG1ldGhvZCBzbW9vdGhTY3JvbGxcbiAgICAgKiBAcGFyYW0ge09iamVjdHxOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoZWwsIHgsIHkpIHtcbiAgICAgIHZhciBzY3JvbGxhYmxlO1xuICAgICAgdmFyIHN0YXJ0WDtcbiAgICAgIHZhciBzdGFydFk7XG4gICAgICB2YXIgbWV0aG9kO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IG5vdygpO1xuXG4gICAgICAvLyBkZWZpbmUgc2Nyb2xsIGNvbnRleHRcbiAgICAgIGlmIChlbCA9PT0gZC5ib2R5KSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSB3O1xuICAgICAgICBzdGFydFggPSB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldDtcbiAgICAgICAgc3RhcnRZID0gdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQ7XG4gICAgICAgIG1ldGhvZCA9IG9yaWdpbmFsLnNjcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSBlbDtcbiAgICAgICAgc3RhcnRYID0gZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgc3RhcnRZID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgICBtZXRob2QgPSBzY3JvbGxFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICAvLyBzY3JvbGwgbG9vcGluZyBvdmVyIGEgZnJhbWVcbiAgICAgIHN0ZXAoe1xuICAgICAgICBzY3JvbGxhYmxlOiBzY3JvbGxhYmxlLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICAgIHN0YXJ0WDogc3RhcnRYLFxuICAgICAgICBzdGFydFk6IHN0YXJ0WSxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBPUklHSU5BTCBNRVRIT0RTIE9WRVJSSURFU1xuICAgICAqL1xuXG4gICAgLy8gdy5zY3JvbGwgYW5kIHcuc2Nyb2xsVG9cbiAgICB3LnNjcm9sbCA9IHcuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCB8fCBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHcuc2Nyb2xsQnlcbiAgICB3LnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEJ5LmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCB8fCBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wICsgKHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0KVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIGFuZCBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUb1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCA9IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLmVsU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCA9IGFyZ3VtZW50c1swXS5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IGFyZ3VtZW50c1swXS50b3A7XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0eXBlb2YgbGVmdCA9PT0gJ251bWJlcicgPyBsZWZ0IDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHR5cGVvZiB0b3AgPT09ICdudW1iZXInID8gdG9wIDogdGhpcy5zY3JvbGxUb3BcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmcwID0gYXJndW1lbnRzWzBdO1xuXG4gICAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsKHtcbiAgICAgICAgICBsZWZ0OiBhcmcwLmxlZnQgKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgdG9wOiBhcmcwLnRvcCArIHRoaXMuc2Nyb2xsVG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiBhcmcwLmJlaGF2aW9yXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY3JvbGwoXG4gICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ICsgYXJnMCxcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvcCArIGFyZ3VtZW50c1sxXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEludG9WaWV3LmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICB2YXIgc2Nyb2xsYWJsZVBhcmVudCA9IGZpbmRTY3JvbGxhYmxlUGFyZW50KHRoaXMpO1xuICAgICAgdmFyIHBhcmVudFJlY3RzID0gc2Nyb2xsYWJsZVBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBjbGllbnRSZWN0cyA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChzY3JvbGxhYmxlUGFyZW50ICE9PSBkLmJvZHkpIHtcbiAgICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW5zaWRlIHBhcmVudFxuICAgICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxMZWZ0ICsgY2xpZW50UmVjdHMubGVmdCAtIHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxUb3AgKyBjbGllbnRSZWN0cy50b3AgLSBwYXJlbnRSZWN0cy50b3BcbiAgICAgICAgKTtcbiAgICAgICAgLy8gcmV2ZWFsIHBhcmVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IGNsaWVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBjbGllbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gY29tbW9uanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHsgcG9seWZpbGw6IHBvbHlmaWxsIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZ2xvYmFsXG4gICAgcG9seWZpbGwoKTtcbiAgfVxufSkod2luZG93LCBkb2N1bWVudCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIEFycmF5I2luY2x1ZGVzIGlzIHN0YWdlIDQsIGluIEVTNy9FUzIwMTZcbnJlcXVpcmUoJ2FycmF5LWluY2x1ZGVzL3NoaW0nKSgpO1xuXG5yZXF1aXJlKCcuL2VzMjAxNycpO1xuIiwiZnVuY3Rpb24gaGlkZVBsYWNlaG9sZGVyT25Gb2N1cyhhKXt0YXJnZXQ9YS5jdXJyZW50VGFyZ2V0P2EuY3VycmVudFRhcmdldDphLnNyY0VsZW1lbnQsdGFyZ2V0LnZhbHVlPT10YXJnZXQuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikmJih0YXJnZXQudmFsdWU9XCJcIil9ZnVuY3Rpb24gdW5mb2N1c09uQW5FbGVtZW50KGEpe3RhcmdldD1hLmN1cnJlbnRUYXJnZXQ/YS5jdXJyZW50VGFyZ2V0OmEuc3JjRWxlbWVudCxcIlwiPT10YXJnZXQudmFsdWUmJih0YXJnZXQudmFsdWU9dGFyZ2V0LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpKX1pZighKFwicGxhY2Vob2xkZXJcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkpZm9yKHZhciBpbnB1dHM9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKSxpPTA7aTxpbnB1dHMubGVuZ3RoO2krKylpbnB1dHNbaV0udmFsdWV8fChpbnB1dHNbaV0udmFsdWU9aW5wdXRzW2ldLmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpKSxpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcj8oaW5wdXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGhpZGVQbGFjZWhvbGRlck9uRm9jdXMsITEpLGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLHVuZm9jdXNPbkFuRWxlbWVudCwhMSkpOmlucHV0c1tpXS5hdHRhY2hFdmVudCYmKGlucHV0c1tpXS5hdHRhY2hFdmVudChcIm9uY2xpY2tcIixoaWRlUGxhY2Vob2xkZXJPbkZvY3VzKSxpbnB1dHNbaV0uYXR0YWNoRXZlbnQoXCJvbmJsdXJcIix1bmZvY3VzT25BbkVsZW1lbnQpKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlUHJvbWlzZSA9IHJlcXVpcmUoJy4vcmVxdWlyZVByb21pc2UnKTtcblxucmVxdWlyZVByb21pc2UoKTtcblxudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L0lzQ2FsbGFibGUnKTtcbnZhciBTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1NwZWNpZXNDb25zdHJ1Y3RvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1R5cGUnKTtcblxudmFyIHByb21pc2VSZXNvbHZlID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmUoQywgdmFsdWUpIHtcblx0cmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0cmVzb2x2ZSh2YWx1ZSk7XG5cdH0pO1xufTtcblxudmFyIE9yaWdpbmFsUHJvbWlzZSA9IFByb21pc2U7XG5cbnZhciBjcmVhdGVUaGVuRmluYWxseSA9IGZ1bmN0aW9uIENyZWF0ZVRoZW5GaW5hbGx5KEMsIG9uRmluYWxseSkge1xuXHRyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dmFyIHJlc3VsdCA9IG9uRmluYWxseSgpO1xuXHRcdHZhciBwcm9taXNlID0gcHJvbWlzZVJlc29sdmUoQywgcmVzdWx0KTtcblx0XHR2YXIgdmFsdWVUaHVuayA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9O1xuXHRcdHJldHVybiBwcm9taXNlLnRoZW4odmFsdWVUaHVuayk7XG5cdH07XG59O1xuXG52YXIgY3JlYXRlQ2F0Y2hGaW5hbGx5ID0gZnVuY3Rpb24gQ3JlYXRlQ2F0Y2hGaW5hbGx5KEMsIG9uRmluYWxseSkge1xuXHRyZXR1cm4gZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdHZhciByZXN1bHQgPSBvbkZpbmFsbHkoKTtcblx0XHR2YXIgcHJvbWlzZSA9IHByb21pc2VSZXNvbHZlKEMsIHJlc3VsdCk7XG5cdFx0dmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyByZWFzb247XG5cdFx0fTtcblx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKHRocm93ZXIpO1xuXHR9O1xufTtcblxudmFyIHByb21pc2VGaW5hbGx5ID0gZnVuY3Rpb24gZmluYWxseV8ob25GaW5hbGx5KSB7XG5cdC8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDAgKi9cblxuXHR2YXIgcHJvbWlzZSA9IHRoaXM7XG5cblx0aWYgKFR5cGUocHJvbWlzZSkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigncmVjZWl2ZXIgaXMgbm90IGFuIE9iamVjdCcpO1xuXHR9XG5cblx0dmFyIEMgPSBTcGVjaWVzQ29uc3RydWN0b3IocHJvbWlzZSwgT3JpZ2luYWxQcm9taXNlKTsgLy8gbWF5IHRocm93XG5cblx0dmFyIHRoZW5GaW5hbGx5ID0gb25GaW5hbGx5O1xuXHR2YXIgY2F0Y2hGaW5hbGx5ID0gb25GaW5hbGx5O1xuXHRpZiAoSXNDYWxsYWJsZShvbkZpbmFsbHkpKSB7XG5cdFx0dGhlbkZpbmFsbHkgPSBjcmVhdGVUaGVuRmluYWxseShDLCBvbkZpbmFsbHkpO1xuXHRcdGNhdGNoRmluYWxseSA9IGNyZWF0ZUNhdGNoRmluYWxseShDLCBvbkZpbmFsbHkpO1xuXHR9XG5cblx0cmV0dXJuIHByb21pc2UudGhlbih0aGVuRmluYWxseSwgY2F0Y2hGaW5hbGx5KTtcbn07XG5cbmlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKSB7XG5cdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm9taXNlRmluYWxseSwgJ25hbWUnKTtcblx0aWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZUZpbmFsbHksICduYW1lJywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiAnZmluYWxseScgfSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9taXNlRmluYWxseTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMTFcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuIiwiLyohXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbiAqIEBsaWNlbnNlIGVzNS1zaGltIENvcHlyaWdodCAyMDA5LTIwMjAgYnkgY29udHJpYnV0b3JzLCBNSVQgTGljZW5zZVxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuLy8gdmltOiB0cz00IHN0cz00IHN3PTQgZXhwYW5kdGFiXG5cbi8vIEFkZCBzZW1pY29sb24gdG8gcHJldmVudCBJSUZFIGZyb20gYmVpbmcgcGFzc2VkIGFzIGFyZ3VtZW50IHRvIGNvbmNhdGVuYXRlZCBjb2RlLlxuO1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbilcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3RlbXBsYXRlcy9yZXR1cm5FeHBvcnRzLmpzXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiBnbG9iYWwgZGVmaW5lICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb21lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnJldHVybkV4cG9ydHMgPSBmYWN0b3J5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBjYWxsID0gRnVuY3Rpb24uY2FsbDtcbiAgICB2YXIgcHJvdG90eXBlT2ZPYmplY3QgPSBPYmplY3QucHJvdG90eXBlO1xuICAgIHZhciBvd25zID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Lmhhc093blByb3BlcnR5KTtcbiAgICB2YXIgaXNFbnVtZXJhYmxlID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbiAgICB2YXIgdG9TdHIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QudG9TdHJpbmcpO1xuXG4gICAgLy8gSWYgSlMgZW5naW5lIHN1cHBvcnRzIGFjY2Vzc29ycyBjcmVhdGluZyBzaG9ydGN1dHMuXG4gICAgdmFyIGRlZmluZUdldHRlcjtcbiAgICB2YXIgZGVmaW5lU2V0dGVyO1xuICAgIHZhciBsb29rdXBHZXR0ZXI7XG4gICAgdmFyIGxvb2t1cFNldHRlcjtcbiAgICB2YXIgc3VwcG9ydHNBY2Nlc3NvcnMgPSBvd25zKHByb3RvdHlwZU9mT2JqZWN0LCAnX19kZWZpbmVHZXR0ZXJfXycpO1xuICAgIGlmIChzdXBwb3J0c0FjY2Vzc29ycykge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG4gICAgICAgIGRlZmluZUdldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2RlZmluZUdldHRlcl9fKTtcbiAgICAgICAgZGVmaW5lU2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fZGVmaW5lU2V0dGVyX18pO1xuICAgICAgICBsb29rdXBHZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19sb29rdXBHZXR0ZXJfXyk7XG4gICAgICAgIGxvb2t1cFNldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2xvb2t1cFNldHRlcl9fKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG4gICAgfVxuXG4gICAgdmFyIGlzUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNQcmltaXRpdmUobykge1xuICAgICAgICByZXR1cm4gbyA9PSBudWxsIHx8ICh0eXBlb2YgbyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG8gIT09ICdmdW5jdGlvbicpO1xuICAgIH07XG5cbiAgICAvLyBFUzUgMTUuMi4zLjJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMlxuICAgIGlmICghT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMjaXNzdWUvMlxuICAgICAgICAvLyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvb2JqZWN0Z2V0cHJvdG90eXBlb2YvXG4gICAgICAgIC8vIHJlY29tbWVuZGVkIGJ5IGZzY2hhZWZlciBvbiBnaXRodWJcbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3VyZSwgYW5kIHdlYnJlZmxlY3Rpb24gc2F5cyBeX15cbiAgICAgICAgLy8gLi4uIHRoaXMgd2lsbCBuZXJldmVyIHBvc3NpYmx5IHJldHVybiBudWxsXG4gICAgICAgIC8vIC4uLiBPcGVyYSBNaW5pIGJyZWFrcyBoZXJlIHdpdGggaW5maW5pdGUgbG9vcHNcbiAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG9cbiAgICAgICAgICAgIHZhciBwcm90byA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICBpZiAocHJvdG8gfHwgcHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvU3RyKG9iamVjdC5jb25zdHJ1Y3RvcikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDb3JyZWN0bHkgcmV0dXJuIG51bGwgZm9yIE9iamVjdHMgY3JlYXRlZCB3aXRoIGBPYmplY3QuY3JlYXRlKG51bGwpYFxuICAgICAgICAgICAgICAgIC8vIChzaGFtbWVkIG9yIG5hdGl2ZSkgb3IgYHsgX19wcm90b19fOiBudWxsfWAuICBBbHNvIHJldHVybnMgbnVsbCBmb3JcbiAgICAgICAgICAgICAgICAvLyBjcm9zcy1yZWFsbSBvYmplY3RzIG9uIGJyb3dzZXJzIHRoYXQgbGFjayBgX19wcm90b19fYCBzdXBwb3J0IChsaWtlXG4gICAgICAgICAgICAgICAgLy8gSUUgPDExKSwgYnV0IHRoYXQncyB0aGUgYmVzdCB3ZSBjYW4gZG8uXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4zXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjNcblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHdvcmtzIGlmIGl0J3MgZ2l2ZW4uIE90aGVyd2lzZSwgc2hpbSBwYXJ0aWFsbHkuXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICB2YXIgZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsgPSBmdW5jdGlvbiBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayhvYmplY3QpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnNlbnRpbmVsID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgJ3NlbnRpbmVsJykudmFsdWUgPT09IDA7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uT2JqZWN0ID0gZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsoe30pO1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbkRvbSA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgIHx8IGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgICAgaWYgKCFnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uRG9tIHx8ICFnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2sgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHx8IGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrKSB7XG4gICAgICAgIHZhciBFUlJfTk9OX09CSkVDVCA9ICdPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIGNhbGxlZCBvbiBhIG5vbi1vYmplY3Q6ICc7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX05PTl9PQkpFQ1QgKyBvYmplY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgICAgICAgIC8vIGZvciBJOCdzIERPTSBlbGVtZW50cy5cbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgc2hpbSBpZiB0aGUgcmVhbCBvbmUgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRvcjtcblxuICAgICAgICAgICAgLy8gSWYgb2JqZWN0IGRvZXMgbm90IG93bnMgcHJvcGVydHkgcmV0dXJuIHVuZGVmaW5lZCBpbW1lZGlhdGVseS5cbiAgICAgICAgICAgIGlmICghb3ducyhvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBvYmplY3QgaGFzIGEgcHJvcGVydHkgdGhlbiBpdCdzIGZvciBzdXJlIGBjb25maWd1cmFibGVgLCBhbmRcbiAgICAgICAgICAgIC8vIHByb2JhYmx5IGBlbnVtZXJhYmxlYC4gRGV0ZWN0IGVudW1lcmFiaWxpdHkgdGhvdWdoLlxuICAgICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBpc0VudW1lcmFibGUob2JqZWN0LCBwcm9wZXJ0eSksXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBJZiBKUyBlbmdpbmUgc3VwcG9ydHMgYWNjZXNzb3IgcHJvcGVydGllcyB0aGVuIHByb3BlcnR5IG1heSBiZSBhXG4gICAgICAgICAgICAvLyBnZXR0ZXIgb3Igc2V0dGVyLlxuICAgICAgICAgICAgaWYgKHN1cHBvcnRzQWNjZXNzb3JzKSB7XG4gICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gYSBnZXR0ZXIgZXZlblxuICAgICAgICAgICAgICAgIC8vIGlmIG9iamVjdCBoYXMgb3duIG5vbiBnZXR0ZXIgcHJvcGVydHkgYWxvbmcgd2l0aCBhIHNhbWUgbmFtZWRcbiAgICAgICAgICAgICAgICAvLyBpbmhlcml0ZWQgZ2V0dGVyLiBUbyBhdm9pZCBtaXNiZWhhdmlvciB3ZSB0ZW1wb3JhcnkgcmVtb3ZlXG4gICAgICAgICAgICAgICAgLy8gYF9fcHJvdG9fX2Agc28gdGhhdCBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gZ2V0dGVyIG9ubHlcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIG93bmVkIGJ5IGFuIG9iamVjdC5cbiAgICAgICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICB2YXIgbm90UHJvdG90eXBlT2ZPYmplY3QgPSBvYmplY3QgIT09IHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHJlY3Vyc2lvbiBwcm9ibGVtLCBicmVha2luZyBpbiBPcGVyYSBNaW5pIHdoZW5cbiAgICAgICAgICAgICAgICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycpXG4gICAgICAgICAgICAgICAgLy8gb3IgYW55IG90aGVyIE9iamVjdC5wcm90b3R5cGUgYWNjZXNzb3JcbiAgICAgICAgICAgICAgICBpZiAobm90UHJvdG90eXBlT2ZPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZU9mT2JqZWN0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGdldHRlciA9IGxvb2t1cEdldHRlcihvYmplY3QsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB2YXIgc2V0dGVyID0gbG9va3VwU2V0dGVyKG9iamVjdCwgcHJvcGVydHkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vdFByb3RvdHlwZU9mT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9uY2Ugd2UgaGF2ZSBnZXR0ZXIgYW5kIHNldHRlciB3ZSBjYW4gcHV0IHZhbHVlcyBiYWNrLlxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGdldHRlciB8fCBzZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5nZXQgPSBnZXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBzZXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgd2FzIGFjY2Vzc29yIHByb3BlcnR5IHdlJ3JlIGRvbmUgYW5kIHJldHVybiBoZXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIG9yZGVyIHRvIGF2b2lkIGFkZGluZyBgdmFsdWVgIHRvIHRoZSBkZXNjcmlwdG9yLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB3ZSBrbm93IHRoYXQgb2JqZWN0IGhhcyBhbiBvd24gcHJvcGVydHkgdGhhdCBpc1xuICAgICAgICAgICAgLy8gbm90IGFuIGFjY2Vzc29yIHNvIHdlIHNldCBpdCBhcyBhIHZhbHVlIGFuZCByZXR1cm4gZGVzY3JpcHRvci5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy40XG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjVcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuNVxuICAgIGlmICghT2JqZWN0LmNyZWF0ZSkge1xuXG4gICAgICAgIC8vIENvbnRyaWJ1dGVkIGJ5IEJyYW5kb24gQmVudmllLCBPY3RvYmVyLCAyMDEyXG4gICAgICAgIHZhciBjcmVhdGVFbXB0eTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJvdG8gPSAhKHsgX19wcm90b19fOiBudWxsIH0gaW5zdGFuY2VvZiBPYmplY3QpO1xuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHByb2R1Y2VzIGZhbHNlIHBvc2l0aXZlc1xuICAgICAgICAvLyBpbiBPcGVyYSBNaW5pID0+IG5vdCBhIHJlbGlhYmxlIGNoZWNrXG4gICAgICAgIC8vIE9iamVjdC5wcm90b3R5cGUuX19wcm90b19fID09PSBudWxsXG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuICAgICAgICAvLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuICAgICAgICAvLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuICAgICAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgICAgICB2YXIgc2hvdWxkVXNlQWN0aXZlWCA9IGZ1bmN0aW9uIHNob3VsZFVzZUFjdGl2ZVgoKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZWFybHkgaWYgZG9jdW1lbnQuZG9tYWluIG5vdCBzZXRcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIW5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoaXMgc3VwcG9ydHMgSUU4IHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIHVzZWRcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgIC8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4gICAgICAgIHZhciBnZXRFbXB0eVZpYUFjdGl2ZVggPSBmdW5jdGlvbiBnZXRFbXB0eVZpYUFjdGl2ZVgoKSB7XG4gICAgICAgICAgICB2YXIgZW1wdHk7XG4gICAgICAgICAgICB2YXIgeERvYztcblxuICAgICAgICAgICAgeERvYyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7XG4gICAgICAgICAgICB4RG9jLndyaXRlKCc8JyArIHNjcmlwdCArICc+PC8nICsgc2NyaXB0ICsgJz4nKTtcbiAgICAgICAgICAgIHhEb2MuY2xvc2UoKTtcblxuICAgICAgICAgICAgZW1wdHkgPSB4RG9jLnBhcmVudFdpbmRvdy5PYmplY3QucHJvdG90eXBlO1xuICAgICAgICAgICAgeERvYyA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUaGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24gdXNpbmcgYW4gaWZyYW1lXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgYWN0aXZleCBhcHByb2FjaCB3YXMgYWRkZWRcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgIHZhciBnZXRFbXB0eVZpYUlGcmFtZSA9IGZ1bmN0aW9uIGdldEVtcHR5VmlhSUZyYW1lKCkge1xuICAgICAgICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgdmFyIGVtcHR5O1xuXG4gICAgICAgICAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNjcmlwdC11cmxcbiAgICAgICAgICAgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonO1xuXG4gICAgICAgICAgICBlbXB0eSA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdC5wcm90b3R5cGU7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICAgIGlmcmFtZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKiBnbG9iYWwgZG9jdW1lbnQgKi9cbiAgICAgICAgaWYgKHN1cHBvcnRzUHJvdG8gfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgX19wcm90b19fOiBudWxsIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gb2xkIElFIF9fcHJvdG9fXyBjYW4ndCBiZSB1c2VkIHRvIG1hbnVhbGx5IHNldCBgbnVsbGAsIG5vciBkb2VzXG4gICAgICAgICAgICAvLyBhbnkgb3RoZXIgbWV0aG9kIGV4aXN0IHRvIG1ha2UgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBub3RoaW5nLFxuICAgICAgICAgICAgLy8gYXNpZGUgZnJvbSBPYmplY3QucHJvdG90eXBlIGl0c2VsZi4gSW5zdGVhZCwgY3JlYXRlIGEgbmV3IGdsb2JhbFxuICAgICAgICAgICAgLy8gb2JqZWN0IGFuZCAqc3RlYWwqIGl0cyBPYmplY3QucHJvdG90eXBlIGFuZCBzdHJpcCBpdCBiYXJlLiBUaGlzIGlzXG4gICAgICAgICAgICAvLyB1c2VkIGFzIHRoZSBwcm90b3R5cGUgdG8gY3JlYXRlIG51bGxhcnkgb2JqZWN0cy5cbiAgICAgICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB3aGljaCBhcHByb2FjaCB0byB1c2VcbiAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHkgPSBzaG91bGRVc2VBY3RpdmVYKCkgPyBnZXRFbXB0eVZpYUFjdGl2ZVgoKSA6IGdldEVtcHR5VmlhSUZyYW1lKCk7XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5Lmhhc093blByb3BlcnR5O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkuaXNQcm90b3R5cGVPZjtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkudG9Mb2NhbGVTdHJpbmc7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS52YWx1ZU9mO1xuXG4gICAgICAgICAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBlbXB0eTtcbiAgICAgICAgICAgICAgICAvLyBzaG9ydC1jaXJjdWl0IGZ1dHVyZSBjYWxsc1xuICAgICAgICAgICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgdmFyIG9iamVjdDtcbiAgICAgICAgICAgIHZhciBUeXBlID0gZnVuY3Rpb24gVHlwZSgpIHt9OyAvLyBBbiBlbXB0eSBjb25zdHJ1Y3Rvci5cblxuICAgICAgICAgICAgaWYgKHByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IGNyZWF0ZUVtcHR5KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGBwYXJlbnRgIGNhbiBiZSBgbnVsbGBcbiAgICAgICAgICAgICAgICAvLyBPUiAqYW55KiBgaW5zdGFuY2VvZiBPYmplY3RgICAoT2JqZWN0fEZ1bmN0aW9ufEFycmF5fFJlZ0V4cHxldGMpXG4gICAgICAgICAgICAgICAgLy8gVXNlIGB0eXBlb2ZgIHRobywgYi9jIGluIG9sZCBJRSwgRE9NIGVsZW1lbnRzIGFyZSBub3QgYGluc3RhbmNlb2YgT2JqZWN0YFxuICAgICAgICAgICAgICAgIC8vIGxpa2UgdGhleSBhcmUgaW4gbW9kZXJuIGJyb3dzZXJzLiBVc2luZyBgT2JqZWN0LmNyZWF0ZWAgb24gRE9NIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgLy8gaXMuLi5lcnIuLi5wcm9iYWJseSBpbmFwcHJvcHJpYXRlLCBidXQgdGhlIG5hdGl2ZSB2ZXJzaW9uIGFsbG93cyBmb3IgaXQuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IHByb3RvdHlwZSBtYXkgb25seSBiZSBhbiBPYmplY3Qgb3IgbnVsbCcpOyAvLyBzYW1lIG1zZyBhcyBDaHJvbWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgVHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gbmV3IFR5cGUoKTtcbiAgICAgICAgICAgICAgICAvLyBJRSBoYXMgbm8gYnVpbHQtaW4gaW1wbGVtZW50YXRpb24gb2YgYE9iamVjdC5nZXRQcm90b3R5cGVPZmBcbiAgICAgICAgICAgICAgICAvLyBuZWl0aGVyIGBfX3Byb3RvX19gLCBidXQgdGhpcyBtYW51YWxseSBzZXR0aW5nIGBfX3Byb3RvX19gIHdpbGxcbiAgICAgICAgICAgICAgICAvLyBndWFyYW50ZWUgdGhhdCBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgd2l0aFxuICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgY3JlYXRlZCB1c2luZyBgT2JqZWN0LmNyZWF0ZWBcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG9cbiAgICAgICAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjZcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuNlxuXG4gICAgLy8gUGF0Y2ggZm9yIFdlYktpdCBhbmQgSUU4IHN0YW5kYXJkIG1vZGVcbiAgICAvLyBEZXNpZ25lZCBieSBoYXggPGhheC5naXRodWIuY29tPlxuICAgIC8vIHJlbGF0ZWQgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMjaXNzdWUvNVxuICAgIC8vIElFOCBSZWZlcmVuY2U6XG4gICAgLy8gICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9kZDI4MjkwMC5hc3B4XG4gICAgLy8gICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9kZDIyOTkxNi5hc3B4XG4gICAgLy8gV2ViS2l0IEJ1Z3M6XG4gICAgLy8gICAgIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0zNjQyM1xuXG4gICAgdmFyIGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsgPSBmdW5jdGlvbiBkb2VzRGVmaW5lUHJvcGVydHlXb3JrKG9iamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgJ3NlbnRpbmVsJywge30pO1xuICAgICAgICAgICAgcmV0dXJuICdzZW50aW5lbCcgaW4gb2JqZWN0O1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBjaGVjayB3aGV0aGVyIGRlZmluZVByb3BlcnR5IHdvcmtzIGlmIGl0J3MgZ2l2ZW4uIE90aGVyd2lzZSxcbiAgICAvLyBzaGltIHBhcnRpYWxseS5cbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eVdvcmtzT25PYmplY3QgPSBkb2VzRGVmaW5lUHJvcGVydHlXb3JrKHt9KTtcbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5V29ya3NPbkRvbSA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgIHx8IGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgICAgICBpZiAoIWRlZmluZVByb3BlcnR5V29ya3NPbk9iamVjdCB8fCAhZGVmaW5lUHJvcGVydHlXb3Jrc09uRG9tKSB7XG4gICAgICAgICAgICB2YXIgZGVmaW5lUHJvcGVydHlGYWxsYmFjayA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2sgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGRlZmluZVByb3BlcnR5RmFsbGJhY2spIHtcbiAgICAgICAgdmFyIEVSUl9OT05fT0JKRUNUX0RFU0NSSVBUT1IgPSAnUHJvcGVydHkgZGVzY3JpcHRpb24gbXVzdCBiZSBhbiBvYmplY3Q6ICc7XG4gICAgICAgIHZhciBFUlJfTk9OX09CSkVDVF9UQVJHRVQgPSAnT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxlZCBvbiBub24tb2JqZWN0OiAnO1xuICAgICAgICB2YXIgRVJSX0FDQ0VTU09SU19OT1RfU1VQUE9SVEVEID0gJ2dldHRlcnMgJiBzZXR0ZXJzIGNhbiBub3QgYmUgZGVmaW5lZCBvbiB0aGlzIGphdmFzY3JpcHQgZW5naW5lJztcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX05PTl9PQkpFQ1RfVEFSR0VUICsgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZShkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX05PTl9PQkpFQ1RfREVTQ1JJUFRPUiArIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFrZSBhIHZhbGlhbnQgYXR0ZW1wdCB0byB1c2UgdGhlIHJlYWwgZGVmaW5lUHJvcGVydHlcbiAgICAgICAgICAgIC8vIGZvciBJOCdzIERPTSBlbGVtZW50cy5cbiAgICAgICAgICAgIGlmIChkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5RmFsbGJhY2suY2FsbChPYmplY3QsIG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cnkgdGhlIHNoaW0gaWYgdGhlIHJlYWwgb25lIGRvZXNuJ3Qgd29ya1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgaXQncyBhIGRhdGEgcHJvcGVydHkuXG4gICAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gZmFpbCBzaWxlbnRseSBpZiAnd3JpdGFibGUnLCAnZW51bWVyYWJsZScsIG9yICdjb25maWd1cmFibGUnXG4gICAgICAgICAgICAgICAgLy8gYXJlIHJlcXVlc3RlZCBidXQgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgLy8gYWx0ZXJuYXRlIGFwcHJvYWNoOlxuICAgICAgICAgICAgICAgIGlmICggLy8gY2FuJ3QgaW1wbGVtZW50IHRoZXNlIGZlYXR1cmVzOyBhbGxvdyBmYWxzZSBidXQgbm90IHRydWVcbiAgICAgICAgICAgICAgICAgICAgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKCdlbnVtZXJhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmVudW1lcmFibGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICgnY29uZmlndXJhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSlcbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICdUaGlzIGltcGxlbWVudGF0aW9uIG9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBkb2VzIG5vdCBzdXBwb3J0IGNvbmZpZ3VyYWJsZSwgZW51bWVyYWJsZSwgb3Igd3JpdGFibGUuJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydHNBY2Nlc3NvcnMgJiYgKGxvb2t1cEdldHRlcihvYmplY3QsIHByb3BlcnR5KSB8fCBsb29rdXBTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzIGFjY2Vzc29ycyBhcmUgc3VwcG9ydGVkIG9ubHkgb24gZW5naW5lcyBpbXBsZW1lbnRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYF9fcHJvdG9fX2Agd2UgY2FuIHNhZmVseSBvdmVycmlkZSBgX19wcm90b19fYCB3aGlsZSBkZWZpbmluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIHByb3BlcnR5IHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGRvbid0IGhpdCBhbiBpbmhlcml0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvLCBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGluZyBhIHByb3BlcnR5IGFueXdheSBzaW5jZSBnZXR0ZXIgLyBzZXR0ZXIgbWF5IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZWQgb24gb2JqZWN0IGl0c2VsZi5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIG9yaWdpbmFsIGBfX3Byb3RvX19gIGJhY2sgbm93LlxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvLCBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzR2V0dGVyID0gJ2dldCcgaW4gZGVzY3JpcHRvcjtcbiAgICAgICAgICAgICAgICB2YXIgaGFzU2V0dGVyID0gJ3NldCcgaW4gZGVzY3JpcHRvcjtcbiAgICAgICAgICAgICAgICBpZiAoIXN1cHBvcnRzQWNjZXNzb3JzICYmIChoYXNHZXR0ZXIgfHwgaGFzU2V0dGVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUl9BQ0NFU1NPUlNfTk9UX1NVUFBPUlRFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGdvdCB0aGF0IGZhciB0aGVuIGdldHRlcnMgYW5kIHNldHRlcnMgY2FuIGJlIGRlZmluZWQgISFcbiAgICAgICAgICAgICAgICBpZiAoaGFzR2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUdldHRlcihvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yLmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoYXNTZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lU2V0dGVyKG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3Iuc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuN1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy43XG4gICAgaWYgKCFPYmplY3QuZGVmaW5lUHJvcGVydGllcyB8fCBkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2spIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgcHJvcGVydGllcykge1xuICAgICAgICAgICAgLy8gbWFrZSBhIHZhbGlhbnQgYXR0ZW1wdCB0byB1c2UgdGhlIHJlYWwgZGVmaW5lUHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGRlZmluZVByb3BlcnRpZXNGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2suY2FsbChPYmplY3QsIG9iamVjdCwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgc2hpbSBpZiB0aGUgcmVhbCBvbmUgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHByb3BlcnRpZXNbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy44XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjhcbiAgICBpZiAoIU9iamVjdC5zZWFsKSB7XG4gICAgICAgIE9iamVjdC5zZWFsID0gZnVuY3Rpb24gc2VhbChvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LnNlYWwgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1pc2xlYWRpbmcgYW5kIGJyZWFrcyBmZWF0dXJlLWRldGVjdGlvbiwgYnV0XG4gICAgICAgICAgICAvLyBhbGxvd3MgXCJzZWN1cmFibGVcIiBjb2RlIHRvIFwiZ3JhY2VmdWxseVwiIGRlZ3JhZGUgdG8gd29ya2luZ1xuICAgICAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuOVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy45XG4gICAgaWYgKCFPYmplY3QuZnJlZXplKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUgPSBmdW5jdGlvbiBmcmVlemUob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5mcmVlemUgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1pc2xlYWRpbmcgYW5kIGJyZWFrcyBmZWF0dXJlLWRldGVjdGlvbiwgYnV0XG4gICAgICAgICAgICAvLyBhbGxvd3MgXCJzZWN1cmFibGVcIiBjb2RlIHRvIFwiZ3JhY2VmdWxseVwiIGRlZ3JhZGUgdG8gd29ya2luZ1xuICAgICAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGRldGVjdCBhIFJoaW5vIGJ1ZyBhbmQgcGF0Y2ggaXRcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGZ1bmN0aW9uICgpIHt9KTtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSA9IChmdW5jdGlvbiAoZnJlZXplT2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyZWV6ZU9iamVjdChvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oT2JqZWN0LmZyZWV6ZSkpO1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTBcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTBcbiAgICBpZiAoIU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgPSBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcyBpcyBtaXNsZWFkaW5nIGFuZCBicmVha3MgZmVhdHVyZS1kZXRlY3Rpb24sIGJ1dFxuICAgICAgICAgICAgLy8gYWxsb3dzIFwic2VjdXJhYmxlXCIgY29kZSB0byBcImdyYWNlZnVsbHlcIiBkZWdyYWRlIHRvIHdvcmtpbmdcbiAgICAgICAgICAgIC8vIGJ1dCBpbnNlY3VyZSBjb2RlLlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjExXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjExXG4gICAgaWYgKCFPYmplY3QuaXNTZWFsZWQpIHtcbiAgICAgICAgT2JqZWN0LmlzU2VhbGVkID0gZnVuY3Rpb24gaXNTZWFsZWQob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5pc1NlYWxlZCBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjEyXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjEyXG4gICAgaWYgKCFPYmplY3QuaXNGcm96ZW4pIHtcbiAgICAgICAgT2JqZWN0LmlzRnJvemVuID0gZnVuY3Rpb24gaXNGcm96ZW4ob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5pc0Zyb3plbiBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjEzXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjEzXG4gICAgaWYgKCFPYmplY3QuaXNFeHRlbnNpYmxlKSB7XG4gICAgICAgIE9iamVjdC5pc0V4dGVuc2libGUgPSBmdW5jdGlvbiBpc0V4dGVuc2libGUob2JqZWN0KSB7XG4gICAgICAgICAgICAvLyAxLiBJZiBUeXBlKE8pIGlzIG5vdCBPYmplY3QgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuaXNFeHRlbnNpYmxlIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMi4gUmV0dXJuIHRoZSBCb29sZWFuIHZhbHVlIG9mIHRoZSBbW0V4dGVuc2libGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBPLlxuICAgICAgICAgICAgdmFyIG5hbWUgPSAnJztcbiAgICAgICAgICAgIHdoaWxlIChvd25zKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9ICc/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iamVjdFtuYW1lXSA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IG93bnMob2JqZWN0LCBuYW1lKTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RbbmFtZV07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIElzUmVnRXhwID0gcmVxdWlyZSgnLi9Jc1JlZ0V4cCcpO1xudmFyIFRvUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Ub1Byb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vcmRpbmFyeWdldG93bnByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICghaGFzKE8sIFApKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXHRpZiAoISRnT1BEKSB7XG5cdFx0Ly8gRVMzIC8gSUUgOCBmYWxsYmFja1xuXHRcdHZhciBhcnJheUxlbmd0aCA9IElzQXJyYXkoTykgJiYgUCA9PT0gJ2xlbmd0aCc7XG5cdFx0dmFyIHJlZ2V4TGFzdEluZGV4ID0gSXNSZWdFeHAoTykgJiYgUCA9PT0gJ2xhc3RJbmRleCc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogIShhcnJheUxlbmd0aCB8fCByZWdleExhc3RJbmRleCksXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiAkaXNFbnVtZXJhYmxlKE8sIFApLFxuXHRcdFx0J1tbVmFsdWVdXSc6IE9bUF0sXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIFRvUHJvcGVydHlEZXNjcmlwdG9yKCRnT1BEKE8sIFApKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJHNwZWNpZXMgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wuc3BlY2llcyUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgSXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vSXNDb25zdHJ1Y3RvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdHZhciBDID0gTy5jb25zdHJ1Y3Rvcjtcblx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG5cdH1cblx0aWYgKFR5cGUoQykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ08uY29uc3RydWN0b3IgaXMgbm90IGFuIE9iamVjdCcpO1xuXHR9XG5cdHZhciBTID0gJHNwZWNpZXMgPyBDWyRzcGVjaWVzXSA6IHZvaWQgMDtcblx0aWYgKFMgPT0gbnVsbCkge1xuXHRcdHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG5cdH1cblx0aWYgKElzQ29uc3RydWN0b3IoUykpIHtcblx0XHRyZXR1cm4gUztcblx0fVxuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcignbm8gY29uc3RydWN0b3IgZm91bmQnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcbnZhciAkUmVnRXhwID0gR2V0SW50cmluc2ljKCclUmVnRXhwJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgcmVnZXhUZXN0ZXIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlZ2V4VGVzdGVyJyk7XG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG5cbnZhciAkc3RyU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciBpc0JpbmFyeSA9IHJlZ2V4VGVzdGVyKC9eMGJbMDFdKyQvaSk7XG52YXIgaXNPY3RhbCA9IHJlZ2V4VGVzdGVyKC9eMG9bMC03XSskL2kpO1xudmFyIGlzSW52YWxpZEhleExpdGVyYWwgPSByZWdleFRlc3RlcigvXlstK10weFswLTlhLWZdKyQvaSk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyAkUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xudmFyIGhhc05vbldTID0gcmVnZXhUZXN0ZXIobm9uV1NyZWdleCk7XG5cbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4vLyBpbXBsZW1lbnRhdGlvbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL3YzLjQuMC9lczUtc2hpbS5qcyNMMTMwNC1MMTMyNFxudmFyIHdzID0gW1xuXHQnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnLFxuXHQnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjgnLFxuXHQnXFx1MjAyOVxcdUZFRkYnXG5dLmpvaW4oJycpO1xudmFyIHRyaW1SZWdleCA9IG5ldyBSZWdFeHAoJyheWycgKyB3cyArICddKyl8KFsnICsgd3MgKyAnXSskKScsICdnJyk7XG52YXIgJHJlcGxhY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUucmVwbGFjZScpO1xudmFyICR0cmltID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiAkcmVwbGFjZSh2YWx1ZSwgdHJpbVJlZ2V4LCAnJyk7XG59O1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9udW1iZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb051bWJlcihhcmd1bWVudCkge1xuXHR2YXIgdmFsdWUgPSBpc1ByaW1pdGl2ZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkTnVtYmVyKTtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcblx0fVxuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdGlmIChpc0JpbmFyeSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDIpKTtcblx0XHR9IGVsc2UgaWYgKGlzT2N0YWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCA4KSk7XG5cdFx0fSBlbHNlIGlmIChoYXNOb25XUyh2YWx1ZSkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB0cmltbWVkID0gJHRyaW0odmFsdWUpO1xuXHRcdFx0aWYgKHRyaW1tZWQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBUb051bWJlcih0cmltbWVkKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuICROdW1iZXIodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldEluZmVycmVkTmFtZTtcbnRyeSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuXHRnZXRJbmZlcnJlZE5hbWUgPSBGdW5jdGlvbigncycsICdyZXR1cm4geyBbc10oKSB7fSB9W3NdLm5hbWU7Jyk7XG59IGNhdGNoIChlKSB7fVxuXG52YXIgaW5mZXJyZWQgPSBmdW5jdGlvbiAoKSB7fTtcbm1vZHVsZS5leHBvcnRzID0gZ2V0SW5mZXJyZWROYW1lICYmIGluZmVycmVkLm5hbWUgPT09ICdpbmZlcnJlZCcgPyBnZXRJbmZlcnJlZE5hbWUgOiBudWxsO1xuIiwiLyogZXNsaW50IG5vLW5lZ2F0ZWQtY29uZGl0aW9uOiAwLCBuby1uZXctZnVuYzogMCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cbiIsIi8vIGVsZW1lbnQtY2xvc2VzdCB8IENDMC0xLjAgfCBnaXRodWIuY29tL2pvbmF0aGFudG5lYWwvY2xvc2VzdFxuXG4oZnVuY3Rpb24gKEVsZW1lbnRQcm90bykge1xuXHRpZiAodHlwZW9mIEVsZW1lbnRQcm90by5tYXRjaGVzICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0RWxlbWVudFByb3RvLm1hdGNoZXMgPSBFbGVtZW50UHJvdG8ubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudFByb3RvLm1vek1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uIG1hdGNoZXMoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBlbGVtZW50ID0gdGhpcztcblx0XHRcdHZhciBlbGVtZW50cyA9IChlbGVtZW50LmRvY3VtZW50IHx8IGVsZW1lbnQub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cdFx0XHR2YXIgaW5kZXggPSAwO1xuXG5cdFx0XHR3aGlsZSAoZWxlbWVudHNbaW5kZXhdICYmIGVsZW1lbnRzW2luZGV4XSAhPT0gZWxlbWVudCkge1xuXHRcdFx0XHQrK2luZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gQm9vbGVhbihlbGVtZW50c1tpbmRleF0pO1xuXHRcdH07XG5cdH1cblxuXHRpZiAodHlwZW9mIEVsZW1lbnRQcm90by5jbG9zZXN0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0RWxlbWVudFByb3RvLmNsb3Nlc3QgPSBmdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IHRoaXM7XG5cblx0XHRcdHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH07XG5cdH1cbn0pKHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciAkYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJykoJ0FycmF5LnByb3RvdHlwZS5zbGljZScpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldFYgPSByZXF1aXJlKCcuL0dldFYnKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pbnZva2VcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJbnZva2UoTywgUCkge1xuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0dmFyIGFyZ3VtZW50c0xpc3QgPSAkYXJyYXlTbGljZShhcmd1bWVudHMsIDIpO1xuXHR2YXIgZnVuYyA9IEdldFYoTywgUCk7XG5cdHJldHVybiBDYWxsKGZ1bmMsIE8sIGFyZ3VtZW50c0xpc3QpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgYXNzZXJ0UmVjb3JkID0gcmVxdWlyZSgnLi4vaGVscGVycy9hc3NlcnRSZWNvcmQnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2RhdGFkZXNjcmlwdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNEYXRhRGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRhc3NlcnRSZWNvcmQoVHlwZSwgJ1Byb3BlcnR5IERlc2NyaXB0b3InLCAnRGVzYycsIERlc2MpO1xuXG5cdGlmICghaGFzKERlc2MsICdbW1ZhbHVlXV0nKSAmJiAhaGFzKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMTFcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQXJyYXlQcm90b3R5cGVJbmNsdWRlcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGluY2x1ZGVzOiBwb2x5ZmlsbCB9LFxuXHRcdHsgaW5jbHVkZXM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmNsdWRlcyAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZVByb21pc2UgPSByZXF1aXJlKCcuL3JlcXVpcmVQcm9taXNlJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmVxdWlyZVByb21pc2UoKTtcblx0cmV0dXJuIHR5cGVvZiBQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddID09PSAnZnVuY3Rpb24nID8gUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVZhbHVlcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyB2YWx1ZXM6IHBvbHlmaWxsIH0sIHtcblx0XHR2YWx1ZXM6IGZ1bmN0aW9uIHRlc3RWYWx1ZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcblx0Ly8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcblx0dmFyIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSB0cnVlO1xuXHR2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG5cdHZhciB0aHJld0V4Y2VwdGlvbiA9IGZhbHNlO1xuXHRpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuXHRcdFx0bWV0aG9kLmNhbGwoJ2YnLCBmdW5jdGlvbiAoXywgX18sIE8pIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBPICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1ldGhvZC5jYWxsKFxuXHRcdFx0XHRbbnVsbF0sXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHQndXNlIHN0cmljdCc7XG5cblx0XHRcdFx0XHRwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQneCdcblx0XHRcdCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyZXdFeGNlcHRpb24gPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gIXRocmV3RXhjZXB0aW9uICYmIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgJiYgcHJvcGVybHlCb3hlc1N0cmljdDtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdE1hcCB8fCBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gcmVxdWlyZSgnZnVuY3Rpb25zLWhhdmUtbmFtZXMnKSgpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgJGZ1bmN0aW9uVG9TdHJpbmcgPSBjYWxsQm91bmQoJ0Z1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyICRzdHJpbmdNYXRjaCA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5tYXRjaCcpO1xuXG52YXIgY2xhc3NSZWdleCA9IC9eY2xhc3MgLztcblxudmFyIGlzQ2xhc3MgPSBmdW5jdGlvbiBpc0NsYXNzQ29uc3RydWN0b3IoZm4pIHtcblx0aWYgKElzQ2FsbGFibGUoZm4pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHR2YXIgbWF0Y2ggPSAkc3RyaW5nTWF0Y2goJGZ1bmN0aW9uVG9TdHJpbmcoZm4pLCBjbGFzc1JlZ2V4KTtcblx0XHRyZXR1cm4gISFtYXRjaDtcblx0fSBjYXRjaCAoZSkge31cblx0cmV0dXJuIGZhbHNlO1xufTtcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW14oXFxzXSopXFxzKi87XG5cbnZhciBmdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG5cdGlmICghaXNDbGFzcyh0aGlzKSAmJiAhSXNDYWxsYWJsZSh0aGlzKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lIHNoYW0gZ2V0dGVyIGNhbGxlZCBvbiBub24tZnVuY3Rpb24nKTtcblx0fVxuXHRpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZTtcblx0fVxuXHRpZiAodGhpcyA9PT0gZnVuY3Rpb25Qcm90bykge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHR2YXIgc3RyID0gJGZ1bmN0aW9uVG9TdHJpbmcodGhpcyk7XG5cdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaChzdHIsIHJlZ2V4KTtcblx0dmFyIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcblx0cmV0dXJuIG5hbWU7XG59O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgOmZvY3VzLXZpc2libGUgcG9seWZpbGwgYXQgdGhlIGdpdmVuIHNjb3BlLlxuICAgKiBBIHNjb3BlIGluIHRoaXMgY2FzZSBpcyBlaXRoZXIgdGhlIHRvcC1sZXZlbCBEb2N1bWVudCBvciBhIFNoYWRvdyBSb290LlxuICAgKlxuICAgKiBAcGFyYW0geyhEb2N1bWVudHxTaGFkb3dSb290KX0gc2NvcGVcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsKHNjb3BlKSB7XG4gICAgdmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gICAgICB0ZXh0OiB0cnVlLFxuICAgICAgc2VhcmNoOiB0cnVlLFxuICAgICAgdXJsOiB0cnVlLFxuICAgICAgdGVsOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICAgIGRhdGU6IHRydWUsXG4gICAgICBtb250aDogdHJ1ZSxcbiAgICAgIHdlZWs6IHRydWUsXG4gICAgICB0aW1lOiB0cnVlLFxuICAgICAgZGF0ZXRpbWU6IHRydWUsXG4gICAgICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgbGVnYWN5IGJyb3dzZXJzIGFuZCBpZnJhbWVzIHdoaWNoIHNvbWV0aW1lcyBmb2N1c1xuICAgICAqIGVsZW1lbnRzIGxpa2UgZG9jdW1lbnQsIGJvZHksIGFuZCBub24taW50ZXJhY3RpdmUgU1ZHLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9jdXNUYXJnZXQoZWwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgZWwgJiZcbiAgICAgICAgZWwgIT09IGRvY3VtZW50ICYmXG4gICAgICAgIGVsLm5vZGVOYW1lICE9PSAnSFRNTCcgJiZcbiAgICAgICAgZWwubm9kZU5hbWUgIT09ICdCT0RZJyAmJlxuICAgICAgICAnY2xhc3NMaXN0JyBpbiBlbCAmJlxuICAgICAgICAnY29udGFpbnMnIGluIGVsLmNsYXNzTGlzdFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAgICAgKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gICAgICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZWwpIHtcbiAgICAgIHZhciB0eXBlID0gZWwudHlwZTtcbiAgICAgIHZhciB0YWdOYW1lID0gZWwudGFnTmFtZTtcblxuICAgICAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdCBhZGRlZCBieVxuICAgICAqIHRoZSBhdXRob3IuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGVsKSB7XG4gICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudCBpZiBpdCB3YXMgbm90XG4gICAgICogb3JpZ2luYWxseSBhZGRlZCBieSB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKCFlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gICAgICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gICAgICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAgICAgKiBBcHBseSBgZm9jdXMtdmlzaWJsZWAgdG8gYW55IGN1cnJlbnQgYWN0aXZlIGVsZW1lbnQgYW5kIGtlZXAgdHJhY2tcbiAgICAgKiBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVmFsaWRGb2N1c1RhcmdldChzY29wZS5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhzY29wZS5hY3RpdmVFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gICAgICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAgICAgKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICAgICAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAgICAgKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGUpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBgZm9jdXNgLCBhZGQgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byB0aGUgdGFyZ2V0IGlmOlxuICAgICAqIC0gdGhlIHRhcmdldCByZWNlaXZlZCBmb2N1cyBhcyBhIHJlc3VsdCBvZiBrZXlib2FyZCBuYXZpZ2F0aW9uLCBvclxuICAgICAqIC0gdGhlIGV2ZW50IHRhcmdldCBpcyBhbiBlbGVtZW50IHRoYXQgd2lsbCBsaWtlbHkgcmVxdWlyZSBpbnRlcmFjdGlvblxuICAgICAqICAgdmlhIHRoZSBrZXlib2FyZCAoZS5nLiBhIHRleHQgYm94KVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkZvY3VzKGUpIHtcbiAgICAgIC8vIFByZXZlbnQgSUUgZnJvbSBmb2N1c2luZyB0aGUgZG9jdW1lbnQgb3IgSFRNTCBlbGVtZW50LlxuICAgICAgaWYgKCFpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZS50YXJnZXQpKSB7XG4gICAgICAgIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBgYmx1cmAsIHJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIHRhcmdldC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25CbHVyKGUpIHtcbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykgfHxcbiAgICAgICAgZS50YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKVxuICAgICAgKSB7XG4gICAgICAgIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICAgIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBjaGFuZ2VzIHRhYnMsIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgdGhlIHByZXZpb3VzbHlcbiAgICAgKiBmb2N1c2VkIGVsZW1lbnQgaGFkIC5mb2N1cy12aXNpYmxlLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoZSkge1xuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgICAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAgICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICAgICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgZ3JvdXAgb2YgbGlzdGVuZXJzIHRvIGRldGVjdCB1c2FnZSBvZiBhbnkgcG9pbnRpbmcgZGV2aWNlcy5cbiAgICAgKiBUaGVzZSBsaXN0ZW5lcnMgd2lsbCBiZSBhZGRlZCB3aGVuIHRoZSBwb2x5ZmlsbCBmaXJzdCBsb2FkcywgYW5kIGFueXRpbWVcbiAgICAgKiB0aGUgd2luZG93IGlzIGJsdXJyZWQsIHNvIHRoYXQgdGhleSBhcmUgYWN0aXZlIHdoZW4gdGhlIHdpbmRvdyByZWdhaW5zXG4gICAgICogZm9jdXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgcG9sZnlpbGwgZmlyc3QgbG9hZHMsIGFzc3VtZSB0aGUgdXNlciBpcyBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBJZiBhbnkgZXZlbnQgaXMgcmVjZWl2ZWQgZnJvbSBhIHBvaW50aW5nIGRldmljZSAoZS5nLiBtb3VzZSwgcG9pbnRlcixcbiAgICAgKiB0b3VjaCksIHR1cm4gb2ZmIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIFRoaXMgYWNjb3VudHMgZm9yIHNpdHVhdGlvbnMgd2hlcmUgZm9jdXMgZW50ZXJzIHRoZSBwYWdlIGZyb20gdGhlIFVSTCBiYXIuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKGUpIHtcbiAgICAgIC8vIFdvcmsgYXJvdW5kIGEgU2FmYXJpIHF1aXJrIHRoYXQgZmlyZXMgYSBtb3VzZW1vdmUgb24gPGh0bWw+IHdoZW5ldmVyIHRoZVxuICAgICAgLy8gd2luZG93IGJsdXJzLCBldmVuIGlmIHlvdSdyZSB0YWJiaW5nIG91dCBvZiB0aGUgcGFnZS4gwq9cXF8o44OEKV8vwq9cbiAgICAgIGlmIChlLnRhcmdldC5ub2RlTmFtZSAmJiBlLnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgICByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBGb3Igc29tZSBraW5kcyBvZiBzdGF0ZSwgd2UgYXJlIGludGVyZXN0ZWQgaW4gY2hhbmdlcyBhdCB0aGUgZ2xvYmFsIHNjb3BlXG4gICAgLy8gb25seS4gRm9yIGV4YW1wbGUsIGdsb2JhbCBwb2ludGVyIGlucHV0LCBnbG9iYWwga2V5IHByZXNzZXMgYW5kIGdsb2JhbFxuICAgIC8vIHZpc2liaWxpdHkgY2hhbmdlIHNob3VsZCBhZmZlY3QgdGhlIHN0YXRlIGF0IGV2ZXJ5IHNjb3BlOlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xuXG4gICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICAvLyBGb3IgZm9jdXMgYW5kIGJsdXIsIHdlIHNwZWNpZmljYWxseSBjYXJlIGFib3V0IHN0YXRlIGNoYW5nZXMgaW4gdGhlIGxvY2FsXG4gICAgLy8gc2NvcGUuIFRoaXMgaXMgYmVjYXVzZSBmb2N1cyAvIGJsdXIgZXZlbnRzIHRoYXQgb3JpZ2luYXRlIGZyb20gd2l0aGluIGFcbiAgICAvLyBzaGFkb3cgcm9vdCBhcmUgbm90IHJlLWRpc3BhdGNoZWQgZnJvbSB0aGUgaG9zdCBlbGVtZW50IGlmIGl0IHdhcyBhbHJlYWR5XG4gICAgLy8gdGhlIGFjdGl2ZSBlbGVtZW50IGluIGl0cyBvd24gc2NvcGU6XG4gICAgc2NvcGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbkZvY3VzLCB0cnVlKTtcbiAgICBzY29wZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25CbHVyLCB0cnVlKTtcblxuICAgIC8vIFdlIGRldGVjdCB0aGF0IGEgbm9kZSBpcyBhIFNoYWRvd1Jvb3QgYnkgZW5zdXJpbmcgdGhhdCBpdCBpcyBhXG4gICAgLy8gRG9jdW1lbnRGcmFnbWVudCBhbmQgYWxzbyBoYXMgYSBob3N0IHByb3BlcnR5LiBUaGlzIGNoZWNrIGNvdmVycyBuYXRpdmVcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBhbmQgcG9seWZpbGwgaW1wbGVtZW50YXRpb24gdHJhbnNwYXJlbnRseS4gSWYgd2Ugb25seSBjYXJlZFxuICAgIC8vIGFib3V0IHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIHdlIGNvdWxkIGp1c3QgY2hlY2sgaWYgdGhlIHNjb3BlIHdhc1xuICAgIC8vIGFuIGluc3RhbmNlIG9mIGEgU2hhZG93Um9vdC5cbiAgICBpZiAoc2NvcGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSAmJiBzY29wZS5ob3N0KSB7XG4gICAgICAvLyBTaW5jZSBhIFNoYWRvd1Jvb3QgaXMgYSBzcGVjaWFsIGtpbmQgb2YgRG9jdW1lbnRGcmFnbWVudCwgaXQgZG9lcyBub3RcbiAgICAgIC8vIGhhdmUgYSByb290IGVsZW1lbnQgdG8gYWRkIGEgY2xhc3MgdG8uIFNvLCB3ZSBhZGQgdGhpcyBhdHRyaWJ1dGUgdG8gdGhlXG4gICAgICAvLyBob3N0IGVsZW1lbnQgaW5zdGVhZDpcbiAgICAgIHNjb3BlLmhvc3Quc2V0QXR0cmlidXRlKCdkYXRhLWpzLWZvY3VzLXZpc2libGUnLCAnJyk7XG4gICAgfSBlbHNlIGlmIChzY29wZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKSB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnanMtZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qcy1mb2N1cy12aXNpYmxlJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEl0IGlzIGltcG9ydGFudCB0byB3cmFwIGFsbCByZWZlcmVuY2VzIHRvIGdsb2JhbCB3aW5kb3cgYW5kIGRvY3VtZW50IGluXG4gIC8vIHRoZXNlIGNoZWNrcyB0byBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZyB1c2UgY2FzZXNcbiAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2lzc3Vlcy8xOTlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBNYWtlIHRoZSBwb2x5ZmlsbCBoZWxwZXIgZ2xvYmFsbHkgYXZhaWxhYmxlLiBUaGlzIGNhbiBiZSB1c2VkIGFzIGEgc2lnbmFsXG4gICAgLy8gdG8gaW50ZXJlc3RlZCBsaWJyYXJpZXMgdGhhdCB3aXNoIHRvIGNvb3JkaW5hdGUgd2l0aCB0aGUgcG9seWZpbGwgZm9yIGUuZy4sXG4gICAgLy8gYXBwbHlpbmcgdGhlIHBvbHlmaWxsIHRvIGEgc2hhZG93IHJvb3Q6XG4gICAgd2luZG93LmFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwgPSBhcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsO1xuXG4gICAgLy8gTm90aWZ5IGludGVyZXN0ZWQgbGlicmFyaWVzIG9mIHRoZSBwb2x5ZmlsbCdzIHByZXNlbmNlLCBpbiBjYXNlIHRoZVxuICAgIC8vIHBvbHlmaWxsIHdhcyBsb2FkZWQgbGF6aWx5OlxuICAgIHZhciBldmVudDtcblxuICAgIHRyeSB7XG4gICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnZm9jdXMtdmlzaWJsZS1wb2x5ZmlsbC1yZWFkeScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgdXNpbmcgQ3VzdG9tRXZlbnQgYXMgYSBjb25zdHJ1Y3RvciBkaXJlY3RseTpcbiAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldmVudC5pbml0Q3VzdG9tRXZlbnQoJ2ZvY3VzLXZpc2libGUtcG9seWZpbGwtcmVhZHknLCBmYWxzZSwgZmFsc2UsIHt9KTtcbiAgICB9XG5cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEFwcGx5IHRoZSBwb2x5ZmlsbCB0byB0aGUgZ2xvYmFsIGRvY3VtZW50LCBzbyB0aGF0IG5vIEphdmFTY3JpcHRcbiAgICAvLyBjb29yZGluYXRpb24gaXMgcmVxdWlyZWQgdG8gdXNlIHRoZSBwb2x5ZmlsbCBpbiB0aGUgdG9wLWxldmVsIGRvY3VtZW50OlxuICAgIGFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwoZG9jdW1lbnQpO1xuICB9XG5cbn0pKSk7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiXG5cbiAgaWYgKCFzZWxmLmRvY3VtZW50KSByZXR1cm5cblxuICB2YXIgZXZlbnQgPSBLZXlib2FyZEV2ZW50LnByb3RvdHlwZVxuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZXZlbnQsIFwia2V5XCIpXG4gIGlmICghZGVzYykgcmV0dXJuXG5cbiAgdmFyIGtleXMgPSB7XG4gICAgV2luOiBcIk1ldGFcIixcbiAgICBTY3JvbGw6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIFNwYWNlYmFyOiBcIiBcIixcblxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBSaWdodDogXCJBcnJvd1JpZ2h0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIEFwcHM6IFwiQ29udGV4dE1lbnVcIixcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG5cbiAgICBNdWx0aXBseTogXCIqXCIsXG4gICAgQWRkOiBcIitcIixcbiAgICBTdWJ0cmFjdDogXCItXCIsXG4gICAgRGVjaW1hbDogXCIuXCIsXG4gICAgRGl2aWRlOiBcIi9cIixcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJrZXlcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gZGVzYy5nZXQuY2FsbCh0aGlzKVxuXG4gICAgICByZXR1cm4ga2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpID8ga2V5c1trZXldIDoga2V5XG4gICAgfSxcbiAgfSlcbn0pKClcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEl0ZXJhdG9yQ29tcGxldGUgPSByZXF1aXJlKCcuL0l0ZXJhdG9yQ29tcGxldGUnKTtcbnZhciBJdGVyYXRvck5leHQgPSByZXF1aXJlKCcuL0l0ZXJhdG9yTmV4dCcpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JzdGVwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKSB7XG5cdHZhciByZXN1bHQgPSBJdGVyYXRvck5leHQoaXRlcmF0b3IpO1xuXHR2YXIgZG9uZSA9IEl0ZXJhdG9yQ29tcGxldGUocmVzdWx0KTtcblx0cmV0dXJuIGRvbmUgPT09IHRydWUgPyBmYWxzZSA6IHJlc3VsdDtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCcuL0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnLi9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnLi9Ub1N0cmluZycpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvMTAuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIG1heC1zdGF0ZW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoKSB7XG5cdHZhciBtYXBwZXJGdW5jdGlvbjtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1KSB7XG5cdFx0bWFwcGVyRnVuY3Rpb24gPSBhcmd1bWVudHNbNV07XG5cdH1cblxuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBUb1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBHZXQoc291cmNlLCBQKTtcblx0XHRcdGlmICh0eXBlb2YgbWFwcGVyRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDYpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IENhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaG91bGRGbGF0dGVuID0gZmFsc2U7XG5cdFx0XHRpZiAoZGVwdGggPiAwKSB7XG5cdFx0XHRcdHNob3VsZEZsYXR0ZW4gPSBJc0FycmF5KGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZEZsYXR0ZW4pIHtcblx0XHRcdFx0dmFyIGVsZW1lbnRMZW4gPSBUb0xlbmd0aChHZXQoZWxlbWVudCwgJ2xlbmd0aCcpKTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggPSBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGFyZ2V0SW5kZXggPj0gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwtcmVnZXhwLW1hdGNoYWxsJyk7XG5cbnZhciBkZWZpbmVQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1NYXRjaEFsbCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdFN0cmluZy5wcm90b3R5cGUsXG5cdFx0eyBtYXRjaEFsbDogcG9seWZpbGwgfSxcblx0XHR7IG1hdGNoQWxsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdHZhciBzeW1ib2wgPSBTeW1ib2wubWF0Y2hBbGwgfHwgKFN5bWJvbFsnZm9yJ10gPyBTeW1ib2xbJ2ZvciddKCdTeW1ib2wubWF0Y2hBbGwnKSA6IFN5bWJvbCgnU3ltYm9sLm1hdGNoQWxsJykpO1xuXHRcdGRlZmluZShcblx0XHRcdFN5bWJvbCxcblx0XHRcdHsgbWF0Y2hBbGw6IHN5bWJvbCB9LFxuXHRcdFx0eyBtYXRjaEFsbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3ltYm9sLm1hdGNoQWxsICE9PSBzeW1ib2w7IH0gfVxuXHRcdCk7XG5cblx0XHRpZiAoZGVmaW5lUCAmJiBnT1BEKSB7XG5cdFx0XHR2YXIgZGVzYyA9IGdPUEQoU3ltYm9sLCBzeW1ib2wpO1xuXHRcdFx0aWYgKCFkZXNjIHx8IGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRcdGRlZmluZVAoU3ltYm9sLCBzeW1ib2wsIHtcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbHVlOiBzeW1ib2wsXG5cdFx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciByZWdleHBNYXRjaEFsbCA9IHJlZ2V4cE1hdGNoQWxsUG9seWZpbGwoKTtcblx0XHR2YXIgZnVuYyA9IHt9O1xuXHRcdGZ1bmNbc3ltYm9sXSA9IHJlZ2V4cE1hdGNoQWxsO1xuXHRcdHZhciBwcmVkaWNhdGUgPSB7fTtcblx0XHRwcmVkaWNhdGVbc3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBSZWdFeHAucHJvdG90eXBlW3N5bWJvbF0gIT09IHJlZ2V4cE1hdGNoQWxsO1xuXHRcdH07XG5cdFx0ZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIGZ1bmMsIHByZWRpY2F0ZSk7XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb250YWlucyhvdGhlcikge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBvdGhlciAhPT0gJ29iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCAxICjigJ1vdGhlcuKAnCkgdG8gTm9kZS5jb250YWlucyBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIE5vZGUnKTtcblx0fVxuXG5cdHZhciBub2RlID0gb3RoZXI7XG5cdGRvIHtcblx0XHRpZiAodGhpcyA9PT0gbm9kZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmIChub2RlKSB7XG5cdFx0XHRub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRcdH1cblx0fSB3aGlsZSAobm9kZSk7XG5cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIFRvQm9vbGVhbiA9IHJlcXVpcmUoJy4vVG9Cb29sZWFuJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3Jjb21wbGV0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEl0ZXJhdG9yQ29tcGxldGUoaXRlclJlc3VsdCkge1xuXHRpZiAoVHlwZShpdGVyUmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyUmVzdWx0KSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0cmV0dXJuIFRvQm9vbGVhbihHZXQoaXRlclJlc3VsdCwgJ2RvbmUnKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnNsaWNlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xudmFyIGJvdW5kTWFwU2hpbSA9IGZ1bmN0aW9uIG1hcChhcnJheSwgY2FsbGJhY2tmbikge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFycmF5KTtcblx0cmV0dXJuIHBvbHlmaWxsLmFwcGx5KGFycmF5LCAkc2xpY2UoYXJndW1lbnRzLCAxKSk7XG59O1xuZGVmaW5lKGJvdW5kTWFwU2hpbSwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmRNYXBTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcnZhbHVlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KSB7XG5cdGlmIChUeXBlKGl0ZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJSZXN1bHQpIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gR2V0KGl0ZXJSZXN1bHQsICd2YWx1ZScpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkQXJyYXkgPSBHZXRJbnRyaW5zaWMoJyVBcnJheSUnKTtcbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgSXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9Jc0ludGVnZXInKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdGlmICghSXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAnKTtcblx0fVxuXHR2YXIgbGVuID0gbGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aDtcblx0dmFyIEM7XG5cdHZhciBpc0FycmF5ID0gSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0aWYgKGlzQXJyYXkpIHtcblx0XHRDID0gR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHRcdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHRcdC8vIGlmIChJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0Ly8gXHRpZiBDIGlzIGFub3RoZXIgcmVhbG0ncyBBcnJheSwgQyA9IHVuZGVmaW5lZFxuXHRcdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHRcdC8vIH1cblx0XHRpZiAoJHNwZWNpZXMgJiYgVHlwZShDKSA9PT0gJ09iamVjdCcpIHtcblx0XHRcdEMgPSBHZXQoQywgJHNwZWNpZXMpO1xuXHRcdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdFx0QyA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiAkQXJyYXkobGVuKTtcblx0fVxuXHRpZiAoIUlzQ29uc3RydWN0b3IoQykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0fVxuXHRyZXR1cm4gbmV3IEMobGVuKTsgLy8gQ29uc3RydWN0KEMsIGxlbik7XG59O1xuXG4iLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW1cbiAqIEBsaWNlbnNlIGVzNi1zaGltIENvcHlyaWdodCAyMDEzLTIwMTYgYnkgUGF1bCBNaWxsZXIgKGh0dHA6Ly9wYXVsbWlsbHIuY29tKVxuICogICBhbmQgY29udHJpYnV0b3JzLCAgTUlUIExpY2Vuc2VcbiAqIGVzNi1zaGltOiB2MC4zNS40XG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbS9ibG9iLzAuMzUuMy9MSUNFTlNFXG4gKiBEZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbS9cbiAqL1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbilcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAvKmdsb2JhbCBkZWZpbmUsIG1vZHVsZSwgZXhwb3J0cyAqL1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAvLyBsaWtlIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICByb290LnJldHVybkV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIF9hcHBseSA9IEZ1bmN0aW9uLmNhbGwuYmluZChGdW5jdGlvbi5hcHBseSk7XG4gIHZhciBfY2FsbCA9IEZ1bmN0aW9uLmNhbGwuYmluZChGdW5jdGlvbi5jYWxsKTtcbiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzO1xuXG4gIHZhciBub3QgPSBmdW5jdGlvbiBub3RUaHVua2VyKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbm90VGh1bmsoKSB7XG4gICAgICByZXR1cm4gIV9hcHBseShmdW5jLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG4gIHZhciB0aHJvd3NFcnJvciA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZ1bmMoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHZhciB2YWx1ZU9yRmFsc2VJZlRocm93cyA9IGZ1bmN0aW9uIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmMoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0NhbGxhYmxlV2l0aG91dE5ldyA9IG5vdCh0aHJvd3NFcnJvcik7XG4gIHZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGlmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBleGlzdHMgYnV0IHRocm93cywgaXQncyBJRSA4XG4gICAgcmV0dXJuICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IH0gfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2V0dGVyLXJldHVyblxuICAgIH0pO1xuICB9O1xuICB2YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcbiAgdmFyIGZ1bmN0aW9uc0hhdmVOYW1lcyA9IChmdW5jdGlvbiBmb28oKSB7fSkubmFtZSA9PT0gJ2Zvbyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cbiAgdmFyIF9mb3JFYWNoID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKTtcbiAgdmFyIF9yZWR1Y2UgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnJlZHVjZSk7XG4gIHZhciBfZmlsdGVyID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5maWx0ZXIpO1xuICB2YXIgX3NvbWUgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnNvbWUpO1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBmb3JjZSkge1xuICAgIGlmICghZm9yY2UgJiYgbmFtZSBpbiBvYmplY3QpIHsgcmV0dXJuOyB9XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICAvLyBEZWZpbmUgY29uZmlndXJhYmxlLCB3cml0YWJsZSBhbmQgbm9uLWVudW1lcmFibGUgcHJvcHNcbiAgLy8gaWYgdGhleSBkb27igJl0IGV4aXN0LlxuICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCwgZm9yY2VPdmVycmlkZSkge1xuICAgIF9mb3JFYWNoKGtleXMobWFwKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBtZXRob2QgPSBtYXBbbmFtZV07XG4gICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIG1ldGhvZCwgISFmb3JjZU92ZXJyaWRlKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgX3RvU3RyaW5nID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgaXNDYWxsYWJsZSA9IHR5cGVvZiAvYWJjLyA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uIElzQ2FsbGFibGVTbG93KHgpIHtcbiAgICAvLyBTb21lIG9sZCBicm93c2VycyAoSUUsIEZGKSBzYXkgdGhhdCB0eXBlb2YgL2FiYy8gPT09ICdmdW5jdGlvbidcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgJiYgX3RvU3RyaW5nKHgpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9IDogZnVuY3Rpb24gSXNDYWxsYWJsZUZhc3QoeCkgeyByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7IH07XG5cbiAgdmFyIFZhbHVlID0ge1xuICAgIGdldHRlcjogZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgZ2V0dGVyKSB7XG4gICAgICBpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0dGVycyByZXF1aXJlIHRydWUgRVM1IHN1cHBvcnQnKTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHJveHk6IGZ1bmN0aW9uIChvcmlnaW5hbE9iamVjdCwga2V5LCB0YXJnZXRPYmplY3QpIHtcbiAgICAgIGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXJzIHJlcXVpcmUgdHJ1ZSBFUzUgc3VwcG9ydCcpO1xuICAgICAgfVxuICAgICAgdmFyIG9yaWdpbmFsRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3JpZ2luYWxPYmplY3QsIGtleSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0T2JqZWN0LCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBvcmlnaW5hbERlc2NyaXB0b3IuY29uZmlndXJhYmxlLFxuICAgICAgICBlbnVtZXJhYmxlOiBvcmlnaW5hbERlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXRLZXkoKSB7IHJldHVybiBvcmlnaW5hbE9iamVjdFtrZXldOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldEtleSh2YWx1ZSkgeyBvcmlnaW5hbE9iamVjdFtrZXldID0gdmFsdWU7IH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVkZWZpbmU6IGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5LCBuZXdWYWx1ZSkge1xuICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlZmluZUJ5RGVzY3JpcHRvcjogZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJlc2VydmVUb1N0cmluZzogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlICYmIGlzQ2FsbGFibGUoc291cmNlLnRvU3RyaW5nKSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsICd0b1N0cmluZycsIHNvdXJjZS50b1N0cmluZy5iaW5kKHNvdXJjZSksIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBTaW1wbGUgc2hpbSBmb3IgT2JqZWN0LmNyZWF0ZSBvbiBFUzMgYnJvd3NlcnNcbiAgLy8gKHVubGlrZSByZWFsIHNoaW0sIG5vIGF0dGVtcHQgdG8gc3VwcG9ydCBgcHJvdG90eXBlID09PSBudWxsYClcbiAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgIHZhciBQcm90b3R5cGUgPSBmdW5jdGlvbiBQcm90b3R5cGUoKSB7fTtcbiAgICBQcm90b3R5cGUucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHZhciBvYmplY3QgPSBuZXcgUHJvdG90eXBlKCk7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAga2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgVmFsdWUuZGVmaW5lQnlEZXNjcmlwdG9yKG9iamVjdCwga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG5cbiAgdmFyIHN1cHBvcnRzU3ViY2xhc3NpbmcgPSBmdW5jdGlvbiAoQywgZikge1xuICAgIGlmICghT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7IHJldHVybiBmYWxzZTsgLyogc2tpcCB0ZXN0IG9uIElFIDwgMTEgKi8gfVxuICAgIHJldHVybiB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgU3ViID0gZnVuY3Rpb24gU3ViY2xhc3MoYXJnKSB7XG4gICAgICAgIHZhciBvID0gbmV3IEMoYXJnKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG8sIFN1YmNsYXNzLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihTdWIsIEMpO1xuICAgICAgU3ViLnByb3RvdHlwZSA9IGNyZWF0ZShDLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogU3ViIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGYoU3ViKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gKCkge1xuICAgIC8qIGdsb2JhbCBzZWxmLCB3aW5kb3csIGdsb2JhbCAqL1xuICAgIC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuICAgIC8vIGBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpYFxuICAgIC8vIEhvd2V2ZXIsIHRoaXMgY2F1c2VzIENTUCB2aW9sYXRpb25zIGluIENocm9tZSBhcHBzLlxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHdpbmRvdzsgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbiAgfTtcblxuICB2YXIgZ2xvYmFscyA9IGdldEdsb2JhbCgpO1xuICB2YXIgZ2xvYmFsSXNGaW5pdGUgPSBnbG9iYWxzLmlzRmluaXRlO1xuICB2YXIgX2luZGV4T2YgPSBGdW5jdGlvbi5jYWxsLmJpbmQoU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mKTtcbiAgdmFyIF9hcnJheUluZGV4T2ZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5LmJpbmQoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpO1xuICB2YXIgX2NvbmNhdCA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbiAgLy8gdmFyIF9zb3J0ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5zb3J0KTtcbiAgdmFyIF9zdHJTbGljZSA9IEZ1bmN0aW9uLmNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcbiAgdmFyIF9wdXNoID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgdmFyIF9wdXNoQXBwbHkgPSBGdW5jdGlvbi5hcHBseS5iaW5kKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgdmFyIF9zaGlmdCA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuc2hpZnQpO1xuICB2YXIgX21heCA9IE1hdGgubWF4O1xuICB2YXIgX21pbiA9IE1hdGgubWluO1xuICB2YXIgX2Zsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIF9hYnMgPSBNYXRoLmFicztcbiAgdmFyIF9leHAgPSBNYXRoLmV4cDtcbiAgdmFyIF9sb2cgPSBNYXRoLmxvZztcbiAgdmFyIF9zcXJ0ID0gTWF0aC5zcXJ0O1xuICB2YXIgX2hhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICB2YXIgQXJyYXlJdGVyYXRvcjsgLy8gbWFrZSBvdXIgaW1wbGVtZW50YXRpb24gcHJpdmF0ZVxuICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHZhciBPcmlnTWFwID0gZ2xvYmFscy5NYXA7XG4gIHZhciBvcmlnTWFwRGVsZXRlID0gT3JpZ01hcCAmJiBPcmlnTWFwLnByb3RvdHlwZVsnZGVsZXRlJ107XG4gIHZhciBvcmlnTWFwR2V0ID0gT3JpZ01hcCAmJiBPcmlnTWFwLnByb3RvdHlwZS5nZXQ7XG4gIHZhciBvcmlnTWFwSGFzID0gT3JpZ01hcCAmJiBPcmlnTWFwLnByb3RvdHlwZS5oYXM7XG4gIHZhciBvcmlnTWFwU2V0ID0gT3JpZ01hcCAmJiBPcmlnTWFwLnByb3RvdHlwZS5zZXQ7XG5cbiAgdmFyIFN5bWJvbCA9IGdsb2JhbHMuU3ltYm9sIHx8IHt9O1xuICB2YXIgc3ltYm9sU3BlY2llcyA9IFN5bWJvbC5zcGVjaWVzIHx8ICdAQHNwZWNpZXMnO1xuXG4gIHZhciBudW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgIC8vIE5hTiAhPT0gTmFOLCBidXQgdGhleSBhcmUgaWRlbnRpY2FsLlxuICAgIC8vIE5hTnMgYXJlIHRoZSBvbmx5IG5vbi1yZWZsZXhpdmUgdmFsdWUsIGkuZS4sIGlmIHggIT09IHgsXG4gICAgLy8gdGhlbiB4IGlzIE5hTi5cbiAgICAvLyBpc05hTiBpcyBicm9rZW46IGl0IGNvbnZlcnRzIGl0cyBhcmd1bWVudCB0byBudW1iZXIsIHNvXG4gICAgLy8gaXNOYU4oJ2ZvbycpID0+IHRydWVcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9O1xuICB2YXIgbnVtYmVySXNGaW5pdGUgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBnbG9iYWxJc0Zpbml0ZSh2YWx1ZSk7XG4gIH07XG4gIHZhciBfc2lnbiA9IGlzQ2FsbGFibGUoTWF0aC5zaWduKSA/IE1hdGguc2lnbiA6IGZ1bmN0aW9uIHNpZ24odmFsdWUpIHtcbiAgICB2YXIgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAobnVtYmVyID09PSAwKSB7IHJldHVybiBudW1iZXI7IH1cbiAgICBpZiAobnVtYmVySXNOYU4obnVtYmVyKSkgeyByZXR1cm4gbnVtYmVyOyB9XG4gICAgcmV0dXJuIG51bWJlciA8IDAgPyAtMSA6IDE7XG4gIH07XG4gIHZhciBfbG9nMXAgPSBmdW5jdGlvbiBsb2cxcCh2YWx1ZSkge1xuICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoeCA8IC0xIHx8IG51bWJlcklzTmFOKHgpKSB7IHJldHVybiBOYU47IH1cbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBJbmZpbml0eSkgeyByZXR1cm4geDsgfVxuICAgIGlmICh4ID09PSAtMSkgeyByZXR1cm4gLUluZmluaXR5OyB9XG5cbiAgICByZXR1cm4gKDEgKyB4KSAtIDEgPT09IDAgPyB4IDogeCAqIChfbG9nKDEgKyB4KSAvICgoMSArIHgpIC0gMSkpO1xuICB9O1xuXG4gIC8vIHRha2VuIGRpcmVjdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9pcy1hcmd1bWVudHMvYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgLy8gY2FuIGJlIHJlcGxhY2VkIHdpdGggcmVxdWlyZSgnaXMtYXJndW1lbnRzJykgaWYgd2UgZXZlciB1c2UgYSBidWlsZCBwcm9jZXNzIGluc3RlYWRcbiAgdmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgIHJldHVybiBfdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbiAgfTtcbiAgdmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG4gICAgICB2YWx1ZS5sZW5ndGggPj0gMCAmJlxuICAgICAgX3RvU3RyaW5nKHZhbHVlKSAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuICAgICAgX3RvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG4gIHZhciBpc0FyZ3VtZW50cyA9IGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKSA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcblxuICB2YXIgVHlwZSA9IHtcbiAgICBwcmltaXRpdmU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ID09PSBudWxsIHx8ICh0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgeCAhPT0gJ29iamVjdCcpOyB9LFxuICAgIHN0cmluZzogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIF90b1N0cmluZyh4KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7IH0sXG4gICAgcmVnZXg6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBfdG9TdHJpbmcoeCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nOyB9LFxuICAgIHN5bWJvbDogZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZ2xvYmFscy5TeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHggPT09ICdzeW1ib2wnO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb3ZlcnJpZGVOYXRpdmUgPSBmdW5jdGlvbiBvdmVycmlkZU5hdGl2ZShvYmplY3QsIHByb3BlcnR5LCByZXBsYWNlbWVudCkge1xuICAgIHZhciBvcmlnaW5hbCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgcmVwbGFjZW1lbnQsIHRydWUpO1xuICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcob2JqZWN0W3Byb3BlcnR5XSwgb3JpZ2luYWwpO1xuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgdmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nICYmIFR5cGUuc3ltYm9sKFN5bWJvbCgpKTtcblxuICAvLyBUaGlzIGlzIGEgcHJpdmF0ZSBuYW1lIGluIHRoZSBlczYgc3BlYywgZXF1YWwgdG8gJ1tTeW1ib2wuaXRlcmF0b3JdJ1xuICAvLyB3ZSdyZSBnb2luZyB0byB1c2UgYW4gYXJiaXRyYXJ5IF8tcHJlZml4ZWQgbmFtZSB0byBtYWtlIG91ciBzaGltc1xuICAvLyB3b3JrIHByb3Blcmx5IHdpdGggZWFjaCBvdGhlciwgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgaGF2ZSBmdWxsIEl0ZXJhdG9yXG4gIC8vIHN1cHBvcnQuICBUaGF0IGlzLCBgQXJyYXkuZnJvbShtYXAua2V5cygpKWAgd2lsbCB3b3JrLCBidXQgd2UgZG9uJ3RcbiAgLy8gcHJldGVuZCB0byBleHBvcnQgYSBcInJlYWxcIiBJdGVyYXRvciBpbnRlcmZhY2UuXG4gIHZhciAkaXRlcmF0b3IkID0gVHlwZS5zeW1ib2woU3ltYm9sLml0ZXJhdG9yKSA/IFN5bWJvbC5pdGVyYXRvciA6ICdfZXM2LXNoaW0gaXRlcmF0b3JfJztcbiAgLy8gRmlyZWZveCBzaGlwcyBhIHBhcnRpYWwgaW1wbGVtZW50YXRpb24gdXNpbmcgdGhlIG5hbWUgQEBpdGVyYXRvci5cbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTA3MDc3I2MxNFxuICAvLyBTbyB1c2UgdGhhdCBuYW1lIGlmIHdlIGRldGVjdCBpdC5cbiAgaWYgKGdsb2JhbHMuU2V0ICYmIHR5cGVvZiBuZXcgZ2xvYmFscy5TZXQoKVsnQEBpdGVyYXRvciddID09PSAnZnVuY3Rpb24nKSB7XG4gICAgJGl0ZXJhdG9yJCA9ICdAQGl0ZXJhdG9yJztcbiAgfVxuXG4gIC8vIFJlZmxlY3RcbiAgaWYgKCFnbG9iYWxzLlJlZmxlY3QpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLCAnUmVmbGVjdCcsIHt9LCB0cnVlKTtcbiAgfVxuICB2YXIgUmVmbGVjdCA9IGdsb2JhbHMuUmVmbGVjdDtcblxuICB2YXIgJFN0cmluZyA9IFN0cmluZztcblxuICAvKiBnbG9iYWwgZG9jdW1lbnQgKi9cbiAgdmFyIGRvbUFsbCA9ICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICFkb2N1bWVudCkgPyBudWxsIDogZG9jdW1lbnQuYWxsO1xuICB2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSBkb21BbGwgPT0gbnVsbCA/IGZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsO1xuICB9IDogZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWRBbmROb3REb2N1bWVudEFsbCh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCAmJiB4ICE9PSBkb21BbGw7XG4gIH07XG5cbiAgdmFyIEVTID0ge1xuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jYWxsXG4gICAgQ2FsbDogZnVuY3Rpb24gQ2FsbChGLCBWKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUoRikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9hcHBseShGLCBWLCBhcmdzKTtcbiAgICB9LFxuXG4gICAgUmVxdWlyZU9iamVjdENvZXJjaWJsZTogZnVuY3Rpb24gKHgsIG9wdE1lc3NhZ2UpIHtcbiAgICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh4KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG9wdE1lc3NhZ2UgfHwgJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuXG4gICAgLy8gVGhpcyBtaWdodCBtaXNzIHRoZSBcIihub24tc3RhbmRhcmQgZXhvdGljIGFuZCBkb2VzIG5vdCBpbXBsZW1lbnRcbiAgICAvLyBbW0NhbGxdXSlcIiBjYXNlIGZyb21cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdHlwZW9mLW9wZXJhdG9yLXJ1bnRpbWUtc2VtYW50aWNzLWV2YWx1YXRpb25cbiAgICAvLyBidXQgd2UgY2FuJ3QgZmluZCBhbnkgZXZpZGVuY2UgdGhlc2Ugb2JqZWN0cyBleGlzdCBpbiBwcmFjdGljZS5cbiAgICAvLyBJZiB3ZSBmaW5kIHNvbWUgaW4gdGhlIGZ1dHVyZSwgeW91IGNvdWxkIHRlc3QgYE9iamVjdCh4KSA9PT0geGAsXG4gICAgLy8gd2hpY2ggaXMgcmVsaWFibGUgYWNjb3JkaW5nIHRvXG4gICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvb2JqZWN0XG4gICAgLy8gYnV0IGlzIG5vdCB3ZWxsIG9wdGltaXplZCBieSBydW50aW1lcyBhbmQgY3JlYXRlcyBhbiBvYmplY3RcbiAgICAvLyB3aGVuZXZlciBpdCByZXR1cm5zIGZhbHNlLCBhbmQgdGh1cyBpcyB2ZXJ5IHNsb3cuXG4gICAgVHlwZUlzT2JqZWN0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKHggPT09IHZvaWQgMCB8fCB4ID09PSBudWxsIHx8IHggPT09IHRydWUgfHwgeCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0JyB8fCB4ID09PSBkb21BbGw7XG4gICAgfSxcblxuICAgIFRvT2JqZWN0OiBmdW5jdGlvbiAobywgb3B0TWVzc2FnZSkge1xuICAgICAgcmV0dXJuIE9iamVjdChFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKG8sIG9wdE1lc3NhZ2UpKTtcbiAgICB9LFxuXG4gICAgSXNDYWxsYWJsZTogaXNDYWxsYWJsZSxcblxuICAgIElzQ29uc3RydWN0b3I6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAvLyBXZSBjYW4ndCB0ZWxsIGNhbGxhYmxlcyBmcm9tIGNvbnN0cnVjdG9ycyBpbiBFUzVcbiAgICAgIHJldHVybiBFUy5Jc0NhbGxhYmxlKHgpO1xuICAgIH0sXG5cbiAgICBUb0ludDMyOiBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIEVTLlRvTnVtYmVyKHgpID4+IDA7XG4gICAgfSxcblxuICAgIFRvVWludDMyOiBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIEVTLlRvTnVtYmVyKHgpID4+PiAwO1xuICAgIH0sXG5cbiAgICBUb051bWJlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoX3RvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3ltYm9sXScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfSxcblxuICAgIFRvSW50ZWdlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgbnVtYmVyID0gRVMuVG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKG51bWJlcklzTmFOKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cbiAgICAgIGlmIChudW1iZXIgPT09IDAgfHwgIW51bWJlcklzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuICAgICAgcmV0dXJuIChudW1iZXIgPiAwID8gMSA6IC0xKSAqIF9mbG9vcihfYWJzKG51bWJlcikpO1xuICAgIH0sXG5cbiAgICBUb0xlbmd0aDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgbGVuID0gRVMuVG9JbnRlZ2VyKHZhbHVlKTtcbiAgICAgIGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG4gICAgICBpZiAobGVuID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSOyB9XG4gICAgICByZXR1cm4gbGVuO1xuICAgIH0sXG5cbiAgICBTYW1lVmFsdWU6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAvLyAwID09PSAtMCwgYnV0IHRoZXkgYXJlIG5vdCBpZGVudGljYWwuXG4gICAgICAgIGlmIChhID09PSAwKSB7IHJldHVybiAxIC8gYSA9PT0gMSAvIGI7IH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYik7XG4gICAgfSxcblxuICAgIFNhbWVWYWx1ZVplcm86IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzYW1lIGFzIFNhbWVWYWx1ZSBleGNlcHQgZm9yIFNhbWVWYWx1ZVplcm8oKzAsIC0wKSA9PSB0cnVlXG4gICAgICByZXR1cm4gKGEgPT09IGIpIHx8IChudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKSk7XG4gICAgfSxcblxuICAgIElzSXRlcmFibGU6IGZ1bmN0aW9uIChvKSB7XG4gICAgICByZXR1cm4gRVMuVHlwZUlzT2JqZWN0KG8pICYmICh0eXBlb2Ygb1skaXRlcmF0b3IkXSAhPT0gJ3VuZGVmaW5lZCcgfHwgaXNBcmd1bWVudHMobykpO1xuICAgIH0sXG5cbiAgICBHZXRJdGVyYXRvcjogZnVuY3Rpb24gKG8pIHtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvKSkge1xuICAgICAgICAvLyBzcGVjaWFsIGNhc2Ugc3VwcG9ydCBmb3IgYGFyZ3VtZW50c2BcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKG8sICd2YWx1ZScpO1xuICAgICAgfVxuICAgICAgdmFyIGl0Rm4gPSBFUy5HZXRNZXRob2QobywgJGl0ZXJhdG9yJCk7XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUoaXRGbikpIHtcbiAgICAgICAgLy8gQmV0dGVyIGRpYWdub3N0aWNzIGlmIGl0Rm4gaXMgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgaXMgbm90IGFuIGl0ZXJhYmxlJyk7XG4gICAgICB9XG4gICAgICB2YXIgaXQgPSBFUy5DYWxsKGl0Rm4sIG8pO1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoaXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2JhZCBpdGVyYXRvcicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0O1xuICAgIH0sXG5cbiAgICBHZXRNZXRob2Q6IGZ1bmN0aW9uIChvLCBwKSB7XG4gICAgICB2YXIgZnVuYyA9IEVTLlRvT2JqZWN0KG8pW3BdO1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUoZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBjYWxsYWJsZTogJyArIHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcblxuICAgIEl0ZXJhdG9yQ29tcGxldGU6IGZ1bmN0aW9uIChpdGVyUmVzdWx0KSB7XG4gICAgICByZXR1cm4gISFpdGVyUmVzdWx0LmRvbmU7XG4gICAgfSxcblxuICAgIEl0ZXJhdG9yQ2xvc2U6IGZ1bmN0aW9uIChpdGVyYXRvciwgY29tcGxldGlvbklzVGhyb3cpIHtcbiAgICAgIHZhciByZXR1cm5NZXRob2QgPSBFUy5HZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICAgIGlmIChyZXR1cm5NZXRob2QgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXhjZXB0aW9uO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5uZXJSZXN1bHQgPSBFUy5DYWxsKHJldHVybk1ldGhvZCwgaXRlcmF0b3IpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpbm5lckV4Y2VwdGlvbiA9IGU7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGxldGlvbklzVGhyb3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlubmVyRXhjZXB0aW9uKSB7XG4gICAgICAgIHRocm93IGlubmVyRXhjZXB0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoaW5uZXJSZXN1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJdGVyYXRvcidzIHJldHVybiBtZXRob2QgcmV0dXJuZWQgYSBub24tb2JqZWN0LlwiKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgSXRlcmF0b3JOZXh0OiBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGl0Lm5leHQoYXJndW1lbnRzWzFdKSA6IGl0Lm5leHQoKTtcbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIGl0ZXJhdG9yJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBJdGVyYXRvclN0ZXA6IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IEVTLkl0ZXJhdG9yTmV4dChpdCk7XG4gICAgICB2YXIgZG9uZSA9IEVTLkl0ZXJhdG9yQ29tcGxldGUocmVzdWx0KTtcbiAgICAgIHJldHVybiBkb25lID8gZmFsc2UgOiByZXN1bHQ7XG4gICAgfSxcblxuICAgIENvbnN0cnVjdDogZnVuY3Rpb24gKEMsIGFyZ3MsIG5ld1RhcmdldCwgaXNFUzZpbnRlcm5hbCkge1xuICAgICAgdmFyIHRhcmdldCA9IHR5cGVvZiBuZXdUYXJnZXQgPT09ICd1bmRlZmluZWQnID8gQyA6IG5ld1RhcmdldDtcblxuICAgICAgaWYgKCFpc0VTNmludGVybmFsICYmIFJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgICAgIC8vIFRyeSB0byB1c2UgUmVmbGVjdC5jb25zdHJ1Y3QgaWYgYXZhaWxhYmxlXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChDLCBhcmdzLCB0YXJnZXQpO1xuICAgICAgfVxuICAgICAgLy8gT0ssIHdlIGhhdmUgdG8gZmFrZSBpdC4gIFRoaXMgd2lsbCBvbmx5IHdvcmsgaWYgdGhlXG4gICAgICAvLyBDLltbQ29uc3RydWN0b3JLaW5kXV0gPT0gXCJiYXNlXCIgLS0gYnV0IHRoYXQncyB0aGUgb25seVxuICAgICAgLy8ga2luZCB3ZSBjYW4gbWFrZSBpbiBFUzUgY29kZSBhbnl3YXkuXG5cbiAgICAgIC8vIE9yZGluYXJ5Q3JlYXRlRnJvbUNvbnN0cnVjdG9yKHRhcmdldCwgXCIlT2JqZWN0UHJvdG90eXBlJVwiKVxuICAgICAgdmFyIHByb3RvID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICBwcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgICB9XG4gICAgICB2YXIgb2JqID0gY3JlYXRlKHByb3RvKTtcbiAgICAgIC8vIENhbGwgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgdmFyIHJlc3VsdCA9IEVTLkNhbGwoQywgb2JqLCBhcmdzKTtcbiAgICAgIHJldHVybiBFUy5UeXBlSXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IG9iajtcbiAgICB9LFxuXG4gICAgU3BlY2llc0NvbnN0cnVjdG9yOiBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gICAgICB2YXIgQyA9IE8uY29uc3RydWN0b3I7XG4gICAgICBpZiAoQyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG4gICAgICB9XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIHZhciBTID0gQ1tzeW1ib2xTcGVjaWVzXTtcbiAgICAgIGlmIChpc051bGxPclVuZGVmaW5lZChTKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuICAgICAgfVxuICAgICAgaWYgKCFFUy5Jc0NvbnN0cnVjdG9yKFMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBAQHNwZWNpZXMnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTO1xuICAgIH0sXG5cbiAgICBDcmVhdGVIVE1MOiBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgIHZhciBTID0gRVMuVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciBwMSA9ICc8JyArIHRhZztcbiAgICAgIGlmIChhdHRyaWJ1dGUgIT09ICcnKSB7XG4gICAgICAgIHZhciBWID0gRVMuVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICB2YXIgZXNjYXBlZFYgPSBWLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICAgICAgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBlc2NhcGVkViArICdcIic7XG4gICAgICB9XG4gICAgICB2YXIgcDIgPSBwMSArICc+JztcbiAgICAgIHZhciBwMyA9IHAyICsgUztcbiAgICAgIHJldHVybiBwMyArICc8LycgKyB0YWcgKyAnPic7XG4gICAgfSxcblxuICAgIElzUmVnRXhwOiBmdW5jdGlvbiBJc1JlZ0V4cChhcmd1bWVudCkge1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoYXJndW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1JlZ0V4cCA9IGFyZ3VtZW50W1N5bWJvbC5tYXRjaF07XG4gICAgICBpZiAodHlwZW9mIGlzUmVnRXhwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gISFpc1JlZ0V4cDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBUeXBlLnJlZ2V4KGFyZ3VtZW50KTtcbiAgICB9LFxuXG4gICAgVG9TdHJpbmc6IGZ1bmN0aW9uIFRvU3RyaW5nKHN0cmluZykge1xuICAgICAgcmV0dXJuICRTdHJpbmcoc3RyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gV2VsbC1rbm93biBTeW1ib2wgc2hpbXNcbiAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgaGFzU3ltYm9scykge1xuICAgIHZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSBmdW5jdGlvbiBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSkge1xuICAgICAgaWYgKFR5cGUuc3ltYm9sKFN5bWJvbFtuYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIFN5bWJvbFtuYW1lXTtcbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciBzeW0gPSBTeW1ib2xbJ2ZvciddKCdTeW1ib2wuJyArIG5hbWUpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN5bWJvbCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc3ltXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzeW07XG4gICAgfTtcbiAgICBpZiAoIVR5cGUuc3ltYm9sKFN5bWJvbC5zZWFyY2gpKSB7XG4gICAgICB2YXIgc3ltYm9sU2VhcmNoID0gZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTtcbiAgICAgIHZhciBvcmlnaW5hbFNlYXJjaCA9IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoO1xuICAgICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgc3ltYm9sU2VhcmNoLCBmdW5jdGlvbiBzZWFyY2goc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsU2VhcmNoLCBzdHJpbmcsIFt0aGlzXSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzZWFyY2hTaGltID0gZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgICB2YXIgTyA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVnZXhwKSkge1xuICAgICAgICAgIHZhciBzZWFyY2hlciA9IEVTLkdldE1ldGhvZChyZWdleHAsIHN5bWJvbFNlYXJjaCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzZWFyY2hlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBFUy5DYWxsKHNlYXJjaGVyLCByZWdleHAsIFtPXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsU2VhcmNoLCBPLCBbRVMuVG9TdHJpbmcocmVnZXhwKV0pO1xuICAgICAgfTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdzZWFyY2gnLCBzZWFyY2hTaGltKTtcbiAgICB9XG4gICAgaWYgKCFUeXBlLnN5bWJvbChTeW1ib2wucmVwbGFjZSkpIHtcbiAgICAgIHZhciBzeW1ib2xSZXBsYWNlID0gZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4gICAgICB2YXIgb3JpZ2luYWxSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuICAgICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgc3ltYm9sUmVwbGFjZSwgZnVuY3Rpb24gcmVwbGFjZShzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbFJlcGxhY2UsIHN0cmluZywgW3RoaXMsIHJlcGxhY2VWYWx1ZV0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVwbGFjZVNoaW0gPSBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgICAgdmFyIE8gPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHNlYXJjaFZhbHVlKSkge1xuICAgICAgICAgIHZhciByZXBsYWNlciA9IEVTLkdldE1ldGhvZChzZWFyY2hWYWx1ZSwgc3ltYm9sUmVwbGFjZSk7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBFUy5DYWxsKHJlcGxhY2VyLCBzZWFyY2hWYWx1ZSwgW08sIHJlcGxhY2VWYWx1ZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbFJlcGxhY2UsIE8sIFtFUy5Ub1N0cmluZyhzZWFyY2hWYWx1ZSksIHJlcGxhY2VWYWx1ZV0pO1xuICAgICAgfTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdyZXBsYWNlJywgcmVwbGFjZVNoaW0pO1xuICAgIH1cbiAgICBpZiAoIVR5cGUuc3ltYm9sKFN5bWJvbC5zcGxpdCkpIHtcbiAgICAgIHZhciBzeW1ib2xTcGxpdCA9IGRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BsaXQnKTtcbiAgICAgIHZhciBvcmlnaW5hbFNwbGl0ID0gU3RyaW5nLnByb3RvdHlwZS5zcGxpdDtcbiAgICAgIGRlZmluZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGUsIHN5bWJvbFNwbGl0LCBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsU3BsaXQsIHN0cmluZywgW3RoaXMsIGxpbWl0XSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzcGxpdFNoaW0gPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIHZhciBPID0gRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIHNwbGl0dGVyID0gRVMuR2V0TWV0aG9kKHNlcGFyYXRvciwgc3ltYm9sU3BsaXQpO1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3BsaXR0ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gRVMuQ2FsbChzcGxpdHRlciwgc2VwYXJhdG9yLCBbTywgbGltaXRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTcGxpdCwgTywgW0VTLlRvU3RyaW5nKHNlcGFyYXRvciksIGxpbWl0XSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3NwbGl0Jywgc3BsaXRTaGltKTtcbiAgICB9XG4gICAgdmFyIHN5bWJvbE1hdGNoRXhpc3RzID0gVHlwZS5zeW1ib2woU3ltYm9sLm1hdGNoKTtcbiAgICB2YXIgc3RyaW5nTWF0Y2hJZ25vcmVzU3ltYm9sTWF0Y2ggPSBzeW1ib2xNYXRjaEV4aXN0cyAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRmlyZWZveCA0MSwgdGhyb3VnaCBOaWdodGx5IDQ1IGhhcyBTeW1ib2wubWF0Y2gsIGJ1dCBTdHJpbmcjbWF0Y2ggaWdub3JlcyBpdC5cbiAgICAgIC8vIEZpcmVmb3ggNDAgYW5kIGJlbG93IGhhdmUgU3ltYm9sLm1hdGNoIGJ1dCBTdHJpbmcjbWF0Y2ggd29ya3MgZmluZS5cbiAgICAgIHZhciBvID0ge307XG4gICAgICBvW1N5bWJvbC5tYXRjaF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA0MjsgfTtcbiAgICAgIHJldHVybiAnYScubWF0Y2gobykgIT09IDQyO1xuICAgIH0oKSk7XG4gICAgaWYgKCFzeW1ib2xNYXRjaEV4aXN0cyB8fCBzdHJpbmdNYXRjaElnbm9yZXNTeW1ib2xNYXRjaCkge1xuICAgICAgdmFyIHN5bWJvbE1hdGNoID0gZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4gICAgICB2YXIgb3JpZ2luYWxNYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlLCBzeW1ib2xNYXRjaCwgZnVuY3Rpb24gbWF0Y2goc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsTWF0Y2gsIHN0cmluZywgW3RoaXNdKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWF0Y2hTaGltID0gZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICAgIHZhciBPID0gRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWdleHApKSB7XG4gICAgICAgICAgdmFyIG1hdGNoZXIgPSBFUy5HZXRNZXRob2QocmVnZXhwLCBzeW1ib2xNYXRjaCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEVTLkNhbGwobWF0Y2hlciwgcmVnZXhwLCBbT10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbE1hdGNoLCBPLCBbRVMuVG9TdHJpbmcocmVnZXhwKV0pO1xuICAgICAgfTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdtYXRjaCcsIG1hdGNoU2hpbSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHdyYXBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIHdyYXBDb25zdHJ1Y3RvcihvcmlnaW5hbCwgcmVwbGFjZW1lbnQsIGtleXNUb1NraXApIHtcbiAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKHJlcGxhY2VtZW50LCBvcmlnaW5hbCk7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgLy8gc2V0cyB1cCBwcm9wZXIgcHJvdG90eXBlIGNoYWluIHdoZXJlIHBvc3NpYmxlXG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob3JpZ2luYWwsIHJlcGxhY2VtZW50KTtcbiAgICB9XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgIF9mb3JFYWNoKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9yaWdpbmFsKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIG5vb3AgfHwga2V5c1RvU2tpcFtrZXldKSB7IHJldHVybjsgfVxuICAgICAgICBWYWx1ZS5wcm94eShvcmlnaW5hbCwga2V5LCByZXBsYWNlbWVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2ZvckVhY2goT2JqZWN0LmtleXMob3JpZ2luYWwpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gbm9vcCB8fCBrZXlzVG9Ta2lwW2tleV0pIHsgcmV0dXJuOyB9XG4gICAgICAgIHJlcGxhY2VtZW50W2tleV0gPSBvcmlnaW5hbFtrZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJlcGxhY2VtZW50LnByb3RvdHlwZSA9IG9yaWdpbmFsLnByb3RvdHlwZTtcbiAgICBWYWx1ZS5yZWRlZmluZShvcmlnaW5hbC5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHJlcGxhY2VtZW50KTtcbiAgfTtcblxuICB2YXIgZGVmYXVsdFNwZWNpZXNHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICB2YXIgYWRkRGVmYXVsdFNwZWNpZXMgPSBmdW5jdGlvbiAoQykge1xuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzICYmICFfaGFzT3duUHJvcGVydHkoQywgc3ltYm9sU3BlY2llcykpIHtcbiAgICAgIFZhbHVlLmdldHRlcihDLCBzeW1ib2xTcGVjaWVzLCBkZWZhdWx0U3BlY2llc0dldHRlcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhZGRJdGVyYXRvciA9IGZ1bmN0aW9uIChwcm90b3R5cGUsIGltcGwpIHtcbiAgICB2YXIgaW1wbGVtZW50YXRpb24gPSBpbXBsIHx8IGZ1bmN0aW9uIGl0ZXJhdG9yKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICBkZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICRpdGVyYXRvciQsIGltcGxlbWVudGF0aW9uKTtcbiAgICBpZiAoIXByb3RvdHlwZVskaXRlcmF0b3IkXSAmJiBUeXBlLnN5bWJvbCgkaXRlcmF0b3IkKSkge1xuICAgICAgLy8gaW1wbGVtZW50YXRpb25zIGFyZSBidWdneSB3aGVuICRpdGVyYXRvciQgaXMgYSBTeW1ib2xcbiAgICAgIHByb3RvdHlwZVskaXRlcmF0b3IkXSA9IGltcGxlbWVudGF0aW9uO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3JlYXRlRGF0YVByb3BlcnR5ID0gZnVuY3Rpb24gY3JlYXRlRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG4gIHZhciBjcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gZnVuY3Rpb24gY3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhvYmplY3QsIG5hbWUsIHZhbHVlKSB7XG4gICAgY3JlYXRlRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUpO1xuICAgIGlmICghRVMuU2FtZVZhbHVlKG9iamVjdFtuYW1lXSwgdmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm9wZXJ0eSBpcyBub25jb25maWd1cmFibGUnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGVtdWxhdGVFUzZjb25zdHJ1Y3QgPSBmdW5jdGlvbiAobywgZGVmYXVsdE5ld1RhcmdldCwgZGVmYXVsdFByb3RvLCBzbG90cykge1xuICAgIC8vIFRoaXMgaXMgYW4gZXM1IGFwcHJveGltYXRpb24gdG8gZXM2IGNvbnN0cnVjdCBzZW1hbnRpY3MuICBpbiBlczYsXG4gICAgLy8gJ25ldyBGb28nIGludm9rZXMgRm9vLltbQ29uc3RydWN0XV0gd2hpY2ggKGZvciBhbG1vc3QgYWxsIG9iamVjdHMpXG4gICAgLy8ganVzdCBzZXRzIHRoZSBpbnRlcm5hbCB2YXJpYWJsZSBOZXdUYXJnZXQgKGluIGVzNiBzeW50YXggYG5ldy50YXJnZXRgKVxuICAgIC8vIHRvIEZvbyBhbmQgdGhlbiByZXR1cm5zIEZvbygpLlxuXG4gICAgLy8gTWFueSBFUzYgb2JqZWN0IHRoZW4gaGF2ZSBjb25zdHJ1Y3RvcnMgb2YgdGhlIGZvcm06XG4gICAgLy8gMS4gSWYgTmV3VGFyZ2V0IGlzIHVuZGVmaW5lZCwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uXG4gICAgLy8gMi4gTGV0IHh4eCBieSBPcmRpbmFyeUNyZWF0ZUZyb21Db25zdHJ1Y3RvcihOZXdUYXJnZXQsIHl5eSwgenp6KVxuXG4gICAgLy8gU28gd2UncmUgZ29pbmcgdG8gZW11bGF0ZSB0aG9zZSBmaXJzdCB0d28gc3RlcHMuXG4gICAgaWYgKCFFUy5UeXBlSXNPYmplY3QobykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIHJlcXVpcmVzIGBuZXdgOiAnICsgZGVmYXVsdE5ld1RhcmdldC5uYW1lKTtcbiAgICB9XG4gICAgdmFyIHByb3RvID0gZGVmYXVsdE5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocHJvdG8pKSB7XG4gICAgICBwcm90byA9IGRlZmF1bHRQcm90bztcbiAgICB9XG4gICAgdmFyIG9iaiA9IGNyZWF0ZShwcm90byk7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBzbG90cykge1xuICAgICAgaWYgKF9oYXNPd25Qcm9wZXJ0eShzbG90cywgbmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc2xvdHNbbmFtZV07XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgdmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIEZpcmVmb3ggMzEgcmVwb3J0cyB0aGlzIGZ1bmN0aW9uJ3MgbGVuZ3RoIGFzIDBcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA2MjQ4NFxuICBpZiAoU3RyaW5nLmZyb21Db2RlUG9pbnQgJiYgU3RyaW5nLmZyb21Db2RlUG9pbnQubGVuZ3RoICE9PSAxKSB7XG4gICAgdmFyIG9yaWdpbmFsRnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZywgJ2Zyb21Db2RlUG9pbnQnLCBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KGNvZGVQb2ludHMpIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsRnJvbUNvZGVQb2ludCwgdGhpcywgYXJndW1lbnRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBTdHJpbmdTaGltcyA9IHtcbiAgICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KGNvZGVQb2ludHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhciBuZXh0O1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBuZXh0ID0gTnVtYmVyKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIGlmICghRVMuU2FtZVZhbHVlKG5leHQsIEVTLlRvSW50ZWdlcihuZXh0KSkgfHwgbmV4dCA8IDAgfHwgbmV4dCA+IDB4MTBGRkZGKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCAnICsgbmV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA8IDB4MTAwMDApIHtcbiAgICAgICAgICBfcHVzaChyZXN1bHQsIFN0cmluZy5mcm9tQ2hhckNvZGUobmV4dCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQgLT0gMHgxMDAwMDtcbiAgICAgICAgICBfcHVzaChyZXN1bHQsIFN0cmluZy5mcm9tQ2hhckNvZGUoKG5leHQgPj4gMTApICsgMHhEODAwKSk7XG4gICAgICAgICAgX3B1c2gocmVzdWx0LCBTdHJpbmcuZnJvbUNoYXJDb2RlKChuZXh0ICUgMHg0MDApICsgMHhEQzAwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgfSxcblxuICAgIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgICB2YXIgY29va2VkID0gRVMuVG9PYmplY3QoY2FsbFNpdGUsICdiYWQgY2FsbFNpdGUnKTtcbiAgICAgIHZhciByYXdTdHJpbmcgPSBFUy5Ub09iamVjdChjb29rZWQucmF3LCAnYmFkIHJhdyB2YWx1ZScpO1xuICAgICAgdmFyIGxlbiA9IHJhd1N0cmluZy5sZW5ndGg7XG4gICAgICB2YXIgbGl0ZXJhbHNlZ21lbnRzID0gRVMuVG9MZW5ndGgobGVuKTtcbiAgICAgIGlmIChsaXRlcmFsc2VnbWVudHMgPD0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHJpbmdFbGVtZW50cyA9IFtdO1xuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEtleSwgbmV4dCwgbmV4dFNlZywgbmV4dFN1YjtcbiAgICAgIHdoaWxlIChuZXh0SW5kZXggPCBsaXRlcmFsc2VnbWVudHMpIHtcbiAgICAgICAgbmV4dEtleSA9IEVTLlRvU3RyaW5nKG5leHRJbmRleCk7XG4gICAgICAgIG5leHRTZWcgPSBFUy5Ub1N0cmluZyhyYXdTdHJpbmdbbmV4dEtleV0pO1xuICAgICAgICBfcHVzaChzdHJpbmdFbGVtZW50cywgbmV4dFNlZyk7XG4gICAgICAgIGlmIChuZXh0SW5kZXggKyAxID49IGxpdGVyYWxzZWdtZW50cykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHQgPSBuZXh0SW5kZXggKyAxIDwgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1tuZXh0SW5kZXggKyAxXSA6ICcnO1xuICAgICAgICBuZXh0U3ViID0gRVMuVG9TdHJpbmcobmV4dCk7XG4gICAgICAgIF9wdXNoKHN0cmluZ0VsZW1lbnRzLCBuZXh0U3ViKTtcbiAgICAgICAgbmV4dEluZGV4ICs9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nRWxlbWVudHMuam9pbignJyk7XG4gICAgfVxuICB9O1xuICBpZiAoU3RyaW5nLnJhdyAmJiBTdHJpbmcucmF3KHsgcmF3OiB7IDA6ICd4JywgMTogJ3knLCBsZW5ndGg6IDIgfSB9KSAhPT0gJ3h5Jykge1xuICAgIC8vIElFIDExIFRQIGhhcyBhIGJyb2tlbiBTdHJpbmcucmF3IGltcGxlbWVudGF0aW9uXG4gICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLCAncmF3JywgU3RyaW5nU2hpbXMucmF3KTtcbiAgfVxuICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZywgU3RyaW5nU2hpbXMpO1xuXG4gIC8vIEZhc3QgcmVwZWF0LCB1c2VzIHRoZSBgRXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmdgIGFsZ29yaXRobS5cbiAgLy8gUGVyZjogaHR0cDovL2pzcGVyZi5jb20vc3RyaW5nLXJlcGVhdDIvMlxuICB2YXIgc3RyaW5nUmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHMsIHRpbWVzKSB7XG4gICAgaWYgKHRpbWVzIDwgMSkgeyByZXR1cm4gJyc7IH1cbiAgICBpZiAodGltZXMgJSAyKSB7IHJldHVybiByZXBlYXQocywgdGltZXMgLSAxKSArIHM7IH1cbiAgICB2YXIgaGFsZiA9IHJlcGVhdChzLCB0aW1lcyAvIDIpO1xuICAgIHJldHVybiBoYWxmICsgaGFsZjtcbiAgfTtcbiAgdmFyIHN0cmluZ01heExlbmd0aCA9IEluZmluaXR5O1xuXG4gIHZhciBTdHJpbmdQcm90b3R5cGVTaGltcyA9IHtcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdCh0aW1lcykge1xuICAgICAgdmFyIHRoaXNTdHIgPSBFUy5Ub1N0cmluZyhFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBudW1UaW1lcyA9IEVTLlRvSW50ZWdlcih0aW1lcyk7XG4gICAgICBpZiAobnVtVGltZXMgPCAwIHx8IG51bVRpbWVzID49IHN0cmluZ01heExlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVwZWF0IGNvdW50IG11c3QgYmUgbGVzcyB0aGFuIGluZmluaXR5IGFuZCBub3Qgb3ZlcmZsb3cgbWF4aW11bSBzdHJpbmcgc2l6ZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZ1JlcGVhdCh0aGlzU3RyLCBudW1UaW1lcyk7XG4gICAgfSxcblxuICAgIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nKSB7XG4gICAgICB2YXIgUyA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgaWYgKEVTLklzUmVnRXhwKHNlYXJjaFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIFwic3RhcnRzV2l0aFwiIHdpdGggYSByZWdleCcpO1xuICAgICAgfVxuICAgICAgdmFyIHNlYXJjaFN0ciA9IEVTLlRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgc3RhcnQgPSBfbWF4KEVTLlRvSW50ZWdlcihwb3NpdGlvbiksIDApO1xuICAgICAgcmV0dXJuIF9zdHJTbGljZShTLCBzdGFydCwgc3RhcnQgKyBzZWFyY2hTdHIubGVuZ3RoKSA9PT0gc2VhcmNoU3RyO1xuICAgIH0sXG5cbiAgICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nKSB7XG4gICAgICB2YXIgUyA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgaWYgKEVTLklzUmVnRXhwKHNlYXJjaFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIFwiZW5kc1dpdGhcIiB3aXRoIGEgcmVnZXgnKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZWFyY2hTdHIgPSBFUy5Ub1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgICAgdmFyIGxlbiA9IFMubGVuZ3RoO1xuICAgICAgdmFyIGVuZFBvc2l0aW9uO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgdmFyIHBvcyA9IHR5cGVvZiBlbmRQb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyBsZW4gOiBFUy5Ub0ludGVnZXIoZW5kUG9zaXRpb24pO1xuICAgICAgdmFyIGVuZCA9IF9taW4oX21heChwb3MsIDApLCBsZW4pO1xuICAgICAgcmV0dXJuIF9zdHJTbGljZShTLCBlbmQgLSBzZWFyY2hTdHIubGVuZ3RoLCBlbmQpID09PSBzZWFyY2hTdHI7XG4gICAgfSxcblxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcpIHtcbiAgICAgIGlmIChFUy5Jc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiaW5jbHVkZXNcIiBkb2VzIG5vdCBhY2NlcHQgYSBSZWdFeHAnKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZWFyY2hTdHIgPSBFUy5Ub1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgICAgdmFyIHBvc2l0aW9uO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHBvc2l0aW9uID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgLy8gU29tZWhvdyB0aGlzIHRyaWNrIG1ha2VzIG1ldGhvZCAxMDAlIGNvbXBhdCB3aXRoIHRoZSBzcGVjLlxuICAgICAgcmV0dXJuIF9pbmRleE9mKHRoaXMsIHNlYXJjaFN0ciwgcG9zaXRpb24pICE9PSAtMTtcbiAgICB9LFxuXG4gICAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgICAgdmFyIHRoaXNTdHIgPSBFUy5Ub1N0cmluZyhFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IEVTLlRvSW50ZWdlcihwb3MpO1xuICAgICAgdmFyIGxlbmd0aCA9IHRoaXNTdHIubGVuZ3RoO1xuICAgICAgaWYgKHBvc2l0aW9uID49IDAgJiYgcG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0gdGhpc1N0ci5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICAgICAgdmFyIGlzRW5kID0gcG9zaXRpb24gKyAxID09PSBsZW5ndGg7XG4gICAgICAgIGlmIChmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBpc0VuZCkgeyByZXR1cm4gZmlyc3Q7IH1cbiAgICAgICAgdmFyIHNlY29uZCA9IHRoaXNTdHIuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpO1xuICAgICAgICBpZiAoc2Vjb25kIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRikgeyByZXR1cm4gZmlyc3Q7IH1cbiAgICAgICAgcmV0dXJuICgoZmlyc3QgLSAweEQ4MDApICogMTAyNCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBpZiAoU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyAmJiAnYScuaW5jbHVkZXMoJ2EnLCBJbmZpbml0eSkgIT09IGZhbHNlKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2luY2x1ZGVzJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuaW5jbHVkZXMpO1xuICB9XG5cbiAgaWYgKFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCAmJiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKSB7XG4gICAgdmFyIHN0YXJ0c1dpdGhSZWplY3RzUmVnZXggPSB0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAvKiB0aHJvd3MgaWYgc3BlYy1jb21wbGlhbnQgKi9cbiAgICAgIHJldHVybiAnL2EvJy5zdGFydHNXaXRoKC9hLyk7XG4gICAgfSk7XG4gICAgdmFyIHN0YXJ0c1dpdGhIYW5kbGVzSW5maW5pdHkgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ2FiYycuc3RhcnRzV2l0aCgnYScsIEluZmluaXR5KSA9PT0gZmFsc2U7XG4gICAgfSk7XG4gICAgaWYgKCFzdGFydHNXaXRoUmVqZWN0c1JlZ2V4IHx8ICFzdGFydHNXaXRoSGFuZGxlc0luZmluaXR5KSB7XG4gICAgICAvLyBGaXJlZm94ICg8IDM3PykgYW5kIElFIDExIFRQIGhhdmUgYSBub25jb21wbGlhbnQgc3RhcnRzV2l0aCBpbXBsZW1lbnRhdGlvblxuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnLCBTdHJpbmdQcm90b3R5cGVTaGltcy5zdGFydHNXaXRoKTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLmVuZHNXaXRoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1N5bWJvbHMpIHtcbiAgICB2YXIgc3RhcnRzV2l0aFN1cHBvcnRzU3ltYm9sTWF0Y2ggPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmUgPSAvYS87XG4gICAgICByZVtTeW1ib2wubWF0Y2hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy9hLycuc3RhcnRzV2l0aChyZSk7XG4gICAgfSk7XG4gICAgaWYgKCFzdGFydHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnLCBTdHJpbmdQcm90b3R5cGVTaGltcy5zdGFydHNXaXRoKTtcbiAgICB9XG4gICAgdmFyIGVuZHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZSA9IC9hLztcbiAgICAgIHJlW1N5bWJvbC5tYXRjaF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnL2EvJy5lbmRzV2l0aChyZSk7XG4gICAgfSk7XG4gICAgaWYgKCFlbmRzV2l0aFN1cHBvcnRzU3ltYm9sTWF0Y2gpIHtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLmVuZHNXaXRoKTtcbiAgICB9XG4gICAgdmFyIGluY2x1ZGVzU3VwcG9ydHNTeW1ib2xNYXRjaCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZSA9IC9hLztcbiAgICAgIHJlW1N5bWJvbC5tYXRjaF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnL2EvJy5pbmNsdWRlcyhyZSk7XG4gICAgfSk7XG4gICAgaWYgKCFpbmNsdWRlc1N1cHBvcnRzU3ltYm9sTWF0Y2gpIHtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsICdpbmNsdWRlcycsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLmluY2x1ZGVzKTtcbiAgICB9XG4gIH1cblxuICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZy5wcm90b3R5cGUsIFN0cmluZ1Byb3RvdHlwZVNoaW1zKTtcblxuICAvLyB3aGl0ZXNwYWNlIGZyb206IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG4gIHZhciB3cyA9IFtcbiAgICAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnLFxuICAgICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG4gICAgJ1xcdTIwMjlcXHVGRUZGJ1xuICBdLmpvaW4oJycpO1xuICB2YXIgdHJpbVJlZ2V4cCA9IG5ldyBSZWdFeHAoJyheWycgKyB3cyArICddKyl8KFsnICsgd3MgKyAnXSskKScsICdnJyk7XG4gIHZhciB0cmltU2hpbSA9IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuIEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpLnJlcGxhY2UodHJpbVJlZ2V4cCwgJycpO1xuICB9O1xuICB2YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG4gIHZhciBub25XU3JlZ2V4ID0gbmV3IFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbiAgdmFyIGlzQmFkSGV4UmVnZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcbiAgdmFyIGhhc1N0cmluZ1RyaW1CdWcgPSBub25XUy50cmltKCkubGVuZ3RoICE9PSBub25XUy5sZW5ndGg7XG4gIGRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICd0cmltJywgdHJpbVNoaW0sIGhhc1N0cmluZ1RyaW1CdWcpO1xuXG4gIC8vIEdpdmVuIGFuIGFyZ3VtZW50IHgsIGl0IHdpbGwgcmV0dXJuIGFuIEl0ZXJhdG9yUmVzdWx0IG9iamVjdCxcbiAgLy8gd2l0aCB2YWx1ZSBzZXQgdG8geCBhbmQgZG9uZSB0byBmYWxzZS5cbiAgLy8gR2l2ZW4gbm8gYXJndW1lbnRzLCBpdCB3aWxsIHJldHVybiBhbiBpdGVyYXRvciBjb21wbGV0aW9uIG9iamVjdC5cbiAgdmFyIGl0ZXJhdG9yUmVzdWx0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogeCwgZG9uZTogYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB9O1xuICB9O1xuXG4gIC8vIHNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gIHZhciBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChzKSB7XG4gICAgRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZShzKTtcbiAgICB0aGlzLl9zID0gRVMuVG9TdHJpbmcocyk7XG4gICAgdGhpcy5faSA9IDA7XG4gIH07XG4gIFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzID0gdGhpcy5fcztcbiAgICB2YXIgaSA9IHRoaXMuX2k7XG4gICAgaWYgKHR5cGVvZiBzID09PSAndW5kZWZpbmVkJyB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zID0gdm9pZCAwO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KCk7XG4gICAgfVxuICAgIHZhciBmaXJzdCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICB2YXIgc2Vjb25kLCBsZW47XG4gICAgaWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IChpICsgMSkgPT09IHMubGVuZ3RoKSB7XG4gICAgICBsZW4gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWNvbmQgPSBzLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgbGVuID0gKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpID8gMSA6IDI7XG4gICAgfVxuICAgIHRoaXMuX2kgPSBpICsgbGVuO1xuICAgIHJldHVybiBpdGVyYXRvclJlc3VsdChzLnN1YnN0cihpLCBsZW4pKTtcbiAgfTtcbiAgYWRkSXRlcmF0b3IoU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgYWRkSXRlcmF0b3IoU3RyaW5nLnByb3RvdHlwZSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3RyaW5nSXRlcmF0b3IodGhpcyk7XG4gIH0pO1xuXG4gIHZhciBBcnJheVNoaW1zID0ge1xuICAgIGZyb206IGZ1bmN0aW9uIGZyb20oaXRlbXMpIHtcbiAgICAgIHZhciBDID0gdGhpcztcbiAgICAgIHZhciBtYXBGbjtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXBwaW5nLCBUO1xuICAgICAgaWYgKHR5cGVvZiBtYXBGbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbWFwcGluZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFFUy5Jc0NhbGxhYmxlKG1hcEZuKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LmZyb206IHdoZW4gcHJvdmlkZWQsIHRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgVCA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgfVxuICAgICAgICBtYXBwaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gTm90ZSB0aGF0IHRoYXQgQXJyYXlzIHdpbGwgdXNlIEFycmF5SXRlcmF0b3I6XG4gICAgICAvLyBodHRwczovL2J1Z3MuZWNtYXNjcmlwdC5vcmcvc2hvd19idWcuY2dpP2lkPTI0MTZcbiAgICAgIHZhciB1c2luZ0l0ZXJhdG9yID0gdHlwZW9mIChpc0FyZ3VtZW50cyhpdGVtcykgfHwgRVMuR2V0TWV0aG9kKGl0ZW1zLCAkaXRlcmF0b3IkKSkgIT09ICd1bmRlZmluZWQnO1xuXG4gICAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIGk7XG4gICAgICBpZiAodXNpbmdJdGVyYXRvcikge1xuICAgICAgICByZXN1bHQgPSBFUy5Jc0NvbnN0cnVjdG9yKEMpID8gT2JqZWN0KG5ldyBDKCkpIDogW107XG4gICAgICAgIHZhciBpdGVyYXRvciA9IEVTLkdldEl0ZXJhdG9yKGl0ZW1zKTtcbiAgICAgICAgdmFyIG5leHQsIG5leHRWYWx1ZTtcblxuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBuZXh0ID0gRVMuSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKTtcbiAgICAgICAgICBpZiAobmV4dCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAobWFwcGluZykge1xuICAgICAgICAgICAgICBuZXh0VmFsdWUgPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbihuZXh0VmFsdWUsIGkpIDogX2NhbGwobWFwRm4sIFQsIG5leHRWYWx1ZSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbaV0gPSBuZXh0VmFsdWU7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgdHJ1ZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoID0gaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcnJheUxpa2UgPSBFUy5Ub09iamVjdChpdGVtcyk7XG4gICAgICAgIGxlbmd0aCA9IEVTLlRvTGVuZ3RoKGFycmF5TGlrZS5sZW5ndGgpO1xuICAgICAgICByZXN1bHQgPSBFUy5Jc0NvbnN0cnVjdG9yKEMpID8gT2JqZWN0KG5ldyBDKGxlbmd0aCkpIDogbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFsdWUgPSBhcnJheUxpa2VbaV07XG4gICAgICAgICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gbWFwRm4odmFsdWUsIGkpIDogX2NhbGwobWFwRm4sIFQsIHZhbHVlLCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhyZXN1bHQsIGksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB2YXIgQyA9IHRoaXM7XG4gICAgICB2YXIgQSA9IGlzQXJyYXkoQykgfHwgIUVTLklzQ2FsbGFibGUoQykgPyBuZXcgQXJyYXkobGVuKSA6IEVTLkNvbnN0cnVjdChDLCBbbGVuXSk7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxlbjsgKytrKSB7XG4gICAgICAgIGNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coQSwgaywgYXJndW1lbnRzW2tdKTtcbiAgICAgIH1cbiAgICAgIEEubGVuZ3RoID0gbGVuO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICB9O1xuICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5LCBBcnJheVNoaW1zKTtcbiAgYWRkRGVmYXVsdFNwZWNpZXMoQXJyYXkpO1xuXG4gIC8vIE91ciBBcnJheUl0ZXJhdG9yIGlzIHByaXZhdGU7IHNlZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2lzc3Vlcy8yNTJcbiAgQXJyYXlJdGVyYXRvciA9IGZ1bmN0aW9uIChhcnJheSwga2luZCkge1xuICAgIHRoaXMuaSA9IDA7XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xuICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gIH07XG5cbiAgZGVmaW5lUHJvcGVydGllcyhBcnJheUl0ZXJhdG9yLnByb3RvdHlwZSwge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpID0gdGhpcy5pO1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBcnJheUl0ZXJhdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgYW4gQXJyYXlJdGVyYXRvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGxlbiA9IEVTLlRvTGVuZ3RoKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcbiAgICAgICAgICB2YXIgcmV0dmFsO1xuICAgICAgICAgIGlmIChraW5kID09PSAna2V5Jykge1xuICAgICAgICAgICAgcmV0dmFsID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGtpbmQgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIHJldHZhbCA9IGFycmF5W2ldO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ2VudHJ5Jykge1xuICAgICAgICAgICAgcmV0dmFsID0gW2ksIGFycmF5W2ldXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pID0gaSArIDE7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KHJldHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYXJyYXkgPSB2b2lkIDA7XG4gICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQoKTtcbiAgICB9XG4gIH0pO1xuICBhZGRJdGVyYXRvcihBcnJheUl0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgLypcbiAgdmFyIG9yZGVyS2V5cyA9IGZ1bmN0aW9uIG9yZGVyS2V5cyhhLCBiKSB7XG4gICAgdmFyIGFOdW1lcmljID0gU3RyaW5nKEVTLlRvSW50ZWdlcihhKSkgPT09IGE7XG4gICAgdmFyIGJOdW1lcmljID0gU3RyaW5nKEVTLlRvSW50ZWdlcihiKSkgPT09IGI7XG4gICAgaWYgKGFOdW1lcmljICYmIGJOdW1lcmljKSB7XG4gICAgICByZXR1cm4gYiAtIGE7XG4gICAgfSBlbHNlIGlmIChhTnVtZXJpYyAmJiAhYk51bWVyaWMpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKCFhTnVtZXJpYyAmJiBiTnVtZXJpYykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRBbGxLZXlzID0gZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICB2YXIgb3duS2V5cyA9IFtdO1xuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBfcHVzaChfaGFzT3duUHJvcGVydHkob2JqZWN0LCBrZXkpID8gb3duS2V5cyA6IGtleXMsIGtleSk7XG4gICAgfVxuICAgIF9zb3J0KG93bktleXMsIG9yZGVyS2V5cyk7XG4gICAgX3NvcnQoa2V5cywgb3JkZXJLZXlzKTtcblxuICAgIHJldHVybiBfY29uY2F0KG93bktleXMsIGtleXMpO1xuICB9O1xuICAqL1xuXG4gIC8vIG5vdGU6IHRoaXMgaXMgcG9zaXRpb25lZCBoZXJlIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBBcnJheUl0ZXJhdG9yXG4gIHZhciBhcnJheU9mU3VwcG9ydHNTdWJjbGFzc2luZyA9IEFycmF5Lm9mID09PSBBcnJheVNoaW1zLm9mIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRGV0ZWN0cyBhIGJ1ZyBpbiBXZWJraXQgbmlnaHRseSByMTgxODg2XG4gICAgdmFyIEZvbyA9IGZ1bmN0aW9uIEZvbyhsZW4pIHsgdGhpcy5sZW5ndGggPSBsZW47IH07XG4gICAgRm9vLnByb3RvdHlwZSA9IFtdO1xuICAgIHZhciBmb29BcnIgPSBBcnJheS5vZi5hcHBseShGb28sIFsxLCAyXSk7XG4gICAgcmV0dXJuIGZvb0FyciBpbnN0YW5jZW9mIEZvbyAmJiBmb29BcnIubGVuZ3RoID09PSAyO1xuICB9KCkpO1xuICBpZiAoIWFycmF5T2ZTdXBwb3J0c1N1YmNsYXNzaW5nKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXksICdvZicsIEFycmF5U2hpbXMub2YpO1xuICB9XG5cbiAgdmFyIEFycmF5UHJvdG90eXBlU2hpbXMgPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0KSB7XG4gICAgICB2YXIgbyA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbiA9IEVTLlRvTGVuZ3RoKG8ubGVuZ3RoKTtcbiAgICAgIHZhciByZWxhdGl2ZVRhcmdldCA9IEVTLlRvSW50ZWdlcih0YXJnZXQpO1xuICAgICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBFUy5Ub0ludGVnZXIoc3RhcnQpO1xuICAgICAgdmFyIHRvID0gcmVsYXRpdmVUYXJnZXQgPCAwID8gX21heChsZW4gKyByZWxhdGl2ZVRhcmdldCwgMCkgOiBfbWluKHJlbGF0aXZlVGFyZ2V0LCBsZW4pO1xuICAgICAgdmFyIGZyb20gPSByZWxhdGl2ZVN0YXJ0IDwgMCA/IF9tYXgobGVuICsgcmVsYXRpdmVTdGFydCwgMCkgOiBfbWluKHJlbGF0aXZlU3RhcnQsIGxlbik7XG4gICAgICB2YXIgZW5kO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGVuZCA9IGFyZ3VtZW50c1syXTtcbiAgICAgIH1cbiAgICAgIHZhciByZWxhdGl2ZUVuZCA9IHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnID8gbGVuIDogRVMuVG9JbnRlZ2VyKGVuZCk7XG4gICAgICB2YXIgZmluYWxJdGVtID0gcmVsYXRpdmVFbmQgPCAwID8gX21heChsZW4gKyByZWxhdGl2ZUVuZCwgMCkgOiBfbWluKHJlbGF0aXZlRW5kLCBsZW4pO1xuICAgICAgdmFyIGNvdW50ID0gX21pbihmaW5hbEl0ZW0gLSBmcm9tLCBsZW4gLSB0byk7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gMTtcbiAgICAgIGlmIChmcm9tIDwgdG8gJiYgdG8gPCAoZnJvbSArIGNvdW50KSkge1xuICAgICAgICBkaXJlY3Rpb24gPSAtMTtcbiAgICAgICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgICAgIHRvICs9IGNvdW50IC0gMTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChjb3VudCA+IDApIHtcbiAgICAgICAgaWYgKGZyb20gaW4gbykge1xuICAgICAgICAgIG9bdG9dID0gb1tmcm9tXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgb1t0b107XG4gICAgICAgIH1cbiAgICAgICAgZnJvbSArPSBkaXJlY3Rpb247XG4gICAgICAgIHRvICs9IGRpcmVjdGlvbjtcbiAgICAgICAgY291bnQgLT0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvO1xuICAgIH0sXG5cbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlKSB7XG4gICAgICB2YXIgc3RhcnQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgc3RhcnQgPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgZW5kO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGVuZCA9IGFyZ3VtZW50c1syXTtcbiAgICAgIH1cbiAgICAgIHZhciBPID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gRVMuVG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgc3RhcnQgPSBFUy5Ub0ludGVnZXIodHlwZW9mIHN0YXJ0ID09PSAndW5kZWZpbmVkJyA/IDAgOiBzdGFydCk7XG4gICAgICBlbmQgPSBFUy5Ub0ludGVnZXIodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcgPyBsZW4gOiBlbmQpO1xuXG4gICAgICB2YXIgcmVsYXRpdmVTdGFydCA9IHN0YXJ0IDwgMCA/IF9tYXgobGVuICsgc3RhcnQsIDApIDogX21pbihzdGFydCwgbGVuKTtcbiAgICAgIHZhciByZWxhdGl2ZUVuZCA9IGVuZCA8IDAgPyBsZW4gKyBlbmQgOiBlbmQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSByZWxhdGl2ZVN0YXJ0OyBpIDwgbGVuICYmIGkgPCByZWxhdGl2ZUVuZDsgKytpKSB7XG4gICAgICAgIE9baV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGxpc3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBFUy5Ub0xlbmd0aChsaXN0Lmxlbmd0aCk7XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUocHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSNmaW5kOiBwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICBpZiAoX2NhbGwocHJlZGljYXRlLCB0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJlZGljYXRlKHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBsaXN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gRVMuVG9MZW5ndGgobGlzdC5sZW5ndGgpO1xuICAgICAgaWYgKCFFUy5Jc0NhbGxhYmxlKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkjZmluZEluZGV4OiBwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICBpZiAoX2NhbGwocHJlZGljYXRlLCB0aGlzQXJnLCBsaXN0W2ldLCBpLCBsaXN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByZWRpY2F0ZShsaXN0W2ldLCBpLCBsaXN0KSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSxcblxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3IodGhpcywgJ2tleScpO1xuICAgIH0sXG5cbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcbiAgICB9LFxuXG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcih0aGlzLCAnZW50cnknKTtcbiAgICB9XG4gIH07XG4gIC8vIFNhZmFyaSA3LjEgZGVmaW5lcyBBcnJheSNrZXlzIGFuZCBBcnJheSNlbnRyaWVzIG5hdGl2ZWx5LFxuICAvLyBidXQgdGhlIHJlc3VsdGluZyBBcnJheUl0ZXJhdG9yIG9iamVjdHMgZG9uJ3QgaGF2ZSBhIFwibmV4dFwiIG1ldGhvZC5cbiAgaWYgKEFycmF5LnByb3RvdHlwZS5rZXlzICYmICFFUy5Jc0NhbGxhYmxlKFsxXS5rZXlzKCkubmV4dCkpIHtcbiAgICBkZWxldGUgQXJyYXkucHJvdG90eXBlLmtleXM7XG4gIH1cbiAgaWYgKEFycmF5LnByb3RvdHlwZS5lbnRyaWVzICYmICFFUy5Jc0NhbGxhYmxlKFsxXS5lbnRyaWVzKCkubmV4dCkpIHtcbiAgICBkZWxldGUgQXJyYXkucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICAvLyBDaHJvbWUgMzggZGVmaW5lcyBBcnJheSNrZXlzIGFuZCBBcnJheSNlbnRyaWVzLCBhbmQgQXJyYXkjQEBpdGVyYXRvciwgYnV0IG5vdCBBcnJheSN2YWx1ZXNcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5rZXlzICYmIEFycmF5LnByb3RvdHlwZS5lbnRyaWVzICYmICFBcnJheS5wcm90b3R5cGUudmFsdWVzICYmIEFycmF5LnByb3RvdHlwZVskaXRlcmF0b3IkXSkge1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXkucHJvdG90eXBlLCB7XG4gICAgICB2YWx1ZXM6IEFycmF5LnByb3RvdHlwZVskaXRlcmF0b3IkXVxuICAgIH0pO1xuICAgIGlmIChUeXBlLnN5bWJvbChTeW1ib2wudW5zY29wYWJsZXMpKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGVbU3ltYm9sLnVuc2NvcGFibGVzXS52YWx1ZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvLyBDaHJvbWUgNDAgZGVmaW5lcyBBcnJheSN2YWx1ZXMgd2l0aCB0aGUgaW5jb3JyZWN0IG5hbWUsIGFsdGhvdWdoIEFycmF5I3trZXlzLGVudHJpZXN9IGhhdmUgdGhlIGNvcnJlY3QgbmFtZVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzICYmIEFycmF5LnByb3RvdHlwZS52YWx1ZXMgJiYgQXJyYXkucHJvdG90eXBlLnZhbHVlcy5uYW1lICE9PSAndmFsdWVzJykge1xuICAgIHZhciBvcmlnaW5hbEFycmF5UHJvdG90eXBlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLnZhbHVlcztcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICd2YWx1ZXMnLCBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBFUy5DYWxsKG9yaWdpbmFsQXJyYXlQcm90b3R5cGVWYWx1ZXMsIHRoaXMsIGFyZ3VtZW50cyk7IH0pO1xuICAgIGRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJGl0ZXJhdG9yJCwgQXJyYXkucHJvdG90eXBlLnZhbHVlcywgdHJ1ZSk7XG4gIH1cbiAgZGVmaW5lUHJvcGVydGllcyhBcnJheS5wcm90b3R5cGUsIEFycmF5UHJvdG90eXBlU2hpbXMpO1xuXG4gIGlmICgxIC8gW3RydWVdLmluZGV4T2YodHJ1ZSwgLTApIDwgMCkge1xuICAgIC8vIGluZGV4T2Ygd2hlbiBnaXZlbiBhIHBvc2l0aW9uIGFyZyBvZiAtMCBzaG91bGQgcmV0dXJuICswLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC8zMTZcbiAgICBkZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBfYXJyYXlJbmRleE9mQXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiAoMSAvIHZhbHVlKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBhZGRJdGVyYXRvcihBcnJheS5wcm90b3R5cGUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudmFsdWVzKCk7IH0pO1xuICAvLyBDaHJvbWUgZGVmaW5lcyBrZXlzL3ZhbHVlcy9lbnRyaWVzIG9uIEFycmF5LCBidXQgZG9lc24ndCBnaXZlIHVzXG4gIC8vIGFueSB3YXkgdG8gaWRlbnRpZnkgaXRzIGl0ZXJhdG9yLiAgU28gYWRkIG91ciBvd24gc2hpbW1lZCBmaWVsZC5cbiAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgIGFkZEl0ZXJhdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihbXS52YWx1ZXMoKSkpO1xuICB9XG5cbiAgLy8gbm90ZTogdGhpcyBpcyBwb3NpdGlvbmVkIGhlcmUgYmVjYXVzZSBpdCByZWxpZXMgb24gQXJyYXkjZW50cmllc1xuICB2YXIgYXJyYXlGcm9tU3dhbGxvd3NOZWdhdGl2ZUxlbmd0aHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIERldGVjdHMgYSBGaXJlZm94IGJ1ZyBpbiB2MzJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDYzOTkzXG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiAtMSB9KS5sZW5ndGggPT09IDA7XG4gICAgfSk7XG4gIH0oKSk7XG4gIHZhciBhcnJheUZyb21IYW5kbGVzSXRlcmFibGVzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBEZXRlY3RzIGEgYnVnIGluIFdlYmtpdCBuaWdodGx5IHIxODE4ODZcbiAgICB2YXIgYXJyID0gQXJyYXkuZnJvbShbMF0uZW50cmllcygpKTtcbiAgICByZXR1cm4gYXJyLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KGFyclswXSkgJiYgYXJyWzBdWzBdID09PSAwICYmIGFyclswXVsxXSA9PT0gMDtcbiAgfSgpKTtcbiAgaWYgKCFhcnJheUZyb21Td2FsbG93c05lZ2F0aXZlTGVuZ3RocyB8fCAhYXJyYXlGcm9tSGFuZGxlc0l0ZXJhYmxlcykge1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LCAnZnJvbScsIEFycmF5U2hpbXMuZnJvbSk7XG4gIH1cbiAgdmFyIGFycmF5RnJvbUhhbmRsZXNVbmRlZmluZWRNYXBGdW5jdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gTWljcm9zb2Z0IEVkZ2UgdjAuMTEgdGhyb3dzIGlmIHRoZSBtYXBGbiBhcmd1bWVudCBpcyAqcHJvdmlkZWQqIGJ1dCB1bmRlZmluZWQsXG4gICAgLy8gYnV0IHRoZSBzcGVjIGRvZXNuJ3QgY2FyZSBpZiBpdCdzIHByb3ZpZGVkIG9yIG5vdCAtIHVuZGVmaW5lZCBkb2Vzbid0IHRocm93LlxuICAgIHJldHVybiB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShbMF0sIHZvaWQgMCk7XG4gICAgfSk7XG4gIH0oKSk7XG4gIGlmICghYXJyYXlGcm9tSGFuZGxlc1VuZGVmaW5lZE1hcEZ1bmN0aW9uKSB7XG4gICAgdmFyIG9yaWdBcnJheUZyb20gPSBBcnJheS5mcm9tO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LCAnZnJvbScsIGZ1bmN0aW9uIGZyb20oaXRlbXMpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnQXJyYXlGcm9tLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9jYWxsKG9yaWdBcnJheUZyb20sIHRoaXMsIGl0ZW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBpbnQzMnNBc09uZSA9IC0oTWF0aC5wb3coMiwgMzIpIC0gMSk7XG4gIHZhciB0b0xlbmd0aHNDb3JyZWN0bHkgPSBmdW5jdGlvbiAobWV0aG9kLCByZXZlcnNlZCkge1xuICAgIHZhciBvYmogPSB7IGxlbmd0aDogaW50MzJzQXNPbmUgfTtcbiAgICBvYmpbcmV2ZXJzZWQgPyAob2JqLmxlbmd0aCA+Pj4gMCkgLSAxIDogMF0gPSB0cnVlO1xuICAgIHJldHVybiB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICBfY2FsbChtZXRob2QsIG9iaiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub3RlOiBpbiBub25jb25mb3JtaW5nIGJyb3dzZXJzLCB0aGlzIHdpbGwgYmUgY2FsbGVkXG4gICAgICAgIC8vIC0xID4+PiAwIHRpbWVzLCB3aGljaCBpcyA0Mjk0OTY3Mjk1LCBzbyB0aGUgdGhyb3cgbWF0dGVycy5cbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3Nob3VsZCBub3QgcmVhY2ggaGVyZScpO1xuICAgICAgfSwgW10pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH07XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKSkge1xuICAgIHZhciBvcmlnaW5hbEZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja0ZuKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbEZvckVhY2gsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLm1hcCkpIHtcbiAgICB2YXIgb3JpZ2luYWxNYXAgPSBBcnJheS5wcm90b3R5cGUubWFwO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ21hcCcsIGZ1bmN0aW9uIG1hcChjYWxsYmFja0ZuKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbE1hcCwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUuZmlsdGVyKSkge1xuICAgIHZhciBvcmlnaW5hbEZpbHRlciA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXI7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsRmlsdGVyLCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5zb21lKSkge1xuICAgIHZhciBvcmlnaW5hbFNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdzb21lJywgZnVuY3Rpb24gc29tZShjYWxsYmFja0ZuKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbFNvbWUsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLmV2ZXJ5KSkge1xuICAgIHZhciBvcmlnaW5hbEV2ZXJ5ID0gQXJyYXkucHJvdG90eXBlLmV2ZXJ5O1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ2V2ZXJ5JywgZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxFdmVyeSwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUucmVkdWNlKSkge1xuICAgIHZhciBvcmlnaW5hbFJlZHVjZSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAncmVkdWNlJywgZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVkdWNlLCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCwgdHJ1ZSkpIHtcbiAgICB2YXIgb3JpZ2luYWxSZWR1Y2VSaWdodCA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodDtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdyZWR1Y2VSaWdodCcsIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVkdWNlUmlnaHQsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICB2YXIgbGFja3NPY3RhbFN1cHBvcnQgPSBOdW1iZXIoJzBvMTAnKSAhPT0gODtcbiAgdmFyIGxhY2tzQmluYXJ5U3VwcG9ydCA9IE51bWJlcignMGIxMCcpICE9PSAyO1xuICB2YXIgdHJpbXNOb25XaGl0ZXNwYWNlID0gX3NvbWUobm9uV1MsIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIE51bWJlcihjICsgMCArIGMpID09PSAwO1xuICB9KTtcbiAgaWYgKGxhY2tzT2N0YWxTdXBwb3J0IHx8IGxhY2tzQmluYXJ5U3VwcG9ydCB8fCB0cmltc05vbldoaXRlc3BhY2UpIHtcbiAgICB2YXIgT3JpZ051bWJlciA9IE51bWJlcjtcbiAgICB2YXIgYmluYXJ5UmVnZXggPSAvXjBiWzAxXSskL2k7XG4gICAgdmFyIG9jdGFsUmVnZXggPSAvXjBvWzAtN10rJC9pO1xuICAgIC8vIE5vdGUgdGhhdCBpbiBJRSA4LCBSZWdFeHAucHJvdG90eXBlLnRlc3QgZG9lc24ndCBzZWVtIHRvIGV4aXN0OiBpZSwgXCJ0ZXN0XCIgaXMgYW4gb3duIHByb3BlcnR5IG9mIHJlZ2V4ZXMuIHd0Zi5cbiAgICB2YXIgaXNCaW5hcnkgPSBiaW5hcnlSZWdleC50ZXN0LmJpbmQoYmluYXJ5UmVnZXgpO1xuICAgIHZhciBpc09jdGFsID0gb2N0YWxSZWdleC50ZXN0LmJpbmQob2N0YWxSZWdleCk7XG4gICAgdmFyIHRvUHJpbWl0aXZlID0gZnVuY3Rpb24gKE8pIHsgLy8gbmVlZCB0byByZXBsYWNlIHRoaXMgd2l0aCBgZXMtdG8tcHJpbWl0aXZlL2VzNmBcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIE8udmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQgPSBPLnZhbHVlT2YoKTtcbiAgICAgICAgaWYgKFR5cGUucHJpbWl0aXZlKHJlc3VsdCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIE8udG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0ID0gTy50b1N0cmluZygpO1xuICAgICAgICBpZiAoVHlwZS5wcmltaXRpdmUocmVzdWx0KSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbiAgICB9O1xuICAgIHZhciBoYXNOb25XUyA9IG5vbldTcmVnZXgudGVzdC5iaW5kKG5vbldTcmVnZXgpO1xuICAgIHZhciBpc0JhZEhleCA9IGlzQmFkSGV4UmVnZXgudGVzdC5iaW5kKGlzQmFkSGV4UmVnZXgpO1xuICAgIHZhciBOdW1iZXJTaGltID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMgaXMgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2Ugb2YgSUUgNi04J3Mgd2Fja3kgc2NvcGluZyBpc3N1ZXMgd2l0aCBuYW1lZCBmdW5jdGlvbiBleHByZXNzaW9ucy5cbiAgICAgIHZhciBOdW1iZXJTaGltID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIHZhciBwcmltVmFsdWU7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHByaW1WYWx1ZSA9IFR5cGUucHJpbWl0aXZlKHZhbHVlKSA/IHZhbHVlIDogdG9QcmltaXRpdmUodmFsdWUsICdudW1iZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmltVmFsdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcHJpbVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHByaW1WYWx1ZSA9IEVTLkNhbGwodHJpbVNoaW0sIHByaW1WYWx1ZSk7XG4gICAgICAgICAgaWYgKGlzQmluYXJ5KHByaW1WYWx1ZSkpIHtcbiAgICAgICAgICAgIHByaW1WYWx1ZSA9IHBhcnNlSW50KF9zdHJTbGljZShwcmltVmFsdWUsIDIpLCAyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzT2N0YWwocHJpbVZhbHVlKSkge1xuICAgICAgICAgICAgcHJpbVZhbHVlID0gcGFyc2VJbnQoX3N0clNsaWNlKHByaW1WYWx1ZSwgMiksIDgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTm9uV1MocHJpbVZhbHVlKSB8fCBpc0JhZEhleChwcmltVmFsdWUpKSB7XG4gICAgICAgICAgICBwcmltVmFsdWUgPSBOYU47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWNlaXZlciA9IHRoaXM7XG4gICAgICAgIHZhciB2YWx1ZU9mU3VjY2VlZHMgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgT3JpZ051bWJlci5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHJlY2VpdmVyKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZWNlaXZlciBpbnN0YW5jZW9mIE51bWJlclNoaW0gJiYgIXZhbHVlT2ZTdWNjZWVkcykge1xuICAgICAgICAgIHJldHVybiBuZXcgT3JpZ051bWJlcihwcmltVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPcmlnTnVtYmVyKHByaW1WYWx1ZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIE51bWJlclNoaW07XG4gICAgfSgpKTtcbiAgICB3cmFwQ29uc3RydWN0b3IoT3JpZ051bWJlciwgTnVtYmVyU2hpbSwge30pO1xuICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBFUzMgYnJvd3NlcnMsIHdoZXJlIHRoZXNlIHByb3BlcnRpZXMgYXJlIG5vbi1lbnVtZXJhYmxlLlxuICAgIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyU2hpbSwge1xuICAgICAgTmFOOiBPcmlnTnVtYmVyLk5hTixcbiAgICAgIE1BWF9WQUxVRTogT3JpZ051bWJlci5NQVhfVkFMVUUsXG4gICAgICBNSU5fVkFMVUU6IE9yaWdOdW1iZXIuTUlOX1ZBTFVFLFxuICAgICAgTkVHQVRJVkVfSU5GSU5JVFk6IE9yaWdOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG4gICAgICBQT1NJVElWRV9JTkZJTklUWTogT3JpZ051bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgIH0pO1xuICAgIC8qIGdsb2JhbHMgTnVtYmVyOiB0cnVlICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICBOdW1iZXIgPSBOdW1iZXJTaGltO1xuICAgIFZhbHVlLnJlZGVmaW5lKGdsb2JhbHMsICdOdW1iZXInLCBOdW1iZXJTaGltKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLCBuby1nbG9iYWwtYXNzaWduICovXG4gICAgLyogZ2xvYmFscyBOdW1iZXI6IGZhbHNlICovXG4gIH1cblxuICB2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICBkZWZpbmVQcm9wZXJ0aWVzKE51bWJlciwge1xuICAgIE1BWF9TQUZFX0lOVEVHRVI6IG1heFNhZmVJbnRlZ2VyLFxuICAgIE1JTl9TQUZFX0lOVEVHRVI6IC1tYXhTYWZlSW50ZWdlcixcbiAgICBFUFNJTE9OOiAyLjIyMDQ0NjA0OTI1MDMxM2UtMTYsXG5cbiAgICBwYXJzZUludDogZ2xvYmFscy5wYXJzZUludCxcbiAgICBwYXJzZUZsb2F0OiBnbG9iYWxzLnBhcnNlRmxvYXQsXG5cbiAgICBpc0Zpbml0ZTogbnVtYmVySXNGaW5pdGUsXG5cbiAgICBpc0ludGVnZXI6IGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIG51bWJlcklzRmluaXRlKHZhbHVlKSAmJiBFUy5Ub0ludGVnZXIodmFsdWUpID09PSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpICYmIF9hYnModmFsdWUpIDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgIH0sXG5cbiAgICBpc05hTjogbnVtYmVySXNOYU5cbiAgfSk7XG4gIC8vIEZpcmVmb3ggMzcgaGFzIGEgY29uZm9ybWluZyBOdW1iZXIucGFyc2VJbnQsIGJ1dCBpdCdzIG5vdCA9PT0gdG8gdGhlIGdsb2JhbCBwYXJzZUludCAoZml4ZWQgaW4gdjQwKVxuICBkZWZpbmVQcm9wZXJ0eShOdW1iZXIsICdwYXJzZUludCcsIGdsb2JhbHMucGFyc2VJbnQsIE51bWJlci5wYXJzZUludCAhPT0gZ2xvYmFscy5wYXJzZUludCk7XG5cbiAgLy8gV29yayBhcm91bmQgYnVncyBpbiBBcnJheSNmaW5kIGFuZCBBcnJheSNmaW5kSW5kZXggLS0gZWFybHlcbiAgLy8gaW1wbGVtZW50YXRpb25zIHNraXBwZWQgaG9sZXMgaW4gc3BhcnNlIGFycmF5cy4gKE5vdGUgdGhhdCB0aGVcbiAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGZpbmQvZmluZEluZGV4IGluZGlyZWN0bHkgdXNlIHNoaW1tZWRcbiAgLy8gbWV0aG9kcyBvZiBOdW1iZXIsIHNvIHRoaXMgdGVzdCBoYXMgdG8gaGFwcGVuIGRvd24gaGVyZS4pXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXNwYXJzZS1hcnJheXMgKi9cbiAgaWYgKFssIDFdLmZpbmQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSkgPT09IDEpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmaW5kJywgQXJyYXlQcm90b3R5cGVTaGltcy5maW5kKTtcbiAgfVxuICBpZiAoWywgMV0uZmluZEluZGV4KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0pICE9PSAwKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnZmluZEluZGV4JywgQXJyYXlQcm90b3R5cGVTaGltcy5maW5kSW5kZXgpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tc3BhcnNlLWFycmF5cyAqL1xuXG4gIHZhciBpc0VudW1lcmFibGVPbiA9IEZ1bmN0aW9uLmJpbmQuY2FsbChGdW5jdGlvbi5iaW5kLCBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbiAgdmFyIGVuc3VyZUVudW1lcmFibGUgPSBmdW5jdGlvbiBlbnN1cmVFbnVtZXJhYmxlKG9iaiwgcHJvcCkge1xuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIGlzRW51bWVyYWJsZU9uKG9iaiwgcHJvcCkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgfVxuICB9O1xuICB2YXIgc2xpY2VBcmdzID0gZnVuY3Rpb24gc2xpY2VBcmdzKCkge1xuICAgIC8vIHBlciBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL3dpa2kvT3B0aW1pemF0aW9uLWtpbGxlcnMjMzItbGVha2luZy1hcmd1bWVudHNcbiAgICAvLyBhbmQgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi80MzI3NzYyY2I4N2E4YzYzNGEyOVxuICAgIHZhciBpbml0aWFsID0gTnVtYmVyKHRoaXMpO1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBkZXNpcmVkQXJnQ291bnQgPSBsZW4gLSBpbml0aWFsO1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGRlc2lyZWRBcmdDb3VudCA8IDAgPyAwIDogZGVzaXJlZEFyZ0NvdW50KTtcbiAgICBmb3IgKHZhciBpID0gaW5pdGlhbDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBhcmdzW2kgLSBpbml0aWFsXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH07XG4gIHZhciBhc3NpZ25UbyA9IGZ1bmN0aW9uIGFzc2lnblRvKHNvdXJjZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBhc3NpZ25Ub1NvdXJjZSh0YXJnZXQsIGtleSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGFzc2lnblJlZHVjZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgc291cmNlS2V5cyA9IGtleXMoT2JqZWN0KHNvdXJjZSkpO1xuICAgIHZhciBzeW1ib2xzO1xuICAgIGlmIChFUy5Jc0NhbGxhYmxlKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpKSB7XG4gICAgICBzeW1ib2xzID0gX2ZpbHRlcihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE9iamVjdChzb3VyY2UpKSwgaXNFbnVtZXJhYmxlT24oc291cmNlKSk7XG4gICAgfVxuICAgIHJldHVybiBfcmVkdWNlKF9jb25jYXQoc291cmNlS2V5cywgc3ltYm9scyB8fCBbXSksIGFzc2lnblRvKHNvdXJjZSksIHRhcmdldCk7XG4gIH07XG5cbiAgdmFyIE9iamVjdFNoaW1zID0ge1xuICAgIC8vIDE5LjEuMy4xXG4gICAgYXNzaWduOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgIHZhciB0byA9IEVTLlRvT2JqZWN0KHRhcmdldCwgJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgcmV0dXJuIF9yZWR1Y2UoRVMuQ2FsbChzbGljZUFyZ3MsIDEsIGFyZ3VtZW50cyksIGFzc2lnblJlZHVjZXIsIHRvKTtcbiAgICB9LFxuXG4gICAgLy8gQWRkZWQgaW4gV2ViS2l0IGluIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM4NjVcbiAgICBpczogZnVuY3Rpb24gaXMoYSwgYikge1xuICAgICAgcmV0dXJuIEVTLlNhbWVWYWx1ZShhLCBiKTtcbiAgICB9XG4gIH07XG4gIHZhciBhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyA9IE9iamVjdC5hc3NpZ24gJiYgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zICYmIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRmlyZWZveCAzNyBzdGlsbCBoYXMgXCJwZW5kaW5nIGV4Y2VwdGlvblwiIGxvZ2ljIGluIGl0cyBPYmplY3QuYXNzaWduIGltcGxlbWVudGF0aW9uLFxuICAgIC8vIHdoaWNoIGlzIDcyJSBzbG93ZXIgdGhhbiBvdXIgc2hpbSwgYW5kIEZpcmVmb3ggNDAncyBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG4gICAgdmFyIHRocm93ZXIgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoeyAxOiAyIH0pO1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRocm93ZXIsICd4eScpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aHJvd2VyWzFdID09PSAneSc7XG4gICAgfVxuICB9KCkpO1xuICBpZiAoYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdhc3NpZ24nLCBPYmplY3RTaGltcy5hc3NpZ24pO1xuICB9XG4gIGRlZmluZVByb3BlcnRpZXMoT2JqZWN0LCBPYmplY3RTaGltcyk7XG5cbiAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICB2YXIgRVM1T2JqZWN0U2hpbXMgPSB7XG4gICAgICAvLyAxOS4xLjMuOVxuICAgICAgLy8gc2hpbSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vNTU5MzU1NFxuICAgICAgc2V0UHJvdG90eXBlT2Y6IChmdW5jdGlvbiAoT2JqZWN0LCBtYWdpYykge1xuICAgICAgICB2YXIgc2V0O1xuXG4gICAgICAgIHZhciBjaGVja0FyZ3MgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChPKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IHNldCBwcm90b3R5cGUgb24gYSBub24tb2JqZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHByb3RvID09PSBudWxsIHx8IEVTLlR5cGVJc09iamVjdChwcm90bykpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW4gb25seSBzZXQgcHJvdG90eXBlIHRvIGFuIG9iamVjdCBvciBudWxsJyArIHByb3RvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gICAgICAgICAgY2hlY2tBcmdzKE8sIHByb3RvKTtcbiAgICAgICAgICBfY2FsbChzZXQsIE8sIHByb3RvKTtcbiAgICAgICAgICByZXR1cm4gTztcbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIHRoaXMgd29ya3MgYWxyZWFkeSBpbiBGaXJlZm94IGFuZCBTYWZhcmlcbiAgICAgICAgICBzZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsIG1hZ2ljKS5zZXQ7XG4gICAgICAgICAgX2NhbGwoc2V0LCB7fSwgbnVsbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZSAhPT0ge31bbWFnaWNdKSB7XG4gICAgICAgICAgICAvLyBJRSA8IDExIGNhbm5vdCBiZSBzaGltbWVkXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHByb2JhYmx5IENocm9tZSBvciBzb21lIG9sZCBNb2JpbGUgc3RvY2sgYnJvd3NlclxuICAgICAgICAgIHNldCA9IGZ1bmN0aW9uIChwcm90bykge1xuICAgICAgICAgICAgdGhpc1ttYWdpY10gPSBwcm90bztcbiAgICAgICAgICB9O1xuICAgICAgICAgIC8vIHBsZWFzZSBub3RlIHRoYXQgdGhpcyB3aWxsICoqbm90Kiogd29ya1xuICAgICAgICAgIC8vIGluIHRob3NlIGJyb3dzZXJzIHRoYXQgZG8gbm90IGluaGVyaXRcbiAgICAgICAgICAvLyBfX3Byb3RvX18gYnkgbWlzdGFrZSBmcm9tIE9iamVjdC5wcm90b3R5cGVcbiAgICAgICAgICAvLyBpbiB0aGVzZSBjYXNlcyB3ZSBzaG91bGQgcHJvYmFibHkgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAvLyBvciBhdCBsZWFzdCBiZSBpbmZvcm1lZCBhYm91dCB0aGUgaXNzdWVcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9IHNldFByb3RvdHlwZU9mKFxuICAgICAgICAgICAgc2V0UHJvdG90eXBlT2Yoe30sIG51bGwpLFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZVxuICAgICAgICAgICkgaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT09IHRydWUgbWVhbnMgaXQgd29ya3MgYXMgbWVhbnRcbiAgICAgICAgICAvLyBzZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9PT0gZmFsc2UgbWVhbnMgaXQncyBub3QgMTAwJSByZWxpYWJsZVxuICAgICAgICAgIC8vIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID09PSB1bmRlZmluZWRcbiAgICAgICAgICAvLyBvclxuICAgICAgICAgIC8vIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID09ICBudWxsIG1lYW5zIGl0J3Mgbm90IGEgcG9seWZpbGxcbiAgICAgICAgICAvLyB3aGljaCBtZWFucyBpdCB3b3JrcyBhcyBleHBlY3RlZFxuICAgICAgICAgIC8vIHdlIGNhbiBldmVuIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fcHJvdG9fXztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0UHJvdG90eXBlT2Y7XG4gICAgICB9KE9iamVjdCwgJ19fcHJvdG9fXycpKVxuICAgIH07XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKE9iamVjdCwgRVM1T2JqZWN0U2hpbXMpO1xuICB9XG5cbiAgLy8gV29ya2Fyb3VuZCBidWcgaW4gT3BlcmEgMTIgd2hlcmUgc2V0UHJvdG90eXBlT2YoeCwgbnVsbCkgZG9lc24ndCB3b3JrLFxuICAvLyBidXQgT2JqZWN0LmNyZWF0ZShudWxsKSBkb2VzLlxuICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJlxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCkpICE9PSBudWxsICYmXG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmNyZWF0ZShudWxsKSkgPT09IG51bGwpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIEZBS0VOVUxMID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHZhciBncG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgICB2YXIgc3BvID0gT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGdwbyhvKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gRkFLRU5VTEwgPyBudWxsIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIChvLCBwKSB7XG4gICAgICAgIHZhciBwcm90byA9IHAgPT09IG51bGwgPyBGQUtFTlVMTCA6IHA7XG4gICAgICAgIHJldHVybiBzcG8obywgcHJvdG8pO1xuICAgICAgfTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9IGZhbHNlO1xuICAgIH0oKSk7XG4gIH1cblxuICB2YXIgb2JqZWN0S2V5c0FjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5rZXlzKCdmb28nKTsgfSk7XG4gIGlmICghb2JqZWN0S2V5c0FjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgdmFyIG9yaWdpbmFsT2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2tleXMnLCBmdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RLZXlzKEVTLlRvT2JqZWN0KHZhbHVlKSk7XG4gICAgfSk7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICB9XG4gIHZhciBvYmplY3RLZXlzUmVqZWN0c1JlZ2V4ID0gdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmtleXMoL2EvZyk7IH0pO1xuICBpZiAob2JqZWN0S2V5c1JlamVjdHNSZWdleCkge1xuICAgIHZhciByZWdleFJlamVjdGluZ09iamVjdEtleXMgPSBPYmplY3Qua2V5cztcbiAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdrZXlzJywgZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICAgICAgaWYgKFR5cGUucmVnZXgodmFsdWUpKSB7XG4gICAgICAgIHZhciByZWdleEtleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgayBpbiB2YWx1ZSkge1xuICAgICAgICAgIGlmIChfaGFzT3duUHJvcGVydHkodmFsdWUsIGspKSB7XG4gICAgICAgICAgICBfcHVzaChyZWdleEtleXMsIGspO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnZXhLZXlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlZ2V4UmVqZWN0aW5nT2JqZWN0S2V5cyh2YWx1ZSk7XG4gICAgfSk7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgdmFyIG9iamVjdEdPUE5BY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcygnZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0R09QTkFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgY2FjaGVkV2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdEdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWwgPSBFUy5Ub09iamVjdCh2YWx1ZSk7XG4gICAgICAgIGlmIChfdG9TdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyh2YWwpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElFIGJ1ZyB3aGVyZSBsYXlvdXQgZW5naW5lIGNhbGxzIHVzZXJsYW5kIGdPUE4gZm9yIGNyb3NzLWRvbWFpbiBgd2luZG93YCBvYmplY3RzXG4gICAgICAgICAgICByZXR1cm4gX2NvbmNhdChbXSwgY2FjaGVkV2luZG93TmFtZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICB2YXIgb2JqZWN0R09QREFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2ZvbycsICdiYXInKTsgfSk7XG4gICAgaWYgKCFvYmplY3RHT1BEQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvcihFUy5Ub09iamVjdCh2YWx1ZSksIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LnNlYWwpIHtcbiAgICB2YXIgb2JqZWN0U2VhbEFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5zZWFsKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RTZWFsQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdFNlYWwgPSBPYmplY3Quc2VhbDtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ3NlYWwnLCBmdW5jdGlvbiBzZWFsKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0U2VhbCh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5pc1NlYWxlZCkge1xuICAgIHZhciBvYmplY3RJc1NlYWxlZEFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5pc1NlYWxlZCgnZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0SXNTZWFsZWRBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0SXNTZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQ7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdpc1NlYWxlZCcsIGZ1bmN0aW9uIGlzU2VhbGVkKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RJc1NlYWxlZCh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICB2YXIgb2JqZWN0RnJlZXplQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmZyZWV6ZSgnZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0RnJlZXplQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdEZyZWV6ZSA9IE9iamVjdC5mcmVlemU7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdmcmVlemUnLCBmdW5jdGlvbiBmcmVlemUodmFsdWUpIHtcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RGcmVlemUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3QuaXNGcm96ZW4pIHtcbiAgICB2YXIgb2JqZWN0SXNGcm96ZW5BY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuaXNGcm96ZW4oJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdElzRnJvemVuQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdElzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnaXNGcm96ZW4nLCBmdW5jdGlvbiBpc0Zyb3plbih2YWx1ZSkge1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdCh2YWx1ZSkpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0SXNGcm96ZW4odmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICB2YXIgb2JqZWN0UHJldmVudEV4dGVuc2lvbnNBY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdFByZXZlbnRFeHRlbnNpb25zQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbE9iamVjdFByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh2YWx1ZSkge1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdFByZXZlbnRFeHRlbnNpb25zKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZSkge1xuICAgIHZhciBvYmplY3RJc0V4dGVuc2libGVBY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RJc0V4dGVuc2libGVBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0SXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdCh2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdElzRXh0ZW5zaWJsZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgIHZhciBvYmplY3RHZXRQcm90b0FjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZignZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0R2V0UHJvdG9BY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsR2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEdldFByb3RvKEVTLlRvT2JqZWN0KHZhbHVlKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaGFzRmxhZ3MgPSBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpO1xuICAgIHJldHVybiBkZXNjICYmIEVTLklzQ2FsbGFibGUoZGVzYy5nZXQpO1xuICB9KCkpO1xuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiAhaGFzRmxhZ3MpIHtcbiAgICB2YXIgcmVnRXhwRmxhZ3NHZXR0ZXIgPSBmdW5jdGlvbiBmbGFncygpIHtcbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHRoaXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHR5cGU6IG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsKSB7XG4gICAgICAgIHJlc3VsdCArPSAnZyc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZ25vcmVDYXNlKSB7XG4gICAgICAgIHJlc3VsdCArPSAnaSc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tdWx0aWxpbmUpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdtJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVuaWNvZGUpIHtcbiAgICAgICAgcmVzdWx0ICs9ICd1JztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0aWNreSkge1xuICAgICAgICByZXN1bHQgKz0gJ3knO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgVmFsdWUuZ2V0dGVyKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHJlZ0V4cEZsYWdzR2V0dGVyKTtcbiAgfVxuXG4gIHZhciByZWdFeHBTdXBwb3J0c0ZsYWdzV2l0aFJlZ2V4ID0gc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFN0cmluZyhuZXcgUmVnRXhwKC9hL2csICdpJykpID09PSAnL2EvaSc7XG4gIH0pO1xuICB2YXIgcmVnRXhwTmVlZHNUb1N1cHBvcnRTeW1ib2xNYXRjaCA9IGhhc1N5bWJvbHMgJiYgc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiAoZnVuY3Rpb24gKCkge1xuICAgIC8vIEVkZ2UgMC4xMiBzdXBwb3J0cyBmbGFncyBmdWxseSwgYnV0IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9sLm1hdGNoXG4gICAgdmFyIHJlZ2V4ID0gLy4vO1xuICAgIHJlZ2V4W1N5bWJvbC5tYXRjaF0gPSBmYWxzZTtcbiAgICByZXR1cm4gUmVnRXhwKHJlZ2V4KSA9PT0gcmVnZXg7XG4gIH0oKSk7XG5cbiAgdmFyIHJlZ2V4VG9TdHJpbmdJc0dlbmVyaWMgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2FiYycgfSkgPT09ICcvYWJjLyc7XG4gIH0pO1xuICB2YXIgcmVnZXhUb1N0cmluZ1N1cHBvcnRzR2VuZXJpY0ZsYWdzID0gcmVnZXhUb1N0cmluZ0lzR2VuZXJpYyAmJiB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pID09PSAnL2EvYic7XG4gIH0pO1xuICBpZiAoIXJlZ2V4VG9TdHJpbmdJc0dlbmVyaWMgfHwgIXJlZ2V4VG9TdHJpbmdTdXBwb3J0c0dlbmVyaWNGbGFncykge1xuICAgIHZhciBvcmlnUmVnRXhwVG9TdHJpbmcgPSBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGRlZmluZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIFIgPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgaWYgKFR5cGUucmVnZXgoUikpIHtcbiAgICAgICAgcmV0dXJuIF9jYWxsKG9yaWdSZWdFeHBUb1N0cmluZywgUik7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9ICRTdHJpbmcoUi5zb3VyY2UpO1xuICAgICAgdmFyIGZsYWdzID0gJFN0cmluZyhSLmZsYWdzKTtcbiAgICAgIHJldHVybiAnLycgKyBwYXR0ZXJuICsgJy8nICsgZmxhZ3M7XG4gICAgfSwgdHJ1ZSk7XG4gICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLCBvcmlnUmVnRXhwVG9TdHJpbmcpO1xuICB9XG5cbiAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgKCFyZWdFeHBTdXBwb3J0c0ZsYWdzV2l0aFJlZ2V4IHx8IHJlZ0V4cE5lZWRzVG9TdXBwb3J0U3ltYm9sTWF0Y2gpKSB7XG4gICAgdmFyIGZsYWdzR2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnKS5nZXQ7XG4gICAgdmFyIHNvdXJjZURlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cC5wcm90b3R5cGUsICdzb3VyY2UnKSB8fCB7fTtcbiAgICB2YXIgbGVnYWN5U291cmNlR2V0dGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJpb3IgdG8gaXQgYmVpbmcgYSBnZXR0ZXIsIGl0J3Mgb3duICsgbm9uY29uZmlndXJhYmxlXG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gICAgfTtcbiAgICB2YXIgc291cmNlR2V0dGVyID0gRVMuSXNDYWxsYWJsZShzb3VyY2VEZXNjLmdldCkgPyBzb3VyY2VEZXNjLmdldCA6IGxlZ2FjeVNvdXJjZUdldHRlcjtcblxuICAgIHZhciBPcmlnUmVnRXhwID0gUmVnRXhwO1xuICAgIHZhciBSZWdFeHBTaGltID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICAgICAgdmFyIHBhdHRlcm5Jc1JlZ0V4cCA9IEVTLklzUmVnRXhwKHBhdHRlcm4pO1xuICAgICAgICB2YXIgY2FsbGVkV2l0aE5ldyA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgICAgIGlmICghY2FsbGVkV2l0aE5ldyAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgdHlwZW9mIGZsYWdzID09PSAndW5kZWZpbmVkJyAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHtcbiAgICAgICAgICByZXR1cm4gcGF0dGVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBQID0gcGF0dGVybjtcbiAgICAgICAgdmFyIEYgPSBmbGFncztcbiAgICAgICAgaWYgKFR5cGUucmVnZXgocGF0dGVybikpIHtcbiAgICAgICAgICBQID0gRVMuQ2FsbChzb3VyY2VHZXR0ZXIsIHBhdHRlcm4pO1xuICAgICAgICAgIEYgPSB0eXBlb2YgZmxhZ3MgPT09ICd1bmRlZmluZWQnID8gRVMuQ2FsbChmbGFnc0dldHRlciwgcGF0dGVybikgOiBmbGFncztcbiAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChQLCBGKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuSXNSZWdFeHApIHtcbiAgICAgICAgICBQID0gcGF0dGVybi5zb3VyY2U7XG4gICAgICAgICAgRiA9IHR5cGVvZiBmbGFncyA9PT0gJ3VuZGVmaW5lZCcgPyBwYXR0ZXJuLmZsYWdzIDogZmxhZ3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBPcmlnUmVnRXhwKHBhdHRlcm4sIGZsYWdzKTtcbiAgICAgIH07XG4gICAgfSgpKTtcbiAgICB3cmFwQ29uc3RydWN0b3IoT3JpZ1JlZ0V4cCwgUmVnRXhwU2hpbSwge1xuICAgICAgJGlucHV0OiB0cnVlIC8vIENocm9tZSA8IHYzOSAmIE9wZXJhIDwgMjYgaGF2ZSBhIG5vbnN0YW5kYXJkIFwiJGlucHV0XCIgcHJvcGVydHlcbiAgICB9KTtcbiAgICAvKiBnbG9iYWxzIFJlZ0V4cDogdHJ1ZSAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLCBuby1nbG9iYWwtYXNzaWduICovXG4gICAgUmVnRXhwID0gUmVnRXhwU2hpbTtcbiAgICBWYWx1ZS5yZWRlZmluZShnbG9iYWxzLCAnUmVnRXhwJywgUmVnRXhwU2hpbSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgIC8qIGdsb2JhbHMgUmVnRXhwOiBmYWxzZSAqL1xuICB9XG5cbiAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICB2YXIgcmVnZXhHbG9iYWxzID0ge1xuICAgICAgaW5wdXQ6ICckXycsXG4gICAgICBsYXN0TWF0Y2g6ICckJicsXG4gICAgICBsYXN0UGFyZW46ICckKycsXG4gICAgICBsZWZ0Q29udGV4dDogJyRgJyxcbiAgICAgIHJpZ2h0Q29udGV4dDogJyRcXCcnXG4gICAgfTtcbiAgICBfZm9yRWFjaChrZXlzKHJlZ2V4R2xvYmFscyksIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAocHJvcCBpbiBSZWdFeHAgJiYgIShyZWdleEdsb2JhbHNbcHJvcF0gaW4gUmVnRXhwKSkge1xuICAgICAgICBWYWx1ZS5nZXR0ZXIoUmVnRXhwLCByZWdleEdsb2JhbHNbcHJvcF0sIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gUmVnRXhwW3Byb3BdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhZGREZWZhdWx0U3BlY2llcyhSZWdFeHApO1xuXG4gIHZhciBpbnZlcnNlRXBzaWxvbiA9IDEgLyBOdW1iZXIuRVBTSUxPTjtcbiAgdmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIHJvdW5kVGllc1RvRXZlbihuKSB7XG4gICAgLy8gRXZlbiB0aG91Z2ggdGhpcyByZWR1Y2VzIGRvd24gdG8gYHJldHVybiBuYCwgaXQgdGFrZXMgYWR2YW50YWdlIG9mIGJ1aWx0LWluIHJvdW5kaW5nLlxuICAgIHJldHVybiAobiArIGludmVyc2VFcHNpbG9uKSAtIGludmVyc2VFcHNpbG9uO1xuICB9O1xuICB2YXIgQklOQVJZXzMyX0VQU0lMT04gPSBNYXRoLnBvdygyLCAtMjMpO1xuICB2YXIgQklOQVJZXzMyX01BWF9WQUxVRSA9IE1hdGgucG93KDIsIDEyNykgKiAoMiAtIEJJTkFSWV8zMl9FUFNJTE9OKTtcbiAgdmFyIEJJTkFSWV8zMl9NSU5fVkFMVUUgPSBNYXRoLnBvdygyLCAtMTI2KTtcbiAgdmFyIEUgPSBNYXRoLkU7XG4gIHZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG4gIHZhciBMT0cxMEUgPSBNYXRoLkxPRzEwRTtcbiAgdmFyIG51bWJlckNMWiA9IE51bWJlci5wcm90b3R5cGUuY2x6O1xuICBkZWxldGUgTnVtYmVyLnByb3RvdHlwZS5jbHo7IC8vIFNhZmFyaSA4IGhhcyBOdW1iZXIjY2x6XG5cbiAgdmFyIE1hdGhTaGltcyA9IHtcbiAgICBhY29zaDogZnVuY3Rpb24gYWNvc2godmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmIChudW1iZXJJc05hTih4KSB8fCB2YWx1ZSA8IDEpIHsgcmV0dXJuIE5hTjsgfVxuICAgICAgaWYgKHggPT09IDEpIHsgcmV0dXJuIDA7IH1cbiAgICAgIGlmICh4ID09PSBJbmZpbml0eSkgeyByZXR1cm4geDsgfVxuXG4gICAgICB2YXIgeEludlNxdWFyZWQgPSAxIC8gKHggKiB4KTtcbiAgICAgIGlmICh4IDwgMikge1xuICAgICAgICByZXR1cm4gX2xvZzFwKHggLSAxICsgKF9zcXJ0KDEgLSB4SW52U3F1YXJlZCkgKiB4KSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFsZlggPSB4IC8gMjtcbiAgICAgIHJldHVybiBfbG9nMXAoaGFsZlggKyAoX3NxcnQoMSAtIHhJbnZTcXVhcmVkKSAqIGhhbGZYKSAtIDEpICsgKDEgLyBMT0cyRSk7XG4gICAgfSxcblxuICAgIGFzaW5oOiBmdW5jdGlvbiBhc2luaCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHggPT09IDAgfHwgIWdsb2JhbElzRmluaXRlKHgpKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuXG4gICAgICB2YXIgYSA9IF9hYnMoeCk7XG4gICAgICB2YXIgYVNxdWFyZWQgPSBhICogYTtcbiAgICAgIHZhciBzID0gX3NpZ24oeCk7XG4gICAgICBpZiAoYSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHMgKiBfbG9nMXAoYSArIChhU3F1YXJlZCAvIChfc3FydChhU3F1YXJlZCArIDEpICsgMSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzICogKF9sb2cxcCgoYSAvIDIpICsgKF9zcXJ0KDEgKyAoMSAvIGFTcXVhcmVkKSkgKiBhIC8gMikgLSAxKSArICgxIC8gTE9HMkUpKTtcbiAgICB9LFxuXG4gICAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgIGlmICh4ID09PSAwKSB7IHJldHVybiB4OyB9XG4gICAgICBpZiAoeCA9PT0gLTEpIHsgcmV0dXJuIC1JbmZpbml0eTsgfVxuICAgICAgaWYgKHggPT09IDEpIHsgcmV0dXJuIEluZmluaXR5OyB9XG4gICAgICBpZiAobnVtYmVySXNOYU4oeCkgfHwgeCA8IC0xIHx8IHggPiAxKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG5cbiAgICAgIHZhciBhID0gX2Ficyh4KTtcbiAgICAgIHJldHVybiBfc2lnbih4KSAqIF9sb2cxcCgyICogYSAvICgxIC0gYSkpIC8gMjtcbiAgICB9LFxuXG4gICAgY2JydDogZnVuY3Rpb24gY2JydCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIHZhciBuZWdhdGUgPSB4IDwgMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAobmVnYXRlKSB7IHggPSAteDsgfVxuICAgICAgaWYgKHggPT09IEluZmluaXR5KSB7XG4gICAgICAgIHJlc3VsdCA9IEluZmluaXR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gX2V4cChfbG9nKHgpIC8gMyk7XG4gICAgICAgIC8vIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJlX3Jvb3QjTnVtZXJpY2FsX21ldGhvZHNcbiAgICAgICAgcmVzdWx0ID0gKCh4IC8gKHJlc3VsdCAqIHJlc3VsdCkpICsgKDIgKiByZXN1bHQpKSAvIDM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmVnYXRlID8gLXJlc3VsdCA6IHJlc3VsdDtcbiAgICB9LFxuXG4gICAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHZhbHVlKSB7XG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNDY1XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICB2YXIgbnVtYmVyID0gRVMuVG9VaW50MzIoeCk7XG4gICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiAzMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXJDTFogPyBFUy5DYWxsKG51bWJlckNMWiwgbnVtYmVyKSA6IDMxIC0gX2Zsb29yKF9sb2cobnVtYmVyICsgMC41KSAqIExPRzJFKTtcbiAgICB9LFxuXG4gICAgY29zaDogZnVuY3Rpb24gY29zaCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHggPT09IDApIHsgcmV0dXJuIDE7IH0gLy8gKzAgb3IgLTBcbiAgICAgIGlmIChudW1iZXJJc05hTih4KSkgeyByZXR1cm4gTmFOOyB9XG4gICAgICBpZiAoIWdsb2JhbElzRmluaXRlKHgpKSB7IHJldHVybiBJbmZpbml0eTsgfVxuXG4gICAgICB2YXIgdCA9IF9leHAoX2Ficyh4KSAtIDEpO1xuICAgICAgcmV0dXJuICh0ICsgKDEgLyAodCAqIEUgKiBFKSkpICogKEUgLyAyKTtcbiAgICB9LFxuXG4gICAgZXhwbTE6IGZ1bmN0aW9uIGV4cG0xKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gLUluZmluaXR5KSB7IHJldHVybiAtMTsgfVxuICAgICAgaWYgKCFnbG9iYWxJc0Zpbml0ZSh4KSB8fCB4ID09PSAwKSB7IHJldHVybiB4OyB9XG4gICAgICBpZiAoX2Ficyh4KSA+IDAuNSkge1xuICAgICAgICByZXR1cm4gX2V4cCh4KSAtIDE7XG4gICAgICB9XG4gICAgICAvLyBBIG1vcmUgcHJlY2lzZSBhcHByb3hpbWF0aW9uIHVzaW5nIFRheWxvciBzZXJpZXMgZXhwYW5zaW9uXG4gICAgICAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW0vaXNzdWVzLzMxNCNpc3N1ZWNvbW1lbnQtNzAyOTM5ODZcbiAgICAgIHZhciB0ID0geDtcbiAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgdmFyIG4gPSAxO1xuICAgICAgd2hpbGUgKHN1bSArIHQgIT09IHN1bSkge1xuICAgICAgICBzdW0gKz0gdDtcbiAgICAgICAgbiArPSAxO1xuICAgICAgICB0ICo9IHggLyBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9LFxuXG4gICAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHgsIHkpIHtcbiAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgdmFyIGxhcmdlc3QgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gX2FicyhOdW1iZXIoYXJndW1lbnRzW2ldKSk7XG4gICAgICAgIGlmIChsYXJnZXN0IDwgdmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQgKj0gKGxhcmdlc3QgLyB2YWx1ZSkgKiAobGFyZ2VzdCAvIHZhbHVlKTtcbiAgICAgICAgICByZXN1bHQgKz0gMTtcbiAgICAgICAgICBsYXJnZXN0ID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHZhbHVlID4gMCA/ICh2YWx1ZSAvIGxhcmdlc3QpICogKHZhbHVlIC8gbGFyZ2VzdCkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGxhcmdlc3QgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnZXN0ICogX3NxcnQocmVzdWx0KTtcbiAgICB9LFxuXG4gICAgbG9nMjogZnVuY3Rpb24gbG9nMih2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9sb2codmFsdWUpICogTE9HMkU7XG4gICAgfSxcblxuICAgIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9sb2codmFsdWUpICogTE9HMTBFO1xuICAgIH0sXG5cbiAgICBsb2cxcDogX2xvZzFwLFxuXG4gICAgc2lnbjogX3NpZ24sXG5cbiAgICBzaW5oOiBmdW5jdGlvbiBzaW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoIWdsb2JhbElzRmluaXRlKHgpIHx8IHggPT09IDApIHsgcmV0dXJuIHg7IH1cblxuICAgICAgdmFyIGEgPSBfYWJzKHgpO1xuICAgICAgaWYgKGEgPCAxKSB7XG4gICAgICAgIHZhciB1ID0gTWF0aC5leHBtMShhKTtcbiAgICAgICAgcmV0dXJuIF9zaWduKHgpICogdSAqICgxICsgKDEgLyAodSArIDEpKSkgLyAyO1xuICAgICAgfVxuICAgICAgdmFyIHQgPSBfZXhwKGEgLSAxKTtcbiAgICAgIHJldHVybiBfc2lnbih4KSAqICh0IC0gKDEgLyAodCAqIEUgKiBFKSkpICogKEUgLyAyKTtcbiAgICB9LFxuXG4gICAgdGFuaDogZnVuY3Rpb24gdGFuaCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKG51bWJlcklzTmFOKHgpIHx8IHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIC8vIGNhbiBleGl0IGVhcmx5IGF0ICstMjAgYXMgSlMgbG9zZXMgcHJlY2lzaW9uIGZvciB0cnVlIHZhbHVlIGF0IHRoaXMgaW50ZWdlclxuICAgICAgaWYgKHggPj0gMjApIHsgcmV0dXJuIDE7IH1cbiAgICAgIGlmICh4IDw9IC0yMCkgeyByZXR1cm4gLTE7IH1cblxuICAgICAgcmV0dXJuIChNYXRoLmV4cG0xKHgpIC0gTWF0aC5leHBtMSgteCkpIC8gKF9leHAoeCkgKyBfZXhwKC14KSk7XG4gICAgfSxcblxuICAgIHRydW5jOiBmdW5jdGlvbiB0cnVuYyh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgcmV0dXJuIHggPCAwID8gLV9mbG9vcigteCkgOiBfZmxvb3IoeCk7XG4gICAgfSxcblxuICAgIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgICAgLy8gdGFrZW4gZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2ltdWxcbiAgICAgIHZhciBhID0gRVMuVG9VaW50MzIoeCk7XG4gICAgICB2YXIgYiA9IEVTLlRvVWludDMyKHkpO1xuICAgICAgdmFyIGFoID0gKGEgPj4+IDE2KSAmIDB4ZmZmZjtcbiAgICAgIHZhciBhbCA9IGEgJiAweGZmZmY7XG4gICAgICB2YXIgYmggPSAoYiA+Pj4gMTYpICYgMHhmZmZmO1xuICAgICAgdmFyIGJsID0gYiAmIDB4ZmZmZjtcbiAgICAgIC8vIHRoZSBzaGlmdCBieSAwIGZpeGVzIHRoZSBzaWduIG9uIHRoZSBoaWdoIHBhcnRcbiAgICAgIC8vIHRoZSBmaW5hbCB8MCBjb252ZXJ0cyB0aGUgdW5zaWduZWQgdmFsdWUgaW50byBhIHNpZ25lZCB2YWx1ZVxuICAgICAgcmV0dXJuIChhbCAqIGJsKSArICgoKChhaCAqIGJsKSArIChhbCAqIGJoKSkgPDwgMTYpID4+PiAwKSB8IDA7XG4gICAgfSxcblxuICAgIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgICAgIHZhciB2ID0gTnVtYmVyKHgpO1xuICAgICAgaWYgKHYgPT09IDAgfHwgdiA9PT0gSW5maW5pdHkgfHwgdiA9PT0gLUluZmluaXR5IHx8IG51bWJlcklzTmFOKHYpKSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgICAgfVxuICAgICAgdmFyIHNpZ24gPSBfc2lnbih2KTtcbiAgICAgIHZhciBhYnMgPSBfYWJzKHYpO1xuICAgICAgaWYgKGFicyA8IEJJTkFSWV8zMl9NSU5fVkFMVUUpIHtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oYWJzIC8gQklOQVJZXzMyX01JTl9WQUxVRSAvIEJJTkFSWV8zMl9FUFNJTE9OKSAqIEJJTkFSWV8zMl9NSU5fVkFMVUUgKiBCSU5BUllfMzJfRVBTSUxPTjtcbiAgICAgIH1cbiAgICAgIC8vIFZlbHRrYW1wJ3Mgc3BsaXR0aW5nICg/KVxuICAgICAgdmFyIGEgPSAoMSArIChCSU5BUllfMzJfRVBTSUxPTiAvIE51bWJlci5FUFNJTE9OKSkgKiBhYnM7XG4gICAgICB2YXIgcmVzdWx0ID0gYSAtIChhIC0gYWJzKTtcbiAgICAgIGlmIChyZXN1bHQgPiBCSU5BUllfMzJfTUFYX1ZBTFVFIHx8IG51bWJlcklzTmFOKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaWduICogcmVzdWx0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgd2l0aGluVUxQRGlzdGFuY2UgPSBmdW5jdGlvbiB3aXRoaW5VTFBEaXN0YW5jZShyZXN1bHQsIGV4cGVjdGVkLCBkaXN0YW5jZSkge1xuICAgIHJldHVybiBfYWJzKDEgLSAocmVzdWx0IC8gZXhwZWN0ZWQpKSAvIE51bWJlci5FUFNJTE9OIDwgKGRpc3RhbmNlIHx8IDgpO1xuICB9O1xuXG4gIGRlZmluZVByb3BlcnRpZXMoTWF0aCwgTWF0aFNoaW1zKTtcbiAgLy8gQ2hyb21lIDwgNDAgc2luaCByZXR1cm5zIOKIniBmb3IgbGFyZ2UgbnVtYmVyc1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnc2luaCcsIE1hdGhTaGltcy5zaW5oLCBNYXRoLnNpbmgoNzEwKSA9PT0gSW5maW5pdHkpO1xuICAvLyBDaHJvbWUgPCA0MCBjb3NoIHJldHVybnMg4oieIGZvciBsYXJnZSBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdjb3NoJywgTWF0aFNoaW1zLmNvc2gsIE1hdGguY29zaCg3MTApID09PSBJbmZpbml0eSk7XG4gIC8vIElFIDExIFRQIGhhcyBhbiBpbXByZWNpc2UgbG9nMXA6IHJlcG9ydHMgTWF0aC5sb2cxcCgtMWUtMTcpIGFzIDBcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2xvZzFwJywgTWF0aFNoaW1zLmxvZzFwLCBNYXRoLmxvZzFwKC0xZS0xNykgIT09IC0xZS0xNyk7XG4gIC8vIElFIDExIFRQIGhhcyBhbiBpbXByZWNpc2UgYXNpbmg6IHJlcG9ydHMgTWF0aC5hc2luaCgtMWU3KSBhcyBub3QgZXhhY3RseSBlcXVhbCB0byAtTWF0aC5hc2luaCgxZTcpXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdhc2luaCcsIE1hdGhTaGltcy5hc2luaCwgTWF0aC5hc2luaCgtMWU3KSAhPT0gLU1hdGguYXNpbmgoMWU3KSk7XG4gIC8vIENocm9tZSA8IDU0IGFzaW5oIHJldHVybnMg4oieIGZvciBsYXJnZSBudW1iZXJzIGFuZCBzaG91bGQgbm90XG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdhc2luaCcsIE1hdGhTaGltcy5hc2luaCwgTWF0aC5hc2luaCgxZSszMDApID09PSBJbmZpbml0eSk7XG4gIC8vIENocm9tZSA8IDU0IGF0YW5oIGluY29ycmVjdGx5IHJldHVybnMgMCBmb3IgbGFyZ2UgbnVtYmVyc1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnYXRhbmgnLCBNYXRoU2hpbXMuYXRhbmgsIE1hdGguYXRhbmgoMWUtMzAwKSA9PT0gMCk7XG4gIC8vIENocm9tZSA0MCBoYXMgYW4gaW1wcmVjaXNlIE1hdGgudGFuaCB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAndGFuaCcsIE1hdGhTaGltcy50YW5oLCBNYXRoLnRhbmgoLTJlLTE3KSAhPT0gLTJlLTE3KTtcbiAgLy8gQ2hyb21lIDQwIGxvc2VzIE1hdGguYWNvc2ggcHJlY2lzaW9uIHdpdGggaGlnaCBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdhY29zaCcsIE1hdGhTaGltcy5hY29zaCwgTWF0aC5hY29zaChOdW1iZXIuTUFYX1ZBTFVFKSA9PT0gSW5maW5pdHkpO1xuICAvLyBDaHJvbWUgPCA1NCBoYXMgYW4gaW5hY2N1cmF0ZSBhY29zaCBmb3IgRVBTSUxPTiBkZWx0YXNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2Fjb3NoJywgTWF0aFNoaW1zLmFjb3NoLCAhd2l0aGluVUxQRGlzdGFuY2UoTWF0aC5hY29zaCgxICsgTnVtYmVyLkVQU0lMT04pLCBNYXRoLnNxcnQoMiAqIE51bWJlci5FUFNJTE9OKSkpO1xuICAvLyBGaXJlZm94IDM4IG9uIFdpbmRvd3NcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2NicnQnLCBNYXRoU2hpbXMuY2JydCwgIXdpdGhpblVMUERpc3RhbmNlKE1hdGguY2JydCgxZS0zMDApLCAxZS0xMDApKTtcbiAgLy8gbm9kZSAwLjExIGhhcyBhbiBpbXByZWNpc2UgTWF0aC5zaW5oIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdzaW5oJywgTWF0aFNoaW1zLnNpbmgsIE1hdGguc2luaCgtMmUtMTcpICE9PSAtMmUtMTcpO1xuICAvLyBGRiAzNSBvbiBMaW51eCByZXBvcnRzIDIyMDI1LjQ2NTc5NDgwNjcyNSBmb3IgTWF0aC5leHBtMSgxMClcbiAgdmFyIGV4cG0xT2ZUZW4gPSBNYXRoLmV4cG0xKDEwKTtcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2V4cG0xJywgTWF0aFNoaW1zLmV4cG0xLCBleHBtMU9mVGVuID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8IGV4cG0xT2ZUZW4gPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4KTtcblxuICB2YXIgb3JpZ01hdGhSb3VuZCA9IE1hdGgucm91bmQ7XG4gIC8vIGJyZWFrcyBpbiBlLmcuIFNhZmFyaSA4LCBJbnRlcm5ldCBFeHBsb3JlciAxMSwgT3BlcmEgMTJcbiAgdmFyIHJvdW5kSGFuZGxlc0JvdW5kYXJ5Q29uZGl0aW9ucyA9IE1hdGgucm91bmQoMC41IC0gKE51bWJlci5FUFNJTE9OIC8gNCkpID09PSAwICYmXG4gICAgTWF0aC5yb3VuZCgtMC41ICsgKE51bWJlci5FUFNJTE9OIC8gMy45OSkpID09PSAxO1xuXG4gIC8vIFdoZW4gZW5naW5lcyB1c2UgTWF0aC5mbG9vcih4ICsgMC41KSBpbnRlcm5hbGx5LCBNYXRoLnJvdW5kIGNhbiBiZSBidWdneSBmb3IgbGFyZ2UgaW50ZWdlcnMuXG4gIC8vIFRoaXMgYmVoYXZpb3Igc2hvdWxkIGJlIGdvdmVybmVkIGJ5IFwicm91bmQgdG8gbmVhcmVzdCwgdGllcyB0byBldmVuIG1vZGVcIlxuICAvLyBzZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRlcm1zLWFuZC1kZWZpbml0aW9ucy1udW1iZXItdHlwZVxuICAvLyBUaGVzZSBhcmUgdGhlIGJvdW5kYXJ5IGNhc2VzIHdoZXJlIGl0IGJyZWFrcy5cbiAgdmFyIHNtYWxsZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzID0gaW52ZXJzZUVwc2lsb24gKyAxO1xuICB2YXIgbGFyZ2VzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyA9ICgyICogaW52ZXJzZUVwc2lsb24pIC0gMTtcbiAgdmFyIHJvdW5kRG9lc05vdEluY3JlYXNlSW50ZWdlcnMgPSBbXG4gICAgc21hbGxlc3RQb3NpdGl2ZU51bWJlcldoZXJlUm91bmRCcmVha3MsXG4gICAgbGFyZ2VzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrc1xuICBdLmV2ZXJ5KGZ1bmN0aW9uIChudW0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0pID09PSBudW07XG4gIH0pO1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAncm91bmQnLCBmdW5jdGlvbiByb3VuZCh4KSB7XG4gICAgdmFyIGZsb29yID0gX2Zsb29yKHgpO1xuICAgIHZhciBjZWlsID0gZmxvb3IgPT09IC0xID8gLTAgOiBmbG9vciArIDE7XG4gICAgcmV0dXJuIHggLSBmbG9vciA8IDAuNSA/IGZsb29yIDogY2VpbDtcbiAgfSwgIXJvdW5kSGFuZGxlc0JvdW5kYXJ5Q29uZGl0aW9ucyB8fCAhcm91bmREb2VzTm90SW5jcmVhc2VJbnRlZ2Vycyk7XG4gIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoTWF0aC5yb3VuZCwgb3JpZ01hdGhSb3VuZCk7XG5cbiAgdmFyIG9yaWdJbXVsID0gTWF0aC5pbXVsO1xuICBpZiAoTWF0aC5pbXVsKDB4ZmZmZmZmZmYsIDUpICE9PSAtNSkge1xuICAgIC8vIFNhZmFyaSA2LjEsIGF0IGxlYXN0LCByZXBvcnRzIFwiMFwiIGZvciB0aGlzIHZhbHVlXG4gICAgTWF0aC5pbXVsID0gTWF0aFNoaW1zLmltdWw7XG4gICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhNYXRoLmltdWwsIG9yaWdJbXVsKTtcbiAgfVxuICBpZiAoTWF0aC5pbXVsLmxlbmd0aCAhPT0gMikge1xuICAgIC8vIFNhZmFyaSA4LjAuNCBoYXMgYSBsZW5ndGggb2YgMVxuICAgIC8vIGZpeGVkIGluIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2NThcbiAgICBvdmVycmlkZU5hdGl2ZShNYXRoLCAnaW11bCcsIGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ0ltdWwsIE1hdGgsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBQcm9taXNlc1xuICAvLyBTaW1wbGVzdCBwb3NzaWJsZSBpbXBsZW1lbnRhdGlvbjsgdXNlIGEgM3JkLXBhcnR5IGxpYnJhcnkgaWYgeW91XG4gIC8vIHdhbnQgdGhlIGJlc3QgcG9zc2libGUgc3BlZWQgYW5kL29yIGxvbmcgc3RhY2sgdHJhY2VzLlxuICB2YXIgUHJvbWlzZVNoaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZXRUaW1lb3V0ID0gZ2xvYmFscy5zZXRUaW1lb3V0O1xuICAgIC8vIHNvbWUgZW52aXJvbm1lbnRzIGRvbid0IGhhdmUgc2V0VGltZW91dCAtIG5vIHdheSB0byBzaGltIGhlcmUuXG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzZXRUaW1lb3V0ICE9PSAnb2JqZWN0JykgeyByZXR1cm47IH1cblxuICAgIEVTLklzUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChwcm9taXNlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByb21pc2UuX3Byb21pc2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gdW5pbml0aWFsaXplZCwgb3IgbWlzc2luZyBvdXIgaGlkZGVuIGZpZWxkLlxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8vIFwiUHJvbWlzZUNhcGFiaWxpdHlcIiBpbiB0aGUgc3BlYyBpcyB3aGF0IG1vc3QgcHJvbWlzZSBpbXBsZW1lbnRhdGlvbnNcbiAgICAvLyBjYWxsIGEgXCJkZWZlcnJlZFwiLlxuICAgIHZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IoQykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIHZhciBjYXBhYmlsaXR5ID0gdGhpcztcbiAgICAgIHZhciByZXNvbHZlciA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKGNhcGFiaWxpdHkucmVzb2x2ZSAhPT0gdm9pZCAwIHx8IGNhcGFiaWxpdHkucmVqZWN0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiEnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBjYXBhYmlsaXR5LnJlamVjdCA9IHJlamVjdDtcbiAgICAgIH07XG4gICAgICAvLyBJbml0aWFsaXplIGZpZWxkcyB0byBpbmZvcm0gb3B0aW1pemVycyBhYm91dCB0aGUgb2JqZWN0IHNoYXBlLlxuICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlID0gdm9pZCAwO1xuICAgICAgY2FwYWJpbGl0eS5yZWplY3QgPSB2b2lkIDA7XG4gICAgICBjYXBhYmlsaXR5LnByb21pc2UgPSBuZXcgQyhyZXNvbHZlcik7XG4gICAgICBpZiAoIShFUy5Jc0NhbGxhYmxlKGNhcGFiaWxpdHkucmVzb2x2ZSkgJiYgRVMuSXNDYWxsYWJsZShjYXBhYmlsaXR5LnJlamVjdCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGZpbmQgYW4gYXBwcm9wcmlhdGUgc2V0SW1tZWRpYXRlLWFsaWtlXG4gICAgdmFyIG1ha2VaZXJvVGltZW91dDtcbiAgICAvKmdsb2JhbCB3aW5kb3cgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgRVMuSXNDYWxsYWJsZSh3aW5kb3cucG9zdE1lc3NhZ2UpKSB7XG4gICAgICBtYWtlWmVyb1RpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGZyb20gaHR0cDovL2RiYXJvbi5vcmcvbG9nLzIwMTAwMzA5LWZhc3Rlci10aW1lb3V0c1xuICAgICAgICB2YXIgdGltZW91dHMgPSBbXTtcbiAgICAgICAgdmFyIG1lc3NhZ2VOYW1lID0gJ3plcm8tdGltZW91dC1tZXNzYWdlJztcbiAgICAgICAgdmFyIHNldFplcm9UaW1lb3V0ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgX3B1c2godGltZW91dHMsIGZuKTtcbiAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZU5hbWUsICcqJyk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBoYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gd2luZG93ICYmIGV2ZW50LmRhdGEgPT09IG1lc3NhZ2VOYW1lKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB2YXIgZm4gPSBfc2hpZnQodGltZW91dHMpO1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlTWVzc2FnZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBzZXRaZXJvVGltZW91dDtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBtYWtlUHJvbWlzZUFzYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBBbiBlZmZpY2llbnQgdGFzay1zY2hlZHVsZXIgYmFzZWQgb24gYSBwcmUtZXhpc3RpbmcgUHJvbWlzZVxuICAgICAgLy8gaW1wbGVtZW50YXRpb24sIHdoaWNoIHdlIGNhbiB1c2UgZXZlbiBpZiB3ZSBvdmVycmlkZSB0aGVcbiAgICAgIC8vIGdsb2JhbCBQcm9taXNlIGJlbG93IChpbiBvcmRlciB0byB3b3JrYXJvdW5kIGJ1Z3MpXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vUmF5bm9zL29ic2Vydi1oYXNoL2lzc3Vlcy8yI2lzc3VlY29tbWVudC0zNTg1NzY3MVxuICAgICAgdmFyIFAgPSBnbG9iYWxzLlByb21pc2U7XG4gICAgICB2YXIgcHIgPSBQICYmIFAucmVzb2x2ZSAmJiBQLnJlc29sdmUoKTtcbiAgICAgIHJldHVybiBwciAmJiBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICByZXR1cm4gcHIudGhlbih0YXNrKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICAvKmdsb2JhbCBwcm9jZXNzICovXG4gICAgdmFyIGVucXVldWUgPSBFUy5Jc0NhbGxhYmxlKGdsb2JhbHMuc2V0SW1tZWRpYXRlKSA/XG4gICAgICBnbG9iYWxzLnNldEltbWVkaWF0ZSA6XG4gICAgICB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgcHJvY2Vzcy5uZXh0VGljayA/IHByb2Nlc3MubmV4dFRpY2sgOiBtYWtlUHJvbWlzZUFzYXAoKSB8fFxuICAgICAgKEVTLklzQ2FsbGFibGUobWFrZVplcm9UaW1lb3V0KSA/IG1ha2VaZXJvVGltZW91dCgpIDogZnVuY3Rpb24gKHRhc2spIHsgc2V0VGltZW91dCh0YXNrLCAwKTsgfSk7IC8vIGZhbGxiYWNrXG5cbiAgICAvLyBDb25zdGFudHMgZm9yIFByb21pc2UgaW1wbGVtZW50YXRpb25cbiAgICB2YXIgUFJPTUlTRV9JREVOVElUWSA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9O1xuICAgIHZhciBQUk9NSVNFX1RIUk9XRVIgPSBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9O1xuICAgIHZhciBQUk9NSVNFX1BFTkRJTkcgPSAwO1xuICAgIHZhciBQUk9NSVNFX0ZVTEZJTExFRCA9IDE7XG4gICAgdmFyIFBST01JU0VfUkVKRUNURUQgPSAyO1xuICAgIC8vIFdlIHN0b3JlIGZ1bGZpbGwvcmVqZWN0IGhhbmRsZXJzIGFuZCBjYXBhYmlsaXRpZXMgaW4gYSBzaW5nbGUgYXJyYXkuXG4gICAgdmFyIFBST01JU0VfRlVMRklMTF9PRkZTRVQgPSAwO1xuICAgIHZhciBQUk9NSVNFX1JFSkVDVF9PRkZTRVQgPSAxO1xuICAgIHZhciBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUID0gMjtcbiAgICAvLyBUaGlzIGlzIHVzZWQgaW4gYW4gb3B0aW1pemF0aW9uIGZvciBjaGFpbmluZyBwcm9taXNlcyB2aWEgdGhlbi5cbiAgICB2YXIgUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkgPSB7fTtcblxuICAgIHZhciBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iID0gZnVuY3Rpb24gKGhhbmRsZXIsIGNhcGFiaWxpdHksIGFyZ3VtZW50KSB7XG4gICAgICBlbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJvbWlzZVJlYWN0aW9uSm9iKGhhbmRsZXIsIGNhcGFiaWxpdHksIGFyZ3VtZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgcHJvbWlzZVJlYWN0aW9uSm9iID0gZnVuY3Rpb24gKGhhbmRsZXIsIHByb21pc2VDYXBhYmlsaXR5LCBhcmd1bWVudCkge1xuICAgICAgdmFyIGhhbmRsZXJSZXN1bHQsIGY7XG4gICAgICBpZiAocHJvbWlzZUNhcGFiaWxpdHkgPT09IFBST01JU0VfRkFLRV9DQVBBQklMSVRZKSB7XG4gICAgICAgIC8vIEZhc3QgY2FzZSwgd2hlbiB3ZSBkb24ndCBhY3R1YWxseSBuZWVkIHRvIGNoYWluIHRocm91Z2ggdG8gYVxuICAgICAgICAvLyAocmVhbCkgcHJvbWlzZUNhcGFiaWxpdHkuXG4gICAgICAgIHJldHVybiBoYW5kbGVyKGFyZ3VtZW50KTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJSZXN1bHQgPSBoYW5kbGVyKGFyZ3VtZW50KTtcbiAgICAgICAgZiA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZXJSZXN1bHQgPSBlO1xuICAgICAgICBmID0gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0O1xuICAgICAgfVxuICAgICAgZihoYW5kbGVyUmVzdWx0KTtcbiAgICB9O1xuXG4gICAgdmFyIGZ1bGZpbGxQcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICB2YXIgX3Byb21pc2UgPSBwcm9taXNlLl9wcm9taXNlO1xuICAgICAgdmFyIGxlbmd0aCA9IF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYihcbiAgICAgICAgICBfcHJvbWlzZS5mdWxmaWxsUmVhY3Rpb25IYW5kbGVyMCxcbiAgICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkNhcGFiaWxpdHkwLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgICk7XG4gICAgICAgIF9wcm9taXNlLmZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbnMwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkNhcGFiaWxpdHkwID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBpZHggPSAwOyBpIDwgbGVuZ3RoOyBpKyssIGlkeCArPSAzKSB7XG4gICAgICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0sXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9SRUpFQ1RfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0gPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfcHJvbWlzZS5yZXN1bHQgPSB2YWx1ZTtcbiAgICAgIF9wcm9taXNlLnN0YXRlID0gUFJPTUlTRV9GVUxGSUxMRUQ7XG4gICAgICBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCA9IDA7XG4gICAgfTtcblxuICAgIHZhciByZWplY3RQcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UsIHJlYXNvbikge1xuICAgICAgdmFyIF9wcm9taXNlID0gcHJvbWlzZS5fcHJvbWlzZTtcbiAgICAgIHZhciBsZW5ndGggPSBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgX3Byb21pc2UucmVqZWN0UmVhY3Rpb25IYW5kbGVyMCxcbiAgICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkNhcGFiaWxpdHkwLFxuICAgICAgICAgIHJlYXNvblxuICAgICAgICApO1xuICAgICAgICBfcHJvbWlzZS5mdWxmaWxsUmVhY3Rpb25IYW5kbGVyMCA9IHZvaWQgMDtcbiAgICAgICAgX3Byb21pc2UucmVqZWN0UmVhY3Rpb25zMCA9IHZvaWQgMDtcbiAgICAgICAgX3Byb21pc2UucmVhY3Rpb25DYXBhYmlsaXR5MCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMSwgaWR4ID0gMDsgaSA8IGxlbmd0aDsgaSsrLCBpZHggKz0gMykge1xuICAgICAgICAgICAgZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYihcbiAgICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9SRUpFQ1RfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0sXG4gICAgICAgICAgICAgIHJlYXNvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9GVUxGSUxMX09GRlNFVF0gPSB2b2lkIDA7XG4gICAgICAgICAgICBwcm9taXNlW2lkeCArIFBST01JU0VfUkVKRUNUX09GRlNFVF0gPSB2b2lkIDA7XG4gICAgICAgICAgICBwcm9taXNlW2lkeCArIFBST01JU0VfQ0FQQUJJTElUWV9PRkZTRVRdID0gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3Byb21pc2UucmVzdWx0ID0gcmVhc29uO1xuICAgICAgX3Byb21pc2Uuc3RhdGUgPSBQUk9NSVNFX1JFSkVDVEVEO1xuICAgICAgX3Byb21pc2UucmVhY3Rpb25MZW5ndGggPSAwO1xuICAgIH07XG5cbiAgICB2YXIgY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIHZhciByZXNvbHZlID0gZnVuY3Rpb24gKHJlc29sdXRpb24pIHtcbiAgICAgICAgdmFyIHRoZW47XG4gICAgICAgIGlmIChhbHJlYWR5UmVzb2x2ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIGlmIChyZXNvbHV0aW9uID09PSBwcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdFByb21pc2UocHJvbWlzZSwgbmV3IFR5cGVFcnJvcignU2VsZiByZXNvbHV0aW9uJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHJlc29sdXRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bGZpbGxQcm9taXNlKHByb21pc2UsIHJlc29sdXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbiA9IHJlc29sdXRpb24udGhlbjtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiByZWplY3RQcm9taXNlKHByb21pc2UsIGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRVMuSXNDYWxsYWJsZSh0aGVuKSkge1xuICAgICAgICAgIHJldHVybiBmdWxmaWxsUHJvbWlzZShwcm9taXNlLCByZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcm9taXNlUmVzb2x2ZVRoZW5hYmxlSm9iKHByb21pc2UsIHJlc29sdXRpb24sIHRoZW4pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpZiAoYWxyZWFkeVJlc29sdmVkKSB7IHJldHVybjsgfVxuICAgICAgICBhbHJlYWR5UmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pO1xuICAgICAgfTtcbiAgICAgIHJldHVybiB7IHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH07XG4gICAgfTtcblxuICAgIHZhciBvcHRpbWl6ZWRUaGVuID0gZnVuY3Rpb24gKHRoZW4sIHRoZW5hYmxlLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vIE9wdGltaXphdGlvbjogc2luY2Ugd2UgZGlzY2FyZCB0aGUgcmVzdWx0LCB3ZSBjYW4gcGFzcyBvdXJcbiAgICAgIC8vIG93biB0aGVuIGltcGxlbWVudGF0aW9uIGEgc3BlY2lhbCBoaW50IHRvIGxldCBpdCBrbm93IGl0XG4gICAgICAvLyBkb2Vzbid0IGhhdmUgdG8gY3JlYXRlIGl0LiAgKFRoZSBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWVxuICAgICAgLy8gb2JqZWN0IGlzIGxvY2FsIHRvIHRoaXMgaW1wbGVtZW50YXRpb24gYW5kIHVuZm9yZ2VhYmxlIG91dHNpZGUuKVxuICAgICAgaWYgKHRoZW4gPT09IFByb21pc2UkcHJvdG90eXBlJHRoZW4pIHtcbiAgICAgICAgX2NhbGwodGhlbiwgdGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCwgUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NhbGwodGhlbiwgdGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcHJvbWlzZVJlc29sdmVUaGVuYWJsZUpvYiA9IGZ1bmN0aW9uIChwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICAgICAgdmFyIHJlc29sdmluZ0Z1bmN0aW9ucyA9IGNyZWF0ZVJlc29sdmluZ0Z1bmN0aW9ucyhwcm9taXNlKTtcbiAgICAgIHZhciByZXNvbHZlID0gcmVzb2x2aW5nRnVuY3Rpb25zLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVzb2x2aW5nRnVuY3Rpb25zLnJlamVjdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdGltaXplZFRoZW4odGhlbiwgdGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIFByb21pc2UkcHJvdG90eXBlLCBQcm9taXNlJHByb3RvdHlwZSR0aGVuO1xuICAgIHZhciBQcm9taXNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBQcm9taXNlU2hpbSA9IGZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2VTaGltKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIFByb21pc2UgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMuX3Byb21pc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgY29uc3RydWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjQ4MlxuICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUocmVzb2x2ZXIpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgdmFsaWQgcmVzb2x2ZXInKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvbWlzZSA9IGVtdWxhdGVFUzZjb25zdHJ1Y3QodGhpcywgUHJvbWlzZVNoaW0sIFByb21pc2UkcHJvdG90eXBlLCB7XG4gICAgICAgICAgX3Byb21pc2U6IHtcbiAgICAgICAgICAgIHJlc3VsdDogdm9pZCAwLFxuICAgICAgICAgICAgc3RhdGU6IFBST01JU0VfUEVORElORyxcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBtZW1iZXIgb2YgdGhlIFwicmVhY3Rpb25zXCIgYXJyYXkgaXMgaW5saW5lZCBoZXJlLFxuICAgICAgICAgICAgLy8gc2luY2UgbW9zdCBwcm9taXNlcyBvbmx5IGhhdmUgb25lIHJlYWN0aW9uLlxuICAgICAgICAgICAgLy8gV2UndmUgYWxzbyBleHBsb2RlZCB0aGUgJ3JlYWN0aW9uJyBvYmplY3QgdG8gaW5saW5lIHRoZVxuICAgICAgICAgICAgLy8gXCJoYW5kbGVyXCIgYW5kIFwiY2FwYWJpbGl0eVwiIGZpZWxkcywgc2luY2UgYm90aCBmdWxmaWxsIGFuZFxuICAgICAgICAgICAgLy8gcmVqZWN0IHJlYWN0aW9ucyBzaGFyZSB0aGUgc2FtZSBjYXBhYmlsaXR5LlxuICAgICAgICAgICAgcmVhY3Rpb25MZW5ndGg6IDAsXG4gICAgICAgICAgICBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyMDogdm9pZCAwLFxuICAgICAgICAgICAgcmVqZWN0UmVhY3Rpb25IYW5kbGVyMDogdm9pZCAwLFxuICAgICAgICAgICAgcmVhY3Rpb25DYXBhYmlsaXR5MDogdm9pZCAwXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlc29sdmluZ0Z1bmN0aW9ucyA9IGNyZWF0ZVJlc29sdmluZ0Z1bmN0aW9ucyhwcm9taXNlKTtcbiAgICAgICAgdmFyIHJlamVjdCA9IHJlc29sdmluZ0Z1bmN0aW9ucy5yZWplY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzb2x2ZXIocmVzb2x2aW5nRnVuY3Rpb25zLnJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFByb21pc2VTaGltO1xuICAgIH0oKSk7XG4gICAgUHJvbWlzZSRwcm90b3R5cGUgPSBQcm9taXNlLnByb3RvdHlwZTtcblxuICAgIHZhciBfcHJvbWlzZUFsbFJlc29sdmVyID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZXMsIGNhcGFiaWxpdHksIHJlbWFpbmluZykge1xuICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgIHZhbHVlc1tpbmRleF0gPSB4O1xuICAgICAgICBpZiAoKC0tcmVtYWluaW5nLmNvdW50KSA9PT0gMCkge1xuICAgICAgICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgICAgICAgIHJlc29sdmUodmFsdWVzKTsgLy8gY2FsbCB3LyB0aGlzPT09dW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBwZXJmb3JtUHJvbWlzZUFsbCA9IGZ1bmN0aW9uIChpdGVyYXRvclJlY29yZCwgQywgcmVzdWx0Q2FwYWJpbGl0eSkge1xuICAgICAgdmFyIGl0ID0gaXRlcmF0b3JSZWNvcmQuaXRlcmF0b3I7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgcmVtYWluaW5nID0geyBjb3VudDogMSB9O1xuICAgICAgdmFyIG5leHQsIG5leHRWYWx1ZTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXQpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dFZhbHVlID0gbmV4dC52YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkLmRvbmUgPSB0cnVlO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIG5leHRQcm9taXNlID0gQy5yZXNvbHZlKG5leHRWYWx1ZSk7XG4gICAgICAgIHZhciByZXNvbHZlRWxlbWVudCA9IF9wcm9taXNlQWxsUmVzb2x2ZXIoXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgIHJlc3VsdENhcGFiaWxpdHksXG4gICAgICAgICAgcmVtYWluaW5nXG4gICAgICAgICk7XG4gICAgICAgIHJlbWFpbmluZy5jb3VudCArPSAxO1xuICAgICAgICBvcHRpbWl6ZWRUaGVuKG5leHRQcm9taXNlLnRoZW4sIG5leHRQcm9taXNlLCByZXNvbHZlRWxlbWVudCwgcmVzdWx0Q2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKCgtLXJlbWFpbmluZy5jb3VudCkgPT09IDApIHtcbiAgICAgICAgdmFyIHJlc29sdmUgPSByZXN1bHRDYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICAgIHJlc29sdmUodmFsdWVzKTsgLy8gY2FsbCB3LyB0aGlzPT09dW5kZWZpbmVkXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH07XG5cbiAgICB2YXIgcGVyZm9ybVByb21pc2VSYWNlID0gZnVuY3Rpb24gKGl0ZXJhdG9yUmVjb3JkLCBDLCByZXN1bHRDYXBhYmlsaXR5KSB7XG4gICAgICB2YXIgaXQgPSBpdGVyYXRvclJlY29yZC5pdGVyYXRvcjtcbiAgICAgIHZhciBuZXh0LCBuZXh0VmFsdWUsIG5leHRQcm9taXNlO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXh0ID0gRVMuSXRlcmF0b3JTdGVwKGl0KTtcbiAgICAgICAgICBpZiAobmV4dCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IElmIGl0ZXJhYmxlIGhhcyBubyBpdGVtcywgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBuZXZlclxuICAgICAgICAgICAgLy8gcmVzb2x2ZTsgc2VlOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RvbWVuaWMvcHJvbWlzZXMtdW53cmFwcGluZy9pc3N1ZXMvNzVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjUxNVxuICAgICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dFZhbHVlID0gbmV4dC52YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkLmRvbmUgPSB0cnVlO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFByb21pc2UgPSBDLnJlc29sdmUobmV4dFZhbHVlKTtcbiAgICAgICAgb3B0aW1pemVkVGhlbihuZXh0UHJvbWlzZS50aGVuLCBuZXh0UHJvbWlzZSwgcmVzdWx0Q2FwYWJpbGl0eS5yZXNvbHZlLCByZXN1bHRDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH07XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFByb21pc2UsIHtcbiAgICAgIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgICAgIHZhciBDID0gdGhpcztcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoQykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIGlzIG5vdCBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yLCBpdGVyYXRvclJlY29yZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpdGVyYXRvciA9IEVTLkdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICAgICAgICBpdGVyYXRvclJlY29yZCA9IHsgaXRlcmF0b3I6IGl0ZXJhdG9yLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgIHJldHVybiBwZXJmb3JtUHJvbWlzZUFsbChpdGVyYXRvclJlY29yZCwgQywgY2FwYWJpbGl0eSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB2YXIgZXhjZXB0aW9uID0gZTtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JSZWNvcmQgJiYgIWl0ZXJhdG9yUmVjb3JkLmRvbmUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEVTLkl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIHRydWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZWUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uID0gZWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAgICAgICByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgICAgIHZhciBDID0gdGhpcztcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoQykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIGlzIG5vdCBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yLCBpdGVyYXRvclJlY29yZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpdGVyYXRvciA9IEVTLkdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICAgICAgICBpdGVyYXRvclJlY29yZCA9IHsgaXRlcmF0b3I6IGl0ZXJhdG9yLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgIHJldHVybiBwZXJmb3JtUHJvbWlzZVJhY2UoaXRlcmF0b3JSZWNvcmQsIEMsIGNhcGFiaWxpdHkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGU7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yUmVjb3JkICYmICFpdGVyYXRvclJlY29yZC5kb25lKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBFUy5JdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCB0cnVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVlKSB7XG4gICAgICAgICAgICAgIGV4Y2VwdGlvbiA9IGVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICAgICAgcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgICAgIHZhciBDID0gdGhpcztcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoQykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgcmVqZWN0RnVuYyA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICAgICByZWplY3RGdW5jKHJlYXNvbik7IC8vIGNhbGwgd2l0aCB0aGlzPT09dW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9LFxuXG4gICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHYpIHtcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXNkaXNjdXNzLm9yZy90b3BpYy9maXhpbmctcHJvbWlzZS1yZXNvbHZlIGZvciBzcGVjXG4gICAgICAgIHZhciBDID0gdGhpcztcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoQykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChFUy5Jc1Byb21pc2UodikpIHtcbiAgICAgICAgICB2YXIgY29uc3RydWN0b3IgPSB2LmNvbnN0cnVjdG9yO1xuICAgICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gQykge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgcmVzb2x2ZUZ1bmMgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICAgIHJlc29sdmVGdW5jKHYpOyAvLyBjYWxsIHdpdGggdGhpcz09PXVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhQcm9taXNlJHByb3RvdHlwZSwge1xuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbiAgICAgIH0sXG5cbiAgICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLklzUHJvbWlzZShwcm9taXNlKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBwcm9taXNlJyk7IH1cbiAgICAgICAgdmFyIEMgPSBFUy5TcGVjaWVzQ29uc3RydWN0b3IocHJvbWlzZSwgUHJvbWlzZSk7XG4gICAgICAgIHZhciByZXN1bHRDYXBhYmlsaXR5O1xuICAgICAgICB2YXIgcmV0dXJuVmFsdWVJc0lnbm9yZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IFBST01JU0VfRkFLRV9DQVBBQklMSVRZO1xuICAgICAgICBpZiAocmV0dXJuVmFsdWVJc0lnbm9yZWQgJiYgQyA9PT0gUHJvbWlzZSkge1xuICAgICAgICAgIHJlc3VsdENhcGFiaWxpdHkgPSBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRDYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBlcmZvcm1Qcm9taXNlVGhlbihwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzdWx0Q2FwYWJpbGl0eSlcbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHNwbGl0IHRoZSAncmVhY3Rpb24nIG9iamVjdCBpbnRvIGl0cyB0d29cbiAgICAgICAgLy8gY29tcG9uZW50cywgXCJjYXBhYmlsaXRpZXNcIiBhbmQgXCJoYW5kbGVyXCJcbiAgICAgICAgLy8gXCJjYXBhYmlsaXRpZXNcIiBpcyBhbHdheXMgZXF1YWwgdG8gYHJlc3VsdENhcGFiaWxpdHlgXG4gICAgICAgIHZhciBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyID0gRVMuSXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IFBST01JU0VfSURFTlRJVFk7XG4gICAgICAgIHZhciByZWplY3RSZWFjdGlvbkhhbmRsZXIgPSBFUy5Jc0NhbGxhYmxlKG9uUmVqZWN0ZWQpID8gb25SZWplY3RlZCA6IFBST01JU0VfVEhST1dFUjtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gcHJvbWlzZS5fcHJvbWlzZTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICBpZiAoX3Byb21pc2Uuc3RhdGUgPT09IFBST01JU0VfUEVORElORykge1xuICAgICAgICAgIGlmIChfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX3Byb21pc2UuZnVsZmlsbFJlYWN0aW9uSGFuZGxlcjAgPSBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2UucmVqZWN0UmVhY3Rpb25IYW5kbGVyMCA9IHJlamVjdFJlYWN0aW9uSGFuZGxlcjtcbiAgICAgICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAgPSByZXN1bHRDYXBhYmlsaXR5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gMyAqIChfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9GVUxGSUxMX09GRlNFVF0gPSBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9SRUpFQ1RfT0ZGU0VUXSA9IHJlamVjdFJlYWN0aW9uSGFuZGxlcjtcbiAgICAgICAgICAgIF9wcm9taXNlW2lkeCArIFBST01JU0VfQ0FQQUJJTElUWV9PRkZTRVRdID0gcmVzdWx0Q2FwYWJpbGl0eTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3Byb21pc2UucmVhY3Rpb25MZW5ndGggKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChfcHJvbWlzZS5zdGF0ZSA9PT0gUFJPTUlTRV9GVUxGSUxMRUQpIHtcbiAgICAgICAgICB2YWx1ZSA9IF9wcm9taXNlLnJlc3VsdDtcbiAgICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgICAgZnVsZmlsbFJlYWN0aW9uSGFuZGxlcixcbiAgICAgICAgICAgIHJlc3VsdENhcGFiaWxpdHksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3Byb21pc2Uuc3RhdGUgPT09IFBST01JU0VfUkVKRUNURUQpIHtcbiAgICAgICAgICB2YWx1ZSA9IF9wcm9taXNlLnJlc3VsdDtcbiAgICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgICAgcmVqZWN0UmVhY3Rpb25IYW5kbGVyLFxuICAgICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmV4cGVjdGVkIFByb21pc2Ugc3RhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFRoaXMgaGVscHMgdGhlIG9wdGltaXplciBieSBlbnN1cmluZyB0aGF0IG1ldGhvZHMgd2hpY2ggdGFrZVxuICAgIC8vIGNhcGFiaWxpdGllcyBhcmVuJ3QgcG9seW1vcnBoaWMuXG4gICAgUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoUHJvbWlzZSk7XG4gICAgUHJvbWlzZSRwcm90b3R5cGUkdGhlbiA9IFByb21pc2UkcHJvdG90eXBlLnRoZW47XG5cbiAgICByZXR1cm4gUHJvbWlzZTtcbiAgfSgpKTtcblxuICAvLyBDaHJvbWUncyBuYXRpdmUgUHJvbWlzZSBoYXMgZXh0cmEgbWV0aG9kcyB0aGF0IGl0IHNob3VsZG4ndCBoYXZlLiBMZXQncyByZW1vdmUgdGhlbS5cbiAgaWYgKGdsb2JhbHMuUHJvbWlzZSkge1xuICAgIGRlbGV0ZSBnbG9iYWxzLlByb21pc2UuYWNjZXB0O1xuICAgIGRlbGV0ZSBnbG9iYWxzLlByb21pc2UuZGVmZXI7XG4gICAgZGVsZXRlIGdsb2JhbHMuUHJvbWlzZS5wcm90b3R5cGUuY2hhaW47XG4gIH1cblxuICBpZiAodHlwZW9mIFByb21pc2VTaGltID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXhwb3J0IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yLlxuICAgIGRlZmluZVByb3BlcnRpZXMoZ2xvYmFscywgeyBQcm9taXNlOiBQcm9taXNlU2hpbSB9KTtcbiAgICAvLyBJbiBDaHJvbWUgMzMgKGFuZCB0aGVyZWFib3V0cykgUHJvbWlzZSBpcyBkZWZpbmVkLCBidXQgdGhlXG4gICAgLy8gaW1wbGVtZW50YXRpb24gaXMgYnVnZ3kgaW4gYSBudW1iZXIgb2Ygd2F5cy4gIExldCdzIGNoZWNrIHN1YmNsYXNzaW5nXG4gICAgLy8gc3VwcG9ydCB0byBzZWUgaWYgd2UgaGF2ZSBhIGJ1Z2d5IGltcGxlbWVudGF0aW9uLlxuICAgIHZhciBwcm9taXNlU3VwcG9ydHNTdWJjbGFzc2luZyA9IHN1cHBvcnRzU3ViY2xhc3NpbmcoZ2xvYmFscy5Qcm9taXNlLCBmdW5jdGlvbiAoUykge1xuICAgICAgcmV0dXJuIFMucmVzb2x2ZSg0MikudGhlbihmdW5jdGlvbiAoKSB7fSkgaW5zdGFuY2VvZiBTO1xuICAgIH0pO1xuICAgIHZhciBwcm9taXNlSWdub3Jlc05vbkZ1bmN0aW9uVGhlbkNhbGxiYWNrcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2xvYmFscy5Qcm9taXNlLnJlamVjdCg0MikudGhlbihudWxsLCA1KS50aGVuKG51bGwsIG5vb3ApO1xuICAgIH0pO1xuICAgIHZhciBwcm9taXNlUmVxdWlyZXNPYmplY3RDb250ZXh0ID0gdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFscy5Qcm9taXNlLmNhbGwoMywgbm9vcCk7IH0pO1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSgpIHdhcyBlcnJhdGEnZWQgbGF0ZSBpbiB0aGUgRVM2IHByb2Nlc3MuXG4gICAgLy8gU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTcwNzQyXG4gICAgLy8gICAgICBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDE2MVxuICAgIC8vIEl0IHNlcnZlcyBhcyBhIHByb3h5IGZvciBhIG51bWJlciBvZiBvdGhlciBidWdzIGluIGVhcmx5IFByb21pc2VcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMuXG4gICAgdmFyIHByb21pc2VSZXNvbHZlQnJva2VuID0gKGZ1bmN0aW9uIChQcm9taXNlKSB7XG4gICAgICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSg1KTtcbiAgICAgIHAuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHZhciBwMiA9IFByb21pc2UucmVzb2x2ZShwKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHAyLnRoZW4obnVsbCwgbm9vcCkudGhlbihudWxsLCBub29wKTsgLy8gYXZvaWQgXCJ1bmNhdWdodCByZWplY3Rpb25cIiB3YXJuaW5ncyBpbiBjb25zb2xlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyB2OCBuYXRpdmUgUHJvbWlzZXMgYnJlYWsgaGVyZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTc1MzE0XG4gICAgICB9XG4gICAgICByZXR1cm4gcCA9PT0gcDI7IC8vIFRoaXMgKnNob3VsZCogYmUgZmFsc2UhXG4gICAgfShnbG9iYWxzLlByb21pc2UpKTtcblxuICAgIC8vIENocm9tZSA0NiAocHJvYmFibHkgb2xkZXIgdG9vKSBkb2VzIG5vdCByZXRyaWV2ZSBhIHRoZW5hYmxlJ3MgLnRoZW4gc3luY2hyb25vdXNseVxuICAgIHZhciBnZXRzVGhlblN5bmNocm9ub3VzbHkgPSBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdldHRlci1yZXR1cm5cbiAgICAgIHZhciB0aGVuYWJsZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3RoZW4nLCB7IGdldDogZnVuY3Rpb24gKCkgeyBjb3VudCArPSAxOyB9IH0pO1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKHRoZW5hYmxlKTtcbiAgICAgIHJldHVybiBjb3VudCA9PT0gMTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIEJhZFJlc29sdmVyUHJvbWlzZSA9IGZ1bmN0aW9uIEJhZFJlc29sdmVyUHJvbWlzZShleGVjdXRvcikge1xuICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZShleGVjdXRvcik7XG4gICAgICBleGVjdXRvcigzLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICB0aGlzLnRoZW4gPSBwLnRoZW47XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQmFkUmVzb2x2ZXJQcm9taXNlO1xuICAgIH07XG4gICAgQmFkUmVzb2x2ZXJQcm9taXNlLnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuICAgIEJhZFJlc29sdmVyUHJvbWlzZS5hbGwgPSBQcm9taXNlLmFsbDtcbiAgICAvLyBDaHJvbWUgQ2FuYXJ5IDQ5IChwcm9iYWJseSBvbGRlciB0b28pIGhhcyBzb21lIGltcGxlbWVudGF0aW9uIGJ1Z3NcbiAgICB2YXIgaGFzQmFkUmVzb2x2ZXJQcm9taXNlID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICEhQmFkUmVzb2x2ZXJQcm9taXNlLmFsbChbMSwgMl0pO1xuICAgIH0pO1xuXG4gICAgaWYgKCFwcm9taXNlU3VwcG9ydHNTdWJjbGFzc2luZyB8fCAhcHJvbWlzZUlnbm9yZXNOb25GdW5jdGlvblRoZW5DYWxsYmFja3MgfHxcbiAgICAgICAgIXByb21pc2VSZXF1aXJlc09iamVjdENvbnRleHQgfHwgcHJvbWlzZVJlc29sdmVCcm9rZW4gfHxcbiAgICAgICAgIWdldHNUaGVuU3luY2hyb25vdXNseSB8fCBoYXNCYWRSZXNvbHZlclByb21pc2UpIHtcbiAgICAgIC8qIGdsb2JhbHMgUHJvbWlzZTogdHJ1ZSAqL1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICAgIFByb21pc2UgPSBQcm9taXNlU2hpbTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICAgIC8qIGdsb2JhbHMgUHJvbWlzZTogZmFsc2UgKi9cbiAgICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMsICdQcm9taXNlJywgUHJvbWlzZVNoaW0pO1xuICAgIH1cbiAgICBpZiAoUHJvbWlzZS5hbGwubGVuZ3RoICE9PSAxKSB7XG4gICAgICB2YXIgb3JpZ0FsbCA9IFByb21pc2UuYWxsO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoUHJvbWlzZSwgJ2FsbCcsIGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnQWxsLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChQcm9taXNlLnJhY2UubGVuZ3RoICE9PSAxKSB7XG4gICAgICB2YXIgb3JpZ1JhY2UgPSBQcm9taXNlLnJhY2U7XG4gICAgICBvdmVycmlkZU5hdGl2ZShQcm9taXNlLCAncmFjZScsIGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ1JhY2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFByb21pc2UucmVzb2x2ZS5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnUmVzb2x2ZSA9IFByb21pc2UucmVzb2x2ZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFByb21pc2UsICdyZXNvbHZlJywgZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdSZXNvbHZlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChQcm9taXNlLnJlamVjdC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnUmVqZWN0ID0gUHJvbWlzZS5yZWplY3Q7XG4gICAgICBvdmVycmlkZU5hdGl2ZShQcm9taXNlLCAncmVqZWN0JywgZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ1JlamVjdCwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbnN1cmVFbnVtZXJhYmxlKFByb21pc2UsICdhbGwnKTtcbiAgICBlbnN1cmVFbnVtZXJhYmxlKFByb21pc2UsICdyYWNlJyk7XG4gICAgZW5zdXJlRW51bWVyYWJsZShQcm9taXNlLCAncmVzb2x2ZScpO1xuICAgIGVuc3VyZUVudW1lcmFibGUoUHJvbWlzZSwgJ3JlamVjdCcpO1xuICAgIGFkZERlZmF1bHRTcGVjaWVzKFByb21pc2UpO1xuICB9XG5cbiAgLy8gTWFwIGFuZCBTZXQgcmVxdWlyZSBhIHRydWUgRVM1IGVudmlyb25tZW50XG4gIC8vIFRoZWlyIGZhc3QgcGF0aCBhbHNvIHJlcXVpcmVzIHRoYXQgdGhlIGVudmlyb25tZW50IHByZXNlcnZlXG4gIC8vIHByb3BlcnR5IGluc2VydGlvbiBvcmRlciwgd2hpY2ggaXMgbm90IGd1YXJhbnRlZWQgYnkgdGhlIHNwZWMuXG4gIHZhciB0ZXN0T3JkZXIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBiID0ga2V5cyhfcmVkdWNlKGEsIGZ1bmN0aW9uIChvLCBrKSB7XG4gICAgICBvW2tdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBvO1xuICAgIH0sIHt9KSk7XG4gICAgcmV0dXJuIGEuam9pbignOicpID09PSBiLmpvaW4oJzonKTtcbiAgfTtcbiAgdmFyIHByZXNlcnZlc0luc2VydGlvbk9yZGVyID0gdGVzdE9yZGVyKFsneicsICdhJywgJ2JiJ10pO1xuICAvLyBzb21lIGVuZ2luZXMgKGVnLCBDaHJvbWUpIG9ubHkgcHJlc2VydmUgaW5zZXJ0aW9uIG9yZGVyIGZvciBzdHJpbmcga2V5c1xuICB2YXIgcHJlc2VydmVzTnVtZXJpY0luc2VydGlvbk9yZGVyID0gdGVzdE9yZGVyKFsneicsIDEsICdhJywgJzMnLCAyXSk7XG5cbiAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblxuICAgIHZhciBmYXN0a2V5ID0gZnVuY3Rpb24gZmFzdGtleShrZXksIHNraXBJbnNlcnRpb25PcmRlckNoZWNrKSB7XG4gICAgICBpZiAoIXNraXBJbnNlcnRpb25PcmRlckNoZWNrICYmICFwcmVzZXJ2ZXNJbnNlcnRpb25PcmRlcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bGxPclVuZGVmaW5lZChrZXkpKSB7XG4gICAgICAgIHJldHVybiAnXicgKyBFUy5Ub1N0cmluZyhrZXkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gJyQnICsga2V5O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBub3RlIHRoYXQgLTAgd2lsbCBnZXQgY29lcmNlZCB0byBcIjBcIiB3aGVuIHVzZWQgYXMgYSBwcm9wZXJ0eSBrZXlcbiAgICAgICAgaWYgKCFwcmVzZXJ2ZXNOdW1lcmljSW5zZXJ0aW9uT3JkZXIpIHtcbiAgICAgICAgICByZXR1cm4gJ24nICsga2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gJ2InICsga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBlbXB0eU9iamVjdCA9IGZ1bmN0aW9uIGVtcHR5T2JqZWN0KCkge1xuICAgICAgLy8gYWNjb21vZGF0ZSBzb21lIG9sZGVyIG5vdC1xdWl0ZS1FUzUgYnJvd3NlcnNcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH07XG5cbiAgICB2YXIgYWRkSXRlcmFibGVUb01hcCA9IGZ1bmN0aW9uIGFkZEl0ZXJhYmxlVG9NYXAoTWFwQ29uc3RydWN0b3IsIG1hcCwgaXRlcmFibGUpIHtcbiAgICAgIGlmIChpc0FycmF5KGl0ZXJhYmxlKSB8fCBUeXBlLnN0cmluZyhpdGVyYWJsZSkpIHtcbiAgICAgICAgX2ZvckVhY2goaXRlcmFibGUsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSXRlcmF0b3IgdmFsdWUgJyArIGVudHJ5ICsgJyBpcyBub3QgYW4gZW50cnkgb2JqZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcC5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZXJhYmxlIGluc3RhbmNlb2YgTWFwQ29uc3RydWN0b3IpIHtcbiAgICAgICAgX2NhbGwoTWFwQ29uc3RydWN0b3IucHJvdG90eXBlLmZvckVhY2gsIGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZXIsIGFkZGVyO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkge1xuICAgICAgICAgIGFkZGVyID0gbWFwLnNldDtcbiAgICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUoYWRkZXIpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2JhZCBtYXAnKTsgfVxuICAgICAgICAgIGl0ZXIgPSBFUy5HZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdGVyKTtcbiAgICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkgeyBicmVhazsgfVxuICAgICAgICAgICAgdmFyIG5leHRJdGVtID0gbmV4dC52YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KG5leHRJdGVtKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdG9yIHZhbHVlICcgKyBuZXh0SXRlbSArICcgaXMgbm90IGFuIGVudHJ5IG9iamVjdCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9jYWxsKGFkZGVyLCBtYXAsIG5leHRJdGVtWzBdLCBuZXh0SXRlbVsxXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIEVTLkl0ZXJhdG9yQ2xvc2UoaXRlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgYWRkSXRlcmFibGVUb1NldCA9IGZ1bmN0aW9uIGFkZEl0ZXJhYmxlVG9TZXQoU2V0Q29uc3RydWN0b3IsIHNldCwgaXRlcmFibGUpIHtcbiAgICAgIGlmIChpc0FycmF5KGl0ZXJhYmxlKSB8fCBUeXBlLnN0cmluZyhpdGVyYWJsZSkpIHtcbiAgICAgICAgX2ZvckVhY2goaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHNldC5hZGQodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmFibGUgaW5zdGFuY2VvZiBTZXRDb25zdHJ1Y3Rvcikge1xuICAgICAgICBfY2FsbChTZXRDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZm9yRWFjaCwgaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHNldC5hZGQodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpdGVyLCBhZGRlcjtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIHtcbiAgICAgICAgICBhZGRlciA9IHNldC5hZGQ7XG4gICAgICAgICAgaWYgKCFFUy5Jc0NhbGxhYmxlKGFkZGVyKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdiYWQgc2V0Jyk7IH1cbiAgICAgICAgICBpdGVyID0gRVMuR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaXRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXRlcik7XG4gICAgICAgICAgICBpZiAobmV4dCA9PT0gZmFsc2UpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgX2NhbGwoYWRkZXIsIHNldCwgbmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNvbGxlY3Rpb25TaGltcyA9IHtcbiAgICAgIE1hcDogKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgZW1wdHkgPSB7fTtcblxuICAgICAgICB2YXIgTWFwRW50cnkgPSBmdW5jdGlvbiBNYXBFbnRyeShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICBNYXBFbnRyeS5wcm90b3R5cGUuaXNSZW1vdmVkID0gZnVuY3Rpb24gaXNSZW1vdmVkKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmtleSA9PT0gZW1wdHk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGlzTWFwID0gZnVuY3Rpb24gaXNNYXAobWFwKSB7XG4gICAgICAgICAgcmV0dXJuICEhbWFwLl9lczZtYXA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlcXVpcmVNYXBTbG90ID0gZnVuY3Rpb24gcmVxdWlyZU1hcFNsb3QobWFwLCBtZXRob2QpIHtcbiAgICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChtYXApIHx8ICFpc01hcChtYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2QgTWFwLnByb3RvdHlwZS4nICsgbWV0aG9kICsgJyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyICcgKyBFUy5Ub1N0cmluZyhtYXApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIE1hcEl0ZXJhdG9yID0gZnVuY3Rpb24gTWFwSXRlcmF0b3IobWFwLCBraW5kKSB7XG4gICAgICAgICAgcmVxdWlyZU1hcFNsb3QobWFwLCAnW1tNYXBJdGVyYXRvcl1dJyk7XG4gICAgICAgICAgdGhpcy5oZWFkID0gbWFwLl9oZWFkO1xuICAgICAgICAgIHRoaXMuaSA9IHRoaXMuaGVhZDtcbiAgICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgICAgICB9O1xuXG4gICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICBpc01hcEl0ZXJhdG9yOiB0cnVlLFxuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNNYXBJdGVyYXRvcikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgYSBNYXBJdGVyYXRvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmk7XG4gICAgICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcbiAgICAgICAgICAgIHZhciBoZWFkID0gdGhpcy5oZWFkO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclJlc3VsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGkuaXNSZW1vdmVkKCkgJiYgaSAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICAvLyBiYWNrIHVwIG9mZiBvZiByZW1vdmVkIGVudHJpZXNcbiAgICAgICAgICAgICAgaSA9IGkucHJldjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFkdmFuY2UgdG8gbmV4dCB1bnJldHVybmVkIGVsZW1lbnQuXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgd2hpbGUgKGkubmV4dCAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICBpID0gaS5uZXh0O1xuICAgICAgICAgICAgICBpZiAoIWkuaXNSZW1vdmVkKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gJ2tleScpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGkua2V5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW2kua2V5LCBpLnZhbHVlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pID0gaTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb25jZSB0aGUgaXRlcmF0b3IgaXMgZG9uZSwgaXQgaXMgZG9uZSBmb3JldmVyLlxuICAgICAgICAgICAgdGhpcy5pID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhZGRJdGVyYXRvcihNYXBJdGVyYXRvci5wcm90b3R5cGUpO1xuXG4gICAgICAgIHZhciBNYXAkcHJvdG90eXBlO1xuICAgICAgICB2YXIgTWFwU2hpbSA9IGZ1bmN0aW9uIE1hcCgpIHtcbiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgTWFwIHJlcXVpcmVzIFwibmV3XCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5fZXM2bWFwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgY29uc3RydWN0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtYXAgPSBlbXVsYXRlRVM2Y29uc3RydWN0KHRoaXMsIE1hcCwgTWFwJHByb3RvdHlwZSwge1xuICAgICAgICAgICAgX2VzNm1hcDogdHJ1ZSxcbiAgICAgICAgICAgIF9oZWFkOiBudWxsLFxuICAgICAgICAgICAgX21hcDogT3JpZ01hcCA/IG5ldyBPcmlnTWFwKCkgOiBudWxsLFxuICAgICAgICAgICAgX3NpemU6IDAsXG4gICAgICAgICAgICBfc3RvcmFnZTogZW1wdHlPYmplY3QoKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIGhlYWQgPSBuZXcgTWFwRW50cnkobnVsbCwgbnVsbCk7XG4gICAgICAgICAgLy8gY2lyY3VsYXIgZG91Ymx5LWxpbmtlZCBsaXN0LlxuICAgICAgICAgIC8qIGVzbGludCBuby1tdWx0aS1hc3NpZ246IDEgKi9cbiAgICAgICAgICBoZWFkLm5leHQgPSBoZWFkLnByZXYgPSBoZWFkO1xuICAgICAgICAgIG1hcC5faGVhZCA9IGhlYWQ7XG5cbiAgICAgICAgICAvLyBPcHRpb25hbGx5IGluaXRpYWxpemUgbWFwIGZyb20gaXRlcmFibGVcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFkZEl0ZXJhYmxlVG9NYXAoTWFwLCBtYXAsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXA7XG4gICAgICAgIH07XG4gICAgICAgIE1hcCRwcm90b3R5cGUgPSBNYXBTaGltLnByb3RvdHlwZTtcblxuICAgICAgICBWYWx1ZS5nZXR0ZXIoTWFwJHByb3RvdHlwZSwgJ3NpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zaXplID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtZXRob2QgY2FsbGVkIG9uIGluY29tcGF0aWJsZSBNYXAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoTWFwJHByb3RvdHlwZSwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2dldCcpO1xuICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgdmFyIGZrZXkgPSBmYXN0a2V5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZmtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IE8oMSkgcGF0aFxuICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3N0b3JhZ2VbZmtleV07XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBvYmplY3Qga2V5IHBhdGhcbiAgICAgICAgICAgICAgZW50cnkgPSBvcmlnTWFwR2V0LmNhbGwodGhpcy5fbWFwLCBrZXkpO1xuICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB3aGlsZSAoKGkgPSBpLm5leHQpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGlmIChFUy5TYW1lVmFsdWVaZXJvKGkua2V5LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkudmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnaGFzJyk7XG4gICAgICAgICAgICB2YXIgZmtleSA9IGZhc3RrZXkoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChma2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3QgTygxKSBwYXRoXG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fc3RvcmFnZVtma2V5XSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3Qgb2JqZWN0IGtleSBwYXRoXG4gICAgICAgICAgICAgIHJldHVybiBvcmlnTWFwSGFzLmNhbGwodGhpcy5fbWFwLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdmFyIGkgPSBoZWFkO1xuICAgICAgICAgICAgd2hpbGUgKChpID0gaS5uZXh0KSAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICBpZiAoRVMuU2FtZVZhbHVlWmVybyhpLmtleSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdzZXQnKTtcbiAgICAgICAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHZhciBpID0gaGVhZDtcbiAgICAgICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgICAgIHZhciBma2V5ID0gZmFzdGtleShrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGZrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBPKDEpIHBhdGhcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zdG9yYWdlW2ZrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2VbZmtleV0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3N0b3JhZ2VbZmtleV0gPSBuZXcgTWFwRW50cnkoa2V5LCB2YWx1ZSk7IC8qIGVzbGludCBuby1tdWx0aS1hc3NpZ246IDEgKi9cbiAgICAgICAgICAgICAgICBpID0gaGVhZC5wcmV2O1xuICAgICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IG9iamVjdCBrZXkgcGF0aFxuICAgICAgICAgICAgICBpZiAob3JpZ01hcEhhcy5jYWxsKHRoaXMuX21hcCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG9yaWdNYXBHZXQuY2FsbCh0aGlzLl9tYXAsIGtleSkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnRyeSA9IG5ldyBNYXBFbnRyeShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBvcmlnTWFwU2V0LmNhbGwodGhpcy5fbWFwLCBrZXksIGVudHJ5KTtcbiAgICAgICAgICAgICAgICBpID0gaGVhZC5wcmV2O1xuICAgICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoKGkgPSBpLm5leHQpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGlmIChFUy5TYW1lVmFsdWVaZXJvKGkua2V5LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeSA9IGVudHJ5IHx8IG5ldyBNYXBFbnRyeShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChFUy5TYW1lVmFsdWUoLTAsIGtleSkpIHtcbiAgICAgICAgICAgICAgZW50cnkua2V5ID0gKzA7IC8vIGNvZXJjZSAtMCB0byArMCBpbiBlbnRyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkubmV4dCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICBlbnRyeS5wcmV2ID0gdGhpcy5faGVhZC5wcmV2O1xuICAgICAgICAgICAgZW50cnkucHJldi5uZXh0ID0gZW50cnk7XG4gICAgICAgICAgICBlbnRyeS5uZXh0LnByZXYgPSBlbnRyeTtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgKz0gMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2RlbGV0ZScpO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdmFyIGkgPSBoZWFkO1xuICAgICAgICAgICAgdmFyIGZrZXkgPSBmYXN0a2V5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZmtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IE8oMSkgcGF0aFxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3N0b3JhZ2VbZmtleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSB0aGlzLl9zdG9yYWdlW2ZrZXldLnByZXY7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdG9yYWdlW2ZrZXldO1xuICAgICAgICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3Qgb2JqZWN0IGtleSBwYXRoXG4gICAgICAgICAgICAgIGlmICghb3JpZ01hcEhhcy5jYWxsKHRoaXMuX21hcCwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpID0gb3JpZ01hcEdldC5jYWxsKHRoaXMuX21hcCwga2V5KS5wcmV2O1xuICAgICAgICAgICAgICBvcmlnTWFwRGVsZXRlLmNhbGwodGhpcy5fbWFwLCBrZXkpO1xuICAgICAgICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGkubmV4dCkgIT09IGhlYWQpIHtcbiAgICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZVplcm8oaS5rZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpLmtleSA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIGkudmFsdWUgPSBlbXB0eTtcbiAgICAgICAgICAgICAgICBpLnByZXYubmV4dCA9IGkubmV4dDtcbiAgICAgICAgICAgICAgICBpLm5leHQucHJldiA9IGkucHJldjtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplIC09IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgICAgLyogZXNsaW50IG5vLW11bHRpLWFzc2lnbjogMSAqL1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2NsZWFyJyk7XG4gICAgICAgICAgICB0aGlzLl9tYXAgPSBPcmlnTWFwID8gbmV3IE9yaWdNYXAoKSA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBlbXB0eU9iamVjdCgpO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdmFyIGkgPSBoZWFkO1xuICAgICAgICAgICAgdmFyIHAgPSBpLm5leHQ7XG4gICAgICAgICAgICB3aGlsZSAoKGkgPSBwKSAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICBpLmtleSA9IGVtcHR5O1xuICAgICAgICAgICAgICBpLnZhbHVlID0gZW1wdHk7XG4gICAgICAgICAgICAgIHAgPSBpLm5leHQ7XG4gICAgICAgICAgICAgIGkubmV4dCA9IGkucHJldiA9IGhlYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFkLm5leHQgPSBoZWFkLnByZXYgPSBoZWFkO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2tleXMnKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgJ2tleScpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICd2YWx1ZXMnKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnZW50cmllcycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCAna2V5K3ZhbHVlJyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdmb3JFYWNoJyk7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBpdCA9IHRoaXMuZW50cmllcygpO1xuICAgICAgICAgICAgZm9yICh2YXIgZW50cnkgPSBpdC5uZXh0KCk7ICFlbnRyeS5kb25lOyBlbnRyeSA9IGl0Lm5leHQoKSkge1xuICAgICAgICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgIF9jYWxsKGNhbGxiYWNrLCBjb250ZXh0LCBlbnRyeS52YWx1ZVsxXSwgZW50cnkudmFsdWVbMF0sIHRoaXMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVudHJ5LnZhbHVlWzFdLCBlbnRyeS52YWx1ZVswXSwgdGhpcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRJdGVyYXRvcihNYXAkcHJvdG90eXBlLCBNYXAkcHJvdG90eXBlLmVudHJpZXMpO1xuXG4gICAgICAgIHJldHVybiBNYXBTaGltO1xuICAgICAgfSgpKSxcblxuICAgICAgU2V0OiAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXNTZXQgPSBmdW5jdGlvbiBpc1NldChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0Ll9lczZzZXQgJiYgdHlwZW9mIHNldC5fc3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXF1aXJlU2V0U2xvdCA9IGZ1bmN0aW9uIHJlcXVpcmVTZXRTbG90KHNldCwgbWV0aG9kKSB7XG4gICAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3Qoc2V0KSB8fCAhaXNTZXQoc2V0KSkge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbS9pc3N1ZXMvMTc2XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTZXQucHJvdG90eXBlLicgKyBtZXRob2QgKyAnIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXIgJyArIEVTLlRvU3RyaW5nKHNldCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDcmVhdGluZyBhIE1hcCBpcyBleHBlbnNpdmUuICBUbyBzcGVlZCB1cCB0aGUgY29tbW9uIGNhc2Ugb2ZcbiAgICAgICAgLy8gU2V0cyBjb250YWluaW5nIG9ubHkgc3RyaW5nIG9yIG51bWVyaWMga2V5cywgd2UgdXNlIGFuIG9iamVjdFxuICAgICAgICAvLyBhcyBiYWNraW5nIHN0b3JhZ2UgYW5kIGxhemlseSBjcmVhdGUgYSBmdWxsIE1hcCBvbmx5IHdoZW5cbiAgICAgICAgLy8gcmVxdWlyZWQuXG4gICAgICAgIHZhciBTZXQkcHJvdG90eXBlO1xuICAgICAgICB2YXIgU2V0U2hpbSA9IGZ1bmN0aW9uIFNldCgpIHtcbiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgU2V0IHJlcXVpcmVzIFwibmV3XCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5fZXM2c2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgY29uc3RydWN0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzZXQgPSBlbXVsYXRlRVM2Y29uc3RydWN0KHRoaXMsIFNldCwgU2V0JHByb3RvdHlwZSwge1xuICAgICAgICAgICAgX2VzNnNldDogdHJ1ZSxcbiAgICAgICAgICAgICdbW1NldERhdGFdXSc6IG51bGwsXG4gICAgICAgICAgICBfc3RvcmFnZTogZW1wdHlPYmplY3QoKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghc2V0Ll9lczZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2JhZCBzZXQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPcHRpb25hbGx5IGluaXRpYWxpemUgU2V0IGZyb20gaXRlcmFibGVcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFkZEl0ZXJhYmxlVG9TZXQoU2V0LCBzZXQsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZXQ7XG4gICAgICAgIH07XG4gICAgICAgIFNldCRwcm90b3R5cGUgPSBTZXRTaGltLnByb3RvdHlwZTtcblxuICAgICAgICB2YXIgZGVjb2RlS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciBrID0ga2V5O1xuICAgICAgICAgIGlmIChrID09PSAnXm51bGwnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09ICdedW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZpcnN0ID0gay5jaGFyQXQoMCk7XG4gICAgICAgICAgICBpZiAoZmlyc3QgPT09ICckJykge1xuICAgICAgICAgICAgICByZXR1cm4gX3N0clNsaWNlKGssIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gJ24nKSB7XG4gICAgICAgICAgICAgIHJldHVybiArX3N0clNsaWNlKGssIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gJ2InKSB7XG4gICAgICAgICAgICAgIHJldHVybiBrID09PSAnYnRydWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gK2s7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFN3aXRjaCBmcm9tIHRoZSBvYmplY3QgYmFja2luZyBzdG9yYWdlIHRvIGEgZnVsbCBNYXAuXG4gICAgICAgIHZhciBlbnN1cmVNYXAgPSBmdW5jdGlvbiBlbnN1cmVNYXAoc2V0KSB7XG4gICAgICAgICAgaWYgKCFzZXRbJ1tbU2V0RGF0YV1dJ10pIHtcbiAgICAgICAgICAgIHZhciBtID0gbmV3IGNvbGxlY3Rpb25TaGltcy5NYXAoKTtcbiAgICAgICAgICAgIHNldFsnW1tTZXREYXRhXV0nXSA9IG07XG4gICAgICAgICAgICBfZm9yRWFjaChrZXlzKHNldC5fc3RvcmFnZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBkZWNvZGVLZXkoa2V5KTtcbiAgICAgICAgICAgICAgbS5zZXQoaywgayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFsnW1tTZXREYXRhXV0nXSA9IG07XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldC5fc3RvcmFnZSA9IG51bGw7IC8vIGZyZWUgb2xkIGJhY2tpbmcgc3RvcmFnZVxuICAgICAgICB9O1xuXG4gICAgICAgIFZhbHVlLmdldHRlcihTZXRTaGltLnByb3RvdHlwZSwgJ3NpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ3NpemUnKTtcbiAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleXModGhpcy5fc3RvcmFnZSkubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbnN1cmVNYXAodGhpcyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbJ1tbU2V0RGF0YV1dJ10uc2l6ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhTZXRTaGltLnByb3RvdHlwZSwge1xuICAgICAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2hhcycpO1xuICAgICAgICAgICAgdmFyIGZrZXk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSAmJiAoZmtleSA9IGZhc3RrZXkoa2V5KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fc3RvcmFnZVtma2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWydbW1NldERhdGFdXSddLmhhcyhrZXkpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChrZXkpIHtcbiAgICAgICAgICAgIHJlcXVpcmVTZXRTbG90KHRoaXMsICdhZGQnKTtcbiAgICAgICAgICAgIHZhciBma2V5O1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3JhZ2UgJiYgKGZrZXkgPSBmYXN0a2V5KGtleSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2VbZmtleV0gPSB0cnVlO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXNbJ1tbU2V0RGF0YV1dJ10uc2V0KGtleSwga2V5KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2RlbGV0ZScpO1xuICAgICAgICAgICAgdmFyIGZrZXk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSAmJiAoZmtleSA9IGZhc3RrZXkoa2V5KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIGhhc0ZLZXkgPSBfaGFzT3duUHJvcGVydHkodGhpcy5fc3RvcmFnZSwgZmtleSk7XG4gICAgICAgICAgICAgIHJldHVybiAoZGVsZXRlIHRoaXMuX3N0b3JhZ2VbZmtleV0pICYmIGhhc0ZLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnN1cmVNYXAodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1snW1tTZXREYXRhXV0nXVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2NsZWFyJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSkge1xuICAgICAgICAgICAgICB0aGlzLl9zdG9yYWdlID0gZW1wdHlPYmplY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzWydbW1NldERhdGFdXSddKSB7XG4gICAgICAgICAgICAgIHRoaXNbJ1tbU2V0RGF0YV1dJ10uY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAndmFsdWVzJyk7XG4gICAgICAgICAgICBlbnN1cmVNYXAodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNldEl0ZXJhdG9yKHRoaXNbJ1tbU2V0RGF0YV1dJ10udmFsdWVzKCkpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2VudHJpZXMnKTtcbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0SXRlcmF0b3IodGhpc1snW1tTZXREYXRhXV0nXS5lbnRyaWVzKCkpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnZm9yRWFjaCcpO1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gICAgICAgICAgICB2YXIgZW50aXJlU2V0ID0gdGhpcztcbiAgICAgICAgICAgIGVuc3VyZU1hcChlbnRpcmVTZXQpO1xuICAgICAgICAgICAgdGhpc1snW1tTZXREYXRhXV0nXS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgX2NhbGwoY2FsbGJhY2ssIGNvbnRleHQsIGtleSwga2V5LCBlbnRpcmVTZXQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGtleSwga2V5LCBlbnRpcmVTZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShTZXRTaGltLnByb3RvdHlwZSwgJ2tleXMnLCBTZXRTaGltLnByb3RvdHlwZS52YWx1ZXMsIHRydWUpO1xuICAgICAgICBhZGRJdGVyYXRvcihTZXRTaGltLnByb3RvdHlwZSwgU2V0U2hpbS5wcm90b3R5cGUudmFsdWVzKTtcblxuICAgICAgICB2YXIgU2V0SXRlcmF0b3IgPSBmdW5jdGlvbiBTZXRJdGVyYXRvcihpdCkge1xuICAgICAgICAgIHRoaXMuaXQgPSBpdDtcbiAgICAgICAgfTtcbiAgICAgICAgU2V0SXRlcmF0b3IucHJvdG90eXBlID0ge1xuICAgICAgICAgIGlzU2V0SXRlcmF0b3I6IHRydWUsXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1NldEl0ZXJhdG9yKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhIFNldEl0ZXJhdG9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdC5uZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhZGRJdGVyYXRvcihTZXRJdGVyYXRvci5wcm90b3R5cGUpO1xuXG4gICAgICAgIHJldHVybiBTZXRTaGltO1xuICAgICAgfSgpKVxuICAgIH07XG5cbiAgICB2YXIgaXNHb29nbGVUcmFuc2xhdGUgPSBnbG9iYWxzLlNldCAmJiAhU2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gJiYgU2V0LnByb3RvdHlwZS5yZW1vdmUgJiYgU2V0LnByb3RvdHlwZS5pdGVtcyAmJiBTZXQucHJvdG90eXBlLm1hcCAmJiBBcnJheS5pc0FycmF5KG5ldyBTZXQoKS5rZXlzKTtcbiAgICBpZiAoaXNHb29nbGVUcmFuc2xhdGUpIHtcbiAgICAgIC8vIHNwZWNpYWwtY2FzZSBmb3JjZSByZW1vdmFsIG9mIHdpbGRseSBpbnZhbGlkIFNldCBpbXBsZW1lbnRhdGlvbiBpbiBHb29nbGUgVHJhbnNsYXRlIGlmcmFtZXNcbiAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2lzc3Vlcy80MzggLyBodHRwczovL3R3aXR0ZXIuY29tL2xqaGFyYi9zdGF0dXMvODQ5MzM1NTczMTE0MzYzOTA0XG4gICAgICBnbG9iYWxzLlNldCA9IGNvbGxlY3Rpb25TaGltcy5TZXQ7XG4gICAgfVxuICAgIGlmIChnbG9iYWxzLk1hcCB8fCBnbG9iYWxzLlNldCkge1xuICAgICAgLy8gU2FmYXJpIDgsIGZvciBleGFtcGxlLCBkb2Vzbid0IGFjY2VwdCBhbiBpdGVyYWJsZS5cbiAgICAgIHZhciBtYXBBY2NlcHRzQXJndW1lbnRzID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcChbWzEsIDJdXSkuZ2V0KDEpID09PSAyOyB9KTtcbiAgICAgIGlmICghbWFwQWNjZXB0c0FyZ3VtZW50cykge1xuICAgICAgICBnbG9iYWxzLk1hcCA9IGZ1bmN0aW9uIE1hcCgpIHtcbiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgTWFwIHJlcXVpcmVzIFwibmV3XCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG0gPSBuZXcgT3JpZ01hcCgpO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb01hcChNYXAsIG0sIGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBtLmNvbnN0cnVjdG9yO1xuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihtLCBnbG9iYWxzLk1hcC5wcm90b3R5cGUpO1xuICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWxzLk1hcC5wcm90b3R5cGUgPSBjcmVhdGUoT3JpZ01hcC5wcm90b3R5cGUpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLk1hcC5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIGdsb2JhbHMuTWFwLCB0cnVlKTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhnbG9iYWxzLk1hcCwgT3JpZ01hcCk7XG4gICAgICB9XG4gICAgICB2YXIgdGVzdE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIHZhciBtYXBVc2VzU2FtZVZhbHVlWmVybyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIENocm9tZSAzOC00Miwgbm9kZSAwLjExLzAuMTIsIGlvanMgMS8yIGFsc28gaGF2ZSBhIGJ1ZyB3aGVuIHRoZSBNYXAgaGFzIGEgc2l6ZSA+IDRcbiAgICAgICAgdmFyIG0gPSBuZXcgTWFwKFtbMSwgMF0sIFsyLCAwXSwgWzMsIDBdLCBbNCwgMF1dKTtcbiAgICAgICAgbS5zZXQoLTAsIG0pO1xuICAgICAgICByZXR1cm4gbS5nZXQoMCkgPT09IG0gJiYgbS5nZXQoLTApID09PSBtICYmIG0uaGFzKDApICYmIG0uaGFzKC0wKTtcbiAgICAgIH0oKSk7XG4gICAgICB2YXIgbWFwU3VwcG9ydHNDaGFpbmluZyA9IHRlc3RNYXAuc2V0KDEsIDIpID09PSB0ZXN0TWFwO1xuICAgICAgaWYgKCFtYXBVc2VzU2FtZVZhbHVlWmVybyB8fCAhbWFwU3VwcG9ydHNDaGFpbmluZykge1xuICAgICAgICBvdmVycmlkZU5hdGl2ZShNYXAucHJvdG90eXBlLCAnc2V0JywgZnVuY3Rpb24gc2V0KGssIHYpIHtcbiAgICAgICAgICBfY2FsbChvcmlnTWFwU2V0LCB0aGlzLCBrID09PSAwID8gMCA6IGssIHYpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghbWFwVXNlc1NhbWVWYWx1ZVplcm8pIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhNYXAucHJvdG90eXBlLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoaykge1xuICAgICAgICAgICAgcmV0dXJuIF9jYWxsKG9yaWdNYXBHZXQsIHRoaXMsIGsgPT09IDAgPyAwIDogayk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhbGwob3JpZ01hcEhhcywgdGhpcywgayA9PT0gMCA/IDAgOiBrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKE1hcC5wcm90b3R5cGUuZ2V0LCBvcmlnTWFwR2V0KTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhNYXAucHJvdG90eXBlLmhhcywgb3JpZ01hcEhhcyk7XG4gICAgICB9XG4gICAgICB2YXIgdGVzdFNldCA9IG5ldyBTZXQoKTtcbiAgICAgIHZhciBzZXRVc2VzU2FtZVZhbHVlWmVybyA9IFNldC5wcm90b3R5cGVbJ2RlbGV0ZSddICYmIFNldC5wcm90b3R5cGUuYWRkICYmIFNldC5wcm90b3R5cGUuaGFzICYmIChmdW5jdGlvbiAocykge1xuICAgICAgICBzWydkZWxldGUnXSgwKTtcbiAgICAgICAgcy5hZGQoLTApO1xuICAgICAgICByZXR1cm4gIXMuaGFzKDApO1xuICAgICAgfSh0ZXN0U2V0KSk7XG4gICAgICB2YXIgc2V0U3VwcG9ydHNDaGFpbmluZyA9IHRlc3RTZXQuYWRkKDEpID09PSB0ZXN0U2V0O1xuICAgICAgaWYgKCFzZXRVc2VzU2FtZVZhbHVlWmVybyB8fCAhc2V0U3VwcG9ydHNDaGFpbmluZykge1xuICAgICAgICB2YXIgb3JpZ1NldEFkZCA9IFNldC5wcm90b3R5cGUuYWRkO1xuICAgICAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCh2KSB7XG4gICAgICAgICAgX2NhbGwob3JpZ1NldEFkZCwgdGhpcywgdiA9PT0gMCA/IDAgOiB2KTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhTZXQucHJvdG90eXBlLmFkZCwgb3JpZ1NldEFkZCk7XG4gICAgICB9XG4gICAgICBpZiAoIXNldFVzZXNTYW1lVmFsdWVaZXJvKSB7XG4gICAgICAgIHZhciBvcmlnU2V0SGFzID0gU2V0LnByb3RvdHlwZS5oYXM7XG4gICAgICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzKHYpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGwob3JpZ1NldEhhcywgdGhpcywgdiA9PT0gMCA/IDAgOiB2KTtcbiAgICAgICAgfTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhTZXQucHJvdG90eXBlLmhhcywgb3JpZ1NldEhhcyk7XG4gICAgICAgIHZhciBvcmlnU2V0RGVsID0gU2V0LnByb3RvdHlwZVsnZGVsZXRlJ107XG4gICAgICAgIFNldC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24gU2V0RGVsZXRlKHYpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGwob3JpZ1NldERlbCwgdGhpcywgdiA9PT0gMCA/IDAgOiB2KTtcbiAgICAgICAgfTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhTZXQucHJvdG90eXBlWydkZWxldGUnXSwgb3JpZ1NldERlbCk7XG4gICAgICB9XG4gICAgICB2YXIgbWFwU3VwcG9ydHNTdWJjbGFzc2luZyA9IHN1cHBvcnRzU3ViY2xhc3NpbmcoZ2xvYmFscy5NYXAsIGZ1bmN0aW9uIChNKSB7XG4gICAgICAgIHZhciBtID0gbmV3IE0oW10pO1xuICAgICAgICAvLyBGaXJlZm94IDMyIGlzIG9rIHdpdGggdGhlIGluc3RhbnRpYXRpbmcgdGhlIHN1YmNsYXNzIGJ1dCB3aWxsXG4gICAgICAgIC8vIHRocm93IHdoZW4gdGhlIG1hcCBpcyB1c2VkLlxuICAgICAgICBtLnNldCg0MiwgNDIpO1xuICAgICAgICByZXR1cm4gbSBpbnN0YW5jZW9mIE07XG4gICAgICB9KTtcbiAgICAgIC8vIHdpdGhvdXQgT2JqZWN0LnNldFByb3RvdHlwZU9mLCBzdWJjbGFzc2luZyBpcyBub3QgcG9zc2libGVcbiAgICAgIHZhciBtYXBGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nID0gT2JqZWN0LnNldFByb3RvdHlwZU9mICYmICFtYXBTdXBwb3J0c1N1YmNsYXNzaW5nO1xuICAgICAgdmFyIG1hcFJlcXVpcmVzTmV3ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gIShnbG9iYWxzLk1hcCgpIGluc3RhbmNlb2YgZ2xvYmFscy5NYXApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBUeXBlRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0oKSk7XG4gICAgICBpZiAoZ2xvYmFscy5NYXAubGVuZ3RoICE9PSAwIHx8IG1hcEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmcgfHwgIW1hcFJlcXVpcmVzTmV3KSB7XG4gICAgICAgIGdsb2JhbHMuTWFwID0gZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBNYXAgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbSA9IG5ldyBPcmlnTWFwKCk7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhZGRJdGVyYWJsZVRvTWFwKE1hcCwgbSwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIG0uY29uc3RydWN0b3I7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG0sIE1hcC5wcm90b3R5cGUpO1xuICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWxzLk1hcC5wcm90b3R5cGUgPSBPcmlnTWFwLnByb3RvdHlwZTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFscy5NYXAucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBnbG9iYWxzLk1hcCwgdHJ1ZSk7XG4gICAgICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoZ2xvYmFscy5NYXAsIE9yaWdNYXApO1xuICAgICAgfVxuICAgICAgdmFyIHNldFN1cHBvcnRzU3ViY2xhc3NpbmcgPSBzdXBwb3J0c1N1YmNsYXNzaW5nKGdsb2JhbHMuU2V0LCBmdW5jdGlvbiAoUykge1xuICAgICAgICB2YXIgcyA9IG5ldyBTKFtdKTtcbiAgICAgICAgcy5hZGQoNDIsIDQyKTtcbiAgICAgICAgcmV0dXJuIHMgaW5zdGFuY2VvZiBTO1xuICAgICAgfSk7XG4gICAgICAvLyB3aXRob3V0IE9iamVjdC5zZXRQcm90b3R5cGVPZiwgc3ViY2xhc3NpbmcgaXMgbm90IHBvc3NpYmxlXG4gICAgICB2YXIgc2V0RmFpbHNUb1N1cHBvcnRTdWJjbGFzc2luZyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiAmJiAhc2V0U3VwcG9ydHNTdWJjbGFzc2luZztcbiAgICAgIHZhciBzZXRSZXF1aXJlc05ldyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuICEoZ2xvYmFscy5TZXQoKSBpbnN0YW5jZW9mIGdsb2JhbHMuU2V0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgVHlwZUVycm9yO1xuICAgICAgICB9XG4gICAgICB9KCkpO1xuICAgICAgaWYgKGdsb2JhbHMuU2V0Lmxlbmd0aCAhPT0gMCB8fCBzZXRGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nIHx8ICFzZXRSZXF1aXJlc05ldykge1xuICAgICAgICB2YXIgT3JpZ1NldCA9IGdsb2JhbHMuU2V0O1xuICAgICAgICBnbG9iYWxzLlNldCA9IGZ1bmN0aW9uIFNldCgpIHtcbiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgU2V0IHJlcXVpcmVzIFwibmV3XCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHMgPSBuZXcgT3JpZ1NldCgpO1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb1NldChTZXQsIHMsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBzLmNvbnN0cnVjdG9yO1xuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihzLCBTZXQucHJvdG90eXBlKTtcbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfTtcbiAgICAgICAgZ2xvYmFscy5TZXQucHJvdG90eXBlID0gT3JpZ1NldC5wcm90b3R5cGU7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMuU2V0LnByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgZ2xvYmFscy5TZXQsIHRydWUpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKGdsb2JhbHMuU2V0LCBPcmlnU2V0KTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSBuZXcgZ2xvYmFscy5NYXAoKTtcbiAgICAgIHZhciBtYXBJdGVyYXRpb25UaHJvd3NTdG9wSXRlcmF0b3IgPSAhdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3TWFwLmtleXMoKS5uZXh0KCkuZG9uZTtcbiAgICAgIH0pO1xuICAgICAgLypcbiAgICAgICAgLSBJbiBGaXJlZm94IDwgMjMsIE1hcCNzaXplIGlzIGEgZnVuY3Rpb24uXG4gICAgICAgIC0gSW4gYWxsIGN1cnJlbnQgRmlyZWZveCwgU2V0I2VudHJpZXMva2V5cy92YWx1ZXMgJiBNYXAjY2xlYXIgZG8gbm90IGV4aXN0XG4gICAgICAgIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODY5OTk2XG4gICAgICAgIC0gSW4gRmlyZWZveCAyNCwgTWFwIGFuZCBTZXQgZG8gbm90IGltcGxlbWVudCBmb3JFYWNoXG4gICAgICAgIC0gSW4gRmlyZWZveCAyNSBhdCBsZWFzdCwgTWFwIGFuZCBTZXQgYXJlIGNhbGxhYmxlIHdpdGhvdXQgXCJuZXdcIlxuICAgICAgKi9cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuTWFwLnByb3RvdHlwZS5jbGVhciAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBuZXcgZ2xvYmFscy5TZXQoKS5zaXplICE9PSAwIHx8XG4gICAgICAgIG5ld01hcC5zaXplICE9PSAwIHx8XG4gICAgICAgIHR5cGVvZiBnbG9iYWxzLk1hcC5wcm90b3R5cGUua2V5cyAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFscy5TZXQucHJvdG90eXBlLmtleXMgIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuTWFwLnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIHR5cGVvZiBnbG9iYWxzLlNldC5wcm90b3R5cGUuZm9yRWFjaCAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBpc0NhbGxhYmxlV2l0aG91dE5ldyhnbG9iYWxzLk1hcCkgfHxcbiAgICAgICAgaXNDYWxsYWJsZVdpdGhvdXROZXcoZ2xvYmFscy5TZXQpIHx8XG4gICAgICAgIHR5cGVvZiBuZXdNYXAua2V5cygpLm5leHQgIT09ICdmdW5jdGlvbicgfHwgLy8gU2FmYXJpIDhcbiAgICAgICAgbWFwSXRlcmF0aW9uVGhyb3dzU3RvcEl0ZXJhdG9yIHx8IC8vIEZpcmVmb3ggMjVcbiAgICAgICAgIW1hcFN1cHBvcnRzU3ViY2xhc3NpbmdcbiAgICAgICkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKGdsb2JhbHMsIHtcbiAgICAgICAgICBNYXA6IGNvbGxlY3Rpb25TaGltcy5NYXAsXG4gICAgICAgICAgU2V0OiBjb2xsZWN0aW9uU2hpbXMuU2V0XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2xvYmFscy5TZXQucHJvdG90eXBlLmtleXMgIT09IGdsb2JhbHMuU2V0LnByb3RvdHlwZS52YWx1ZXMpIHtcbiAgICAgICAgLy8gRml4ZWQgaW4gV2ViS2l0IHdpdGggaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0NDE5MFxuICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLlNldC5wcm90b3R5cGUsICdrZXlzJywgZ2xvYmFscy5TZXQucHJvdG90eXBlLnZhbHVlcywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNoaW0gaW5jb21wbGV0ZSBpdGVyYXRvciBpbXBsZW1lbnRhdGlvbnMuXG4gICAgICBhZGRJdGVyYXRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoKG5ldyBnbG9iYWxzLk1hcCgpKS5rZXlzKCkpKTtcbiAgICAgIGFkZEl0ZXJhdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZigobmV3IGdsb2JhbHMuU2V0KCkpLmtleXMoKSkpO1xuXG4gICAgICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzICYmIGdsb2JhbHMuU2V0LnByb3RvdHlwZS5oYXMubmFtZSAhPT0gJ2hhcycpIHtcbiAgICAgICAgLy8gTWljcm9zb2Z0IEVkZ2UgdjAuMTEuMTAwNzQuMCBpcyBtaXNzaW5nIGEgbmFtZSBvbiBTZXQjaGFzXG4gICAgICAgIHZhciBhbm9ueW1vdXNTZXRIYXMgPSBnbG9iYWxzLlNldC5wcm90b3R5cGUuaGFzO1xuICAgICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlNldC5wcm90b3R5cGUsICdoYXMnLCBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsKGFub255bW91c1NldEhhcywgdGhpcywga2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGRlZmluZVByb3BlcnRpZXMoZ2xvYmFscywgY29sbGVjdGlvblNoaW1zKTtcbiAgICBhZGREZWZhdWx0U3BlY2llcyhnbG9iYWxzLk1hcCk7XG4gICAgYWRkRGVmYXVsdFNwZWNpZXMoZ2xvYmFscy5TZXQpO1xuICB9XG5cbiAgdmFyIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QgPSBmdW5jdGlvbiB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCkge1xuICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBTb21lIFJlZmxlY3QgbWV0aG9kcyBhcmUgYmFzaWNhbGx5IHRoZSBzYW1lIGFzXG4gIC8vIHRob3NlIG9uIHRoZSBPYmplY3QgZ2xvYmFsLCBleGNlcHQgdGhhdCBhIFR5cGVFcnJvciBpcyB0aHJvd24gaWZcbiAgLy8gdGFyZ2V0IGlzbid0IGFuIG9iamVjdC4gQXMgd2VsbCBhcyByZXR1cm5pbmcgYSBib29sZWFuIGluZGljYXRpbmdcbiAgLy8gdGhlIHN1Y2Nlc3Mgb2YgdGhlIG9wZXJhdGlvbi5cbiAgdmFyIFJlZmxlY3RTaGltcyA9IHtcbiAgICAvLyBBcHBseSBtZXRob2QgaW4gYSBmdW5jdGlvbmFsIGZvcm0uXG4gICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KCkge1xuICAgICAgcmV0dXJuIEVTLkNhbGwoRVMuQ2FsbCwgbnVsbCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gTmV3IG9wZXJhdG9yIGluIGEgZnVuY3Rpb25hbCBmb3JtLlxuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KGNvbnN0cnVjdG9yLCBhcmdzKSB7XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IoY29uc3RydWN0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb25zdHJ1Y3Rvci4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IGNvbnN0cnVjdG9yO1xuICAgICAgaWYgKCFFUy5Jc0NvbnN0cnVjdG9yKG5ld1RhcmdldCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbmV3LnRhcmdldCBtdXN0IGJlIGEgY29uc3RydWN0b3IuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gRVMuQ29uc3RydWN0KGNvbnN0cnVjdG9yLCBhcmdzLCBuZXdUYXJnZXQsICdpbnRlcm5hbCcpO1xuICAgIH0sXG5cbiAgICAvLyBXaGVuIGRlbGV0aW5nIGEgbm9uLWV4aXN0ZW50IG9yIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSxcbiAgICAvLyB0cnVlIGlzIHJldHVybmVkLlxuICAgIC8vIFdoZW4gYXR0ZW1wdGluZyB0byBkZWxldGUgYSBub24tY29uZmlndXJhYmxlIHByb3BlcnR5LFxuICAgIC8vIGl0IHdpbGwgcmV0dXJuIGZhbHNlLlxuICAgIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcblxuICAgICAgICBpZiAoZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgIHJldHVybiBkZWxldGUgdGFyZ2V0W2tleV07XG4gICAgfSxcblxuICAgIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwga2V5KSB7XG4gICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICByZXR1cm4ga2V5IGluIHRhcmdldDtcbiAgICB9XG4gIH07XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgT2JqZWN0LmFzc2lnbihSZWZsZWN0U2hpbXMsIHtcbiAgICAgIC8vIEJhc2ljYWxseSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIGludGVybmFsIFtbT3duUHJvcGVydHlLZXlzXV0uXG4gICAgICAvLyBDb25jYXRlbmF0aW5nIHByb3BlcnR5TmFtZXMgYW5kIHByb3BlcnR5U3ltYm9scyBzaG91bGQgZG8gdGhlIHRyaWNrLlxuICAgICAgLy8gVGhpcyBzaG91bGQgY29udGludWUgdG8gd29yayB0b2dldGhlciB3aXRoIGEgU3ltYm9sIHNoaW1cbiAgICAgIC8vIHdoaWNoIG92ZXJyaWRlcyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgaW1wbGVtZW50c1xuICAgICAgLy8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgIG93bktleXM6IGZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuXG4gICAgICAgIGlmIChFUy5Jc0NhbGxhYmxlKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpKSB7XG4gICAgICAgICAgX3B1c2hBcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgY2FsbEFuZENhdGNoRXhjZXB0aW9uID0gZnVuY3Rpb24gQ29udmVydEV4Y2VwdGlvblRvQm9vbGVhbihmdW5jKSB7XG4gICAgcmV0dXJuICF0aHJvd3NFcnJvcihmdW5jKTtcbiAgfTtcblxuICBpZiAoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgT2JqZWN0LmFzc2lnbihSZWZsZWN0U2hpbXMsIHtcbiAgICAgIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKHRhcmdldCk7XG4gICAgICB9LFxuICAgICAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBjYWxsQW5kQ2F0Y2hFeGNlcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIHZhciBpbnRlcm5hbEdldCA9IGZ1bmN0aW9uIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG5cbiAgICAgIGlmICghZGVzYykge1xuICAgICAgICB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW50ZXJuYWxHZXQocGFyZW50LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYykge1xuICAgICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKGRlc2MuZ2V0LCByZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIHZhciBpbnRlcm5hbFNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuXG4gICAgICBpZiAoIWRlc2MpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuXG4gICAgICAgIGlmIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJuYWxTZXQocGFyZW50LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICAgIH1cblxuICAgICAgICBkZXNjID0ge1xuICAgICAgICAgIHZhbHVlOiB2b2lkIDAsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYykge1xuICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChyZWNlaXZlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhpc3RpbmdEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwga2V5KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdEZXNjKSB7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICAgIF9jYWxsKGRlc2Muc2V0LCByZWNlaXZlciwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gY2FsbEFuZENhdGNoRXhjZXB0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFN5bnRheCBpbiBhIGZ1bmN0aW9uYWwgZm9ybS5cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB0YXJnZXQ7XG5cbiAgICAgICAgcmV0dXJuIGludGVybmFsR2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHRhcmdldDtcblxuICAgICAgICByZXR1cm4gaW50ZXJuYWxTZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgdmFyIG9iamVjdERvdEdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIFJlZmxlY3RTaGltcy5nZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgcmV0dXJuIG9iamVjdERvdEdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YgJiYgUmVmbGVjdFNoaW1zLmdldFByb3RvdHlwZU9mKSB7XG4gICAgdmFyIHdpbGxDcmVhdGVDaXJjdWxhclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvYmplY3QsIGxhc3RQcm90bykge1xuICAgICAgdmFyIHByb3RvID0gbGFzdFByb3RvO1xuICAgICAgd2hpbGUgKHByb3RvKSB7XG4gICAgICAgIGlmIChvYmplY3QgPT09IHByb3RvKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdG8gPSBSZWZsZWN0U2hpbXMuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgLy8gU2V0cyB0aGUgcHJvdG90eXBlIG9mIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICAvLyBSZXR1cm5zIHRydWUgb24gc3VjY2Vzcywgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG9iamVjdCwgcHJvdG8pIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdChvYmplY3QpO1xuICAgICAgICBpZiAocHJvdG8gIT09IG51bGwgJiYgIUVTLlR5cGVJc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm90byBtdXN0IGJlIGFuIG9iamVjdCBvciBudWxsJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGV5IGFscmVhZHkgYXJlIHRoZSBzYW1lLCB3ZSdyZSBkb25lLlxuICAgICAgICBpZiAocHJvdG8gPT09IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2Fubm90IGFsdGVyIHByb3RvdHlwZSBpZiBvYmplY3Qgbm90IGV4dGVuc2libGUuXG4gICAgICAgIGlmIChSZWZsZWN0LmlzRXh0ZW5zaWJsZSAmJiAhUmVmbGVjdC5pc0V4dGVuc2libGUob2JqZWN0KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHdlIGRvIG5vdCBjcmVhdGUgYSBjaXJjdWxhciBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgIGlmICh3aWxsQ3JlYXRlQ2lyY3VsYXJQcm90b3R5cGUob2JqZWN0LCBwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBwcm90byk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdmFyIGRlZmluZU9yT3ZlcnJpZGVSZWZsZWN0UHJvcGVydHkgPSBmdW5jdGlvbiAoa2V5LCBzaGltKSB7XG4gICAgaWYgKCFFUy5Jc0NhbGxhYmxlKGdsb2JhbHMuUmVmbGVjdFtrZXldKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFscy5SZWZsZWN0LCBrZXksIHNoaW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWNjZXB0c1ByaW1pdGl2ZXMgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdsb2JhbHMuUmVmbGVjdFtrZXldKDEpO1xuICAgICAgICBnbG9iYWxzLlJlZmxlY3Rba2V5XShOYU4pO1xuICAgICAgICBnbG9iYWxzLlJlZmxlY3Rba2V5XSh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICAgIGlmIChhY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsIGtleSwgc2hpbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBPYmplY3Qua2V5cyhSZWZsZWN0U2hpbXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRlZmluZU9yT3ZlcnJpZGVSZWZsZWN0UHJvcGVydHkoa2V5LCBSZWZsZWN0U2hpbXNba2V5XSk7XG4gIH0pO1xuICB2YXIgb3JpZ2luYWxSZWZsZWN0R2V0UHJvdG8gPSBnbG9iYWxzLlJlZmxlY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgJiYgb3JpZ2luYWxSZWZsZWN0R2V0UHJvdG8gJiYgb3JpZ2luYWxSZWZsZWN0R2V0UHJvdG8ubmFtZSAhPT0gJ2dldFByb3RvdHlwZU9mJykge1xuICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMuUmVmbGVjdCwgJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gX2NhbGwob3JpZ2luYWxSZWZsZWN0R2V0UHJvdG8sIGdsb2JhbHMuUmVmbGVjdCwgdGFyZ2V0KTtcbiAgICB9KTtcbiAgfVxuICBpZiAoZ2xvYmFscy5SZWZsZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgaWYgKHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGdsb2JhbHMuUmVmbGVjdC5zZXRQcm90b3R5cGVPZigxLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KSkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscy5SZWZsZWN0LCAnc2V0UHJvdG90eXBlT2YnLCBSZWZsZWN0U2hpbXMuc2V0UHJvdG90eXBlT2YpO1xuICAgIH1cbiAgfVxuICBpZiAoZ2xvYmFscy5SZWZsZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgaWYgKCF2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYmFzaWMgPSAhZ2xvYmFscy5SZWZsZWN0LmRlZmluZVByb3BlcnR5KDEsICd0ZXN0JywgeyB2YWx1ZTogMSB9KTtcbiAgICAgIC8vIFwiZXh0ZW5zaWJsZVwiIGZhaWxzIG9uIEVkZ2UgMC4xMlxuICAgICAgdmFyIGV4dGVuc2libGUgPSB0eXBlb2YgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zICE9PSAnZnVuY3Rpb24nIHx8ICFnbG9iYWxzLlJlZmxlY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSwgJ3Rlc3QnLCB7fSk7XG4gICAgICByZXR1cm4gYmFzaWMgJiYgZXh0ZW5zaWJsZTtcbiAgICB9KSkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscy5SZWZsZWN0LCAnZGVmaW5lUHJvcGVydHknLCBSZWZsZWN0U2hpbXMuZGVmaW5lUHJvcGVydHkpO1xuICAgIH1cbiAgfVxuICBpZiAoZ2xvYmFscy5SZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgIGlmICghdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XG4gICAgICByZXR1cm4gZ2xvYmFscy5SZWZsZWN0LmNvbnN0cnVjdChmdW5jdGlvbiAoKSB7fSwgW10sIEYpIGluc3RhbmNlb2YgRjtcbiAgICB9KSkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscy5SZWZsZWN0LCAnY29uc3RydWN0JywgUmVmbGVjdFNoaW1zLmNvbnN0cnVjdCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKFN0cmluZyhuZXcgRGF0ZShOYU4pKSAhPT0gJ0ludmFsaWQgRGF0ZScpIHtcbiAgICB2YXIgZGF0ZVRvU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgdmFyIHNoaW1tZWREYXRlVG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciB2YWx1ZU9mID0gK3RoaXM7XG4gICAgICBpZiAodmFsdWVPZiAhPT0gdmFsdWVPZikge1xuICAgICAgICByZXR1cm4gJ0ludmFsaWQgRGF0ZSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gRVMuQ2FsbChkYXRlVG9TdHJpbmcsIHRoaXMpO1xuICAgIH07XG4gICAgb3ZlcnJpZGVOYXRpdmUoRGF0ZS5wcm90b3R5cGUsICd0b1N0cmluZycsIHNoaW1tZWREYXRlVG9TdHJpbmcpO1xuICB9XG5cbiAgLy8gQW5uZXggQiBIVE1MIG1ldGhvZHNcbiAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFkZGl0aW9uYWwtcHJvcGVydGllcy1vZi10aGUtc3RyaW5nLnByb3RvdHlwZS1vYmplY3RcbiAgdmFyIHN0cmluZ0hUTUxzaGltcyA9IHtcbiAgICBhbmNob3I6IGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTsgfSxcbiAgICBiaWc6IGZ1bmN0aW9uIGJpZygpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7IH0sXG4gICAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpOyB9LFxuICAgIGJvbGQ6IGZ1bmN0aW9uIGJvbGQoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTsgfSxcbiAgICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7IH0sXG4gICAgZm9udGNvbG9yOiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7IH0sXG4gICAgZm9udHNpemU6IGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpOyB9LFxuICAgIGl0YWxpY3M6IGZ1bmN0aW9uIGl0YWxpY3MoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTsgfSxcbiAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHVybCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTsgfSxcbiAgICBzbWFsbDogZnVuY3Rpb24gc21hbGwoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7IH0sXG4gICAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpOyB9LFxuICAgIHN1YjogZnVuY3Rpb24gc3ViKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTsgfSxcbiAgICBzdXA6IGZ1bmN0aW9uIHN1YigpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7IH1cbiAgfTtcbiAgX2ZvckVhY2goT2JqZWN0LmtleXMoc3RyaW5nSFRNTHNoaW1zKSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBtZXRob2QgPSBTdHJpbmcucHJvdG90eXBlW2tleV07XG4gICAgdmFyIHNob3VsZE92ZXJ3cml0ZSA9IGZhbHNlO1xuICAgIGlmIChFUy5Jc0NhbGxhYmxlKG1ldGhvZCkpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBfY2FsbChtZXRob2QsICcnLCAnIFwiICcpO1xuICAgICAgdmFyIHF1b3Rlc0NvdW50ID0gX2NvbmNhdChbXSwgb3V0cHV0Lm1hdGNoKC9cIi9nKSkubGVuZ3RoO1xuICAgICAgc2hvdWxkT3ZlcndyaXRlID0gb3V0cHV0ICE9PSBvdXRwdXQudG9Mb3dlckNhc2UoKSB8fCBxdW90ZXNDb3VudCA+IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZE92ZXJ3cml0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChzaG91bGRPdmVyd3JpdGUpIHtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFN0cmluZy5wcm90b3R5cGUsIGtleSwgc3RyaW5nSFRNTHNoaW1zW2tleV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIEpTT05zdHJpbmdpZmllc1N5bWJvbHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIE1pY3Jvc29mdCBFZGdlIHYwLjEyIHN0cmluZ2lmaWVzIFN5bWJvbHMgaW5jb3JyZWN0bHlcbiAgICBpZiAoIWhhc1N5bWJvbHMpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIFN5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICB2YXIgc3RyaW5naWZ5ID0gdHlwZW9mIEpTT04gPT09ICdvYmplY3QnICYmIHR5cGVvZiBKU09OLnN0cmluZ2lmeSA9PT0gJ2Z1bmN0aW9uJyA/IEpTT04uc3RyaW5naWZ5IDogbnVsbDtcbiAgICBpZiAoIXN0cmluZ2lmeSkgeyByZXR1cm4gZmFsc2U7IH0gLy8gSlNPTi5zdHJpbmdpZnkgaXMgbm90IHN1cHBvcnRlZFxuICAgIGlmICh0eXBlb2Ygc3RyaW5naWZ5KFN5bWJvbCgpKSAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHRydWU7IH0gLy8gU3ltYm9scyBzaG91bGQgYmVjb21lIGB1bmRlZmluZWRgXG4gICAgaWYgKHN0cmluZ2lmeShbU3ltYm9sKCldKSAhPT0gJ1tudWxsXScpIHsgcmV0dXJuIHRydWU7IH0gLy8gU3ltYm9scyBpbiBhcnJheXMgc2hvdWxkIGJlY29tZSBgbnVsbGBcbiAgICB2YXIgb2JqID0geyBhOiBTeW1ib2woKSB9O1xuICAgIG9ialtTeW1ib2woKV0gPSB0cnVlO1xuICAgIGlmIChzdHJpbmdpZnkob2JqKSAhPT0gJ3t9JykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2wtdmFsdWVkIGtleXMgKmFuZCogU3ltYm9sLXZhbHVlZCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBvbWl0dGVkXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KCkpO1xuICB2YXIgSlNPTnN0cmluZ2lmeUFjY2VwdHNPYmplY3RTeW1ib2wgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2hyb21lIDQ1IHRocm93cyBvbiBzdHJpbmdpZnlpbmcgb2JqZWN0IHN5bWJvbHNcbiAgICBpZiAoIWhhc1N5bWJvbHMpIHsgcmV0dXJuIHRydWU7IH0gLy8gU3ltYm9scyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShPYmplY3QoU3ltYm9sKCkpKSA9PT0gJ3t9JyAmJiBKU09OLnN0cmluZ2lmeShbT2JqZWN0KFN5bWJvbCgpKV0pID09PSAnW3t9XSc7XG4gIH0pO1xuICBpZiAoSlNPTnN0cmluZ2lmaWVzU3ltYm9scyB8fCAhSlNPTnN0cmluZ2lmeUFjY2VwdHNPYmplY3RTeW1ib2wpIHtcbiAgICB2YXIgb3JpZ1N0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5O1xuICAgIG92ZXJyaWRlTmF0aXZlKEpTT04sICdzdHJpbmdpZnknLCBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHJlcGxhY2VyO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJlcGxhY2VyID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBbdmFsdWVdO1xuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICB2YXIgcmVwbGFjZUZuID0gRVMuSXNDYWxsYWJsZShyZXBsYWNlcikgPyByZXBsYWNlciA6IG51bGw7XG4gICAgICAgIHZhciB3cmFwcGVkUmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSByZXBsYWNlRm4gPyBfY2FsbChyZXBsYWNlRm4sIHRoaXMsIGtleSwgdmFsKSA6IHZhbDtcbiAgICAgICAgICBpZiAodHlwZW9mIHBhcnNlZFZhbHVlICE9PSAnc3ltYm9sJykge1xuICAgICAgICAgICAgaWYgKFR5cGUuc3ltYm9sKHBhcnNlZFZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXNzaWduVG8oe30pKHBhcnNlZFZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFyZ3MucHVzaCh3cmFwcGVkUmVwbGFjZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlIHdyYXBwZWQgcmVwbGFjZXIgdGhhdCBoYW5kbGVzIGFuIGFycmF5IHJlcGxhY2VyP1xuICAgICAgICBhcmdzLnB1c2gocmVwbGFjZXIpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbMl0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdTdHJpbmdpZnkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZ2xvYmFscztcbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc3Byb3BlcnR5a2V5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENyZWF0ZURhdGFQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQ3JlYXRlRGF0YVByb3BlcnR5Jyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvSXNDYWxsYWJsZScpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyICRnZXRPd25OYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyICRnZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciAkY29uY2F0ID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuY29uY2F0Jyk7XG52YXIgJHJlZHVjZSA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnJlZHVjZScpO1xudmFyIGdldEFsbCA9ICRnZXRTeW1ib2xzID8gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gJGNvbmNhdCgkZ2V0T3duTmFtZXMob2JqKSwgJGdldFN5bWJvbHMob2JqKSk7XG59IDogJGdldE93bk5hbWVzO1xuXG52YXIgaXNFUzUgPSBJc0NhbGxhYmxlKCRnT1BEKSAmJiBJc0NhbGxhYmxlKCRnZXRPd25OYW1lcyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh2YWx1ZSkge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHZhbHVlKTtcblx0aWYgKCFpc0VTNSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcnMgcmVxdWlyZXMgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcicpO1xuXHR9XG5cblx0dmFyIE8gPSBUb09iamVjdCh2YWx1ZSk7XG5cdHJldHVybiAkcmVkdWNlKFxuXHRcdGdldEFsbChPKSxcblx0XHRmdW5jdGlvbiAoYWNjLCBrZXkpIHtcblx0XHRcdHZhciBkZXNjcmlwdG9yID0gJGdPUEQoTywga2V5KTtcblx0XHRcdGlmICh0eXBlb2YgZGVzY3JpcHRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0Q3JlYXRlRGF0YVByb3BlcnR5KGFjYywga2V5LCBkZXNjcmlwdG9yKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhY2M7XG5cdFx0fSxcblx0XHR7fVxuXHQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG5cdHZhciBvYmogPSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgdmFscyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKGhhcyhvYmosIGtleSkgJiYgJGlzRW51bWVyYWJsZShvYmosIGtleSkpIHtcblx0XHRcdHZhbHMucHVzaChvYmpba2V5XSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWxzO1xufTtcbiIsIi8qIGpzaGludCBicm93c2VyOnRydWVcbiAqXG4gKiB3aW5kb3ctbG9jYXRpb24tb3JpZ2luIC0gdmVyc2lvbiAwLjAuMVxuICogQWRkIHN1cHBvcnQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gKlxuICogQXV0aHJvcjogS3lsZSBXZWxzYnkgPGt5bGVAbWVreWxlLmNvbT5cbiAqIExpY2Vuc2U6IE1JVFxuICovXG5cbihmdW5jdGlvbihsb2NhdGlvbil7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFsb2NhdGlvbi5vcmlnaW4pIHtcbiAgICB2YXIgb3JpZ2luID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICYmIFwiOlwiICsgbG9jYXRpb24ucG9ydCk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIE1ha2UgaXQgbm9uIGVkaXRhYmxlXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobG9jYXRpb24sIFwib3JpZ2luXCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG9yaWdpblxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAvLyBJRSA8IDhcbiAgICAgIGxvY2F0aW9uLm9yaWdpbiA9IG9yaWdpbjtcbiAgICB9XG4gIH1cbn0pKHdpbmRvdy5sb2NhdGlvbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0ID09PSAnZnVuY3Rpb24nID8gU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCkge1xuXHR2YXIgTyA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG5cdHZhciBTID0gVG9TdHJpbmcoTyk7XG5cdHZhciBzdHJpbmdMZW5ndGggPSBUb0xlbmd0aChTLmxlbmd0aCk7XG5cdHZhciBmaWxsU3RyaW5nO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRmaWxsU3RyaW5nID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cdHZhciBmaWxsZXIgPSB0eXBlb2YgZmlsbFN0cmluZyA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IFRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuXHRpZiAoZmlsbGVyID09PSAnJykge1xuXHRcdGZpbGxlciA9ICcgJztcblx0fVxuXHR2YXIgaW50TWF4TGVuZ3RoID0gVG9MZW5ndGgobWF4TGVuZ3RoKTtcblx0aWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGgpIHtcblx0XHRyZXR1cm4gUztcblx0fVxuXHR2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcblx0d2hpbGUgKGZpbGxlci5sZW5ndGggPCBmaWxsTGVuKSB7XG5cdFx0dmFyIGZMZW4gPSBmaWxsZXIubGVuZ3RoO1xuXHRcdHZhciByZW1haW5pbmdDb2RlVW5pdHMgPSBmaWxsTGVuIC0gZkxlbjtcblx0XHRmaWxsZXIgKz0gZkxlbiA+IHJlbWFpbmluZ0NvZGVVbml0cyA/ICRzbGljZShmaWxsZXIsIDAsIHJlbWFpbmluZ0NvZGVVbml0cykgOiBmaWxsZXI7XG5cdH1cblxuXHR2YXIgdHJ1bmNhdGVkU3RyaW5nRmlsbGVyID0gZmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4gPyAkc2xpY2UoZmlsbGVyLCAwLCBmaWxsTGVuKSA6IGZpbGxlcjtcblx0cmV0dXJuIFMgKyB0cnVuY2F0ZWRTdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE1hdGggPSBHZXRJbnRyaW5zaWMoJyVNYXRoJScpO1xudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gJE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8ICRNYXRoLnBvdygyLCA1MykgLSAxO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IDAgKi9cbi8vIHRoZSBjb2RlIGlzIHN0cnVjdHVyZWQgdGhpcyB3YXkgc28gdGhhdCBidW5kbGVycyBjYW5cbi8vIGFsaWFzIG91dCBgaGFzLXN5bWJvbHNgIHRvIGAoKSA9PiB0cnVlYCBvciBgKCkgPT4gZmFsc2VgIGlmIHlvdXIgdGFyZ2V0XG4vLyBlbnZpcm9ubWVudHMnIFN5bWJvbCBjYXBhYmlsaXRpZXMgYXJlIGtub3duLCBhbmQgdGhlbiB1c2Vcbi8vIGRlYWQgY29kZSBlbGltaW5hdGlvbiBvbiB0aGUgcmVzdCBvZiB0aGlzIG1vZHVsZS5cbi8vXG4vLyBTaW1pbGFybHksIGBpc2FycmF5YCBjYW4gYmUgYWxpYXNlZCB0byBgQXJyYXkuaXNBcnJheWAgaWZcbi8vIGF2YWlsYWJsZSBpbiBhbGwgdGFyZ2V0IGVudmlyb25tZW50cy5cblxudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnaXMtYXJndW1lbnRzJyk7XG5cbmlmIChyZXF1aXJlKCdoYXMtc3ltYm9scycpKCkgfHwgcmVxdWlyZSgnaGFzLXN5bWJvbHMvc2hhbXMnKSgpKSB7XG5cdHZhciAkaXRlcmF0b3IgPSBTeW1ib2wuaXRlcmF0b3I7XG5cdC8vIFN5bWJvbCBpcyBhdmFpbGFibGUgbmF0aXZlbHkgb3Igc2hhbW1lZFxuXHQvLyBuYXRpdmVseTpcblx0Ly8gIC0gQ2hyb21lID49IDM4XG5cdC8vICAtIEVkZ2UgMTItMTQ/LCBFZGdlID49IDE1IGZvciBzdXJlXG5cdC8vICAtIEZGID49IDM2XG5cdC8vICAtIFNhZmFyaSA+PSA5XG5cdC8vICAtIG5vZGUgPj0gMC4xMlxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEl0ZXJhdG9yKGl0ZXJhYmxlKSB7XG5cdFx0Ly8gYWx0ZXJuYXRpdmVseSwgYGl0ZXJhYmxlWyRpdGVyYXRvcl0/LigpYFxuXHRcdGlmIChpdGVyYWJsZSAhPSBudWxsICYmIHR5cGVvZiBpdGVyYWJsZVskaXRlcmF0b3JdICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGl0ZXJhYmxlWyRpdGVyYXRvcl0oKTtcblx0XHR9XG5cdFx0aWYgKGlzQXJndW1lbnRzKGl0ZXJhYmxlKSkge1xuXHRcdFx0Ly8gYXJndW1lbnRzIG9iamVjdHMgbGFjayBTeW1ib2wuaXRlcmF0b3Jcblx0XHRcdC8vIC0gbm9kZSAwLjEyXG5cdFx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlWyRpdGVyYXRvcl0uY2FsbChpdGVyYWJsZSk7XG5cdFx0fVxuXHR9O1xufSBlbHNlIHtcblx0Ly8gU3ltYm9sIGlzIG5vdCBhdmFpbGFibGUsIG5hdGl2ZSBvciBzaGFtbWVkXG5cdHZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXHR2YXIgaXNTdHJpbmcgPSByZXF1aXJlKCdpcy1zdHJpbmcnKTtcblx0dmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xuXHR2YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblx0dmFyICRTZXQgPSBHZXRJbnRyaW5zaWMoJyVTZXQlJywgdHJ1ZSk7XG5cdHZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXHR2YXIgJGFycmF5UHVzaCA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnB1c2gnKTtcblx0dmFyICRjaGFyQ29kZUF0ID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQnKTtcblx0dmFyICRzdHJpbmdTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xuXG5cdHZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSBmdW5jdGlvbiBhZHZhbmNlU3RyaW5nSW5kZXgoUywgaW5kZXgpIHtcblx0XHR2YXIgbGVuZ3RoID0gUy5sZW5ndGg7XG5cdFx0aWYgKChpbmRleCArIDEpID49IGxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0XHR9XG5cblx0XHR2YXIgZmlyc3QgPSAkY2hhckNvZGVBdChTLCBpbmRleCk7XG5cdFx0aWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHZhciBzZWNvbmQgPSAkY2hhckNvZGVBdChTLCBpbmRleCArIDEpO1xuXHRcdGlmIChzZWNvbmQgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleCArIDI7XG5cdH07XG5cblx0dmFyIGdldEFycmF5SXRlcmF0b3IgPSBmdW5jdGlvbiBnZXRBcnJheUl0ZXJhdG9yKGFycmF5bGlrZSkge1xuXHRcdHZhciBpID0gMDtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0dmFyIGRvbmUgPSBpID49IGFycmF5bGlrZS5sZW5ndGg7XG5cdFx0XHRcdHZhciB2YWx1ZTtcblx0XHRcdFx0aWYgKCFkb25lKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBhcnJheWxpa2VbaV07XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZG9uZTogZG9uZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdHZhciBnZXROb25Db2xsZWN0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiBnZXROb25Db2xsZWN0aW9uSXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHRpZiAoaXNBcnJheShpdGVyYWJsZSkgfHwgaXNBcmd1bWVudHMoaXRlcmFibGUpKSB7XG5cdFx0XHRyZXR1cm4gZ2V0QXJyYXlJdGVyYXRvcihpdGVyYWJsZSk7XG5cdFx0fVxuXHRcdGlmIChpc1N0cmluZyhpdGVyYWJsZSkpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG5cdFx0XHRcdFx0dmFyIG5leHRJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChpdGVyYWJsZSwgaSk7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gJHN0cmluZ1NsaWNlKGl0ZXJhYmxlLCBpLCBuZXh0SW5kZXgpO1xuXHRcdFx0XHRcdGkgPSBuZXh0SW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRvbmU6IG5leHRJbmRleCA+IGl0ZXJhYmxlLmxlbmd0aCxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9O1xuXG5cdGlmICghJE1hcCAmJiAhJFNldCkge1xuXHRcdC8vIHRoZSBvbmx5IGxhbmd1YWdlIGl0ZXJhYmxlcyBhcmUgQXJyYXksIFN0cmluZywgYXJndW1lbnRzXG5cdFx0Ly8gLSBTYWZhcmkgPD0gNi4wXG5cdFx0Ly8gLSBDaHJvbWUgPCAzOFxuXHRcdC8vIC0gbm9kZSA8IDAuMTJcblx0XHQvLyAtIEZGIDwgMTNcblx0XHQvLyAtIElFIDwgMTFcblx0XHQvLyAtIEVkZ2UgPCAxMVxuXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnZXROb25Db2xsZWN0aW9uSXRlcmF0b3I7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gZWl0aGVyIE1hcCBvciBTZXQgYXJlIGF2YWlsYWJsZSwgYnV0IFN5bWJvbCBpcyBub3Rcblx0XHQvLyAtIGVzNi1zaGltIG9uIGFuIEVTNSBicm93c2VyXG5cdFx0Ly8gLSBTYWZhcmkgNi4yIChtYXliZSA2LjE/KVxuXHRcdC8vIC0gRkYgdlsxMywgMzYpXG5cdFx0Ly8gLSBJRSAxMVxuXHRcdC8vIC0gRWRnZSAxMVxuXHRcdC8vIC0gU2FmYXJpIHZbNiwgOSlcblxuXHRcdHZhciBpc01hcCA9IHJlcXVpcmUoJ2lzLW1hcCcpO1xuXHRcdHZhciBpc1NldCA9IHJlcXVpcmUoJ2lzLXNldCcpO1xuXG5cdFx0Ly8gRmlyZWZveCA+PSAyNywgSUUgMTEsIFNhZmFyaSA2LjIgLSA5LCBFZGdlIDExLCBlczYtc2hpbSBpbiBvbGRlciBlbnZzLCBhbGwgaGF2ZSBmb3JFYWNoXG5cdFx0dmFyICRtYXBGb3JFYWNoID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmZvckVhY2gnLCB0cnVlKTtcblx0XHR2YXIgJHNldEZvckVhY2ggPSBjYWxsQm91bmQoJ1NldC5wcm90b3R5cGUuZm9yRWFjaCcsIHRydWUpO1xuXHRcdGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXByb2Nlc3MudmVyc2lvbnMgfHwgIXByb2Nlc3MudmVyc2lvbnMubm9kZSkgeyAvLyBcImlmIGlzIG5vdCBub2RlXCJcblxuXHRcdFx0Ly8gRmlyZWZveCAxNyAtIDI2IGhhcyBgLml0ZXJhdG9yKClgLCB3aG9zZSBpdGVyYXRvciBgLm5leHQoKWAgZWl0aGVyXG5cdFx0XHQvLyByZXR1cm5zIGEgdmFsdWUsIG9yIHRocm93cyBhIFN0b3BJdGVyYXRpb24gb2JqZWN0LiBUaGVzZSBicm93c2Vyc1xuXHRcdFx0Ly8gZG8gbm90IGhhdmUgYW55IG90aGVyIG1lY2hhbmlzbSBmb3IgaXRlcmF0aW9uLlxuXHRcdFx0dmFyICRtYXBJdGVyYXRvciA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5pdGVyYXRvcicsIHRydWUpO1xuXHRcdFx0dmFyICRzZXRJdGVyYXRvciA9IGNhbGxCb3VuZCgnU2V0LnByb3RvdHlwZS5pdGVyYXRvcicsIHRydWUpO1xuXHRcdFx0dmFyIGdldFN0b3BJdGVyYXRpb25JdGVyYXRvciA9IGZ1bmN0aW9uIChpdGVyYXRvcikge1xuXHRcdFx0XHR2YXIgZG9uZSA9IGZhbHNlO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdGRvbmU6IGRvbmUsXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6IGRvbmUgPyB1bmRlZmluZWQgOiBpdGVyYXRvci5uZXh0KClcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0ZG9uZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0ZG9uZTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogdW5kZWZpbmVkXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0Ly8gRmlyZWZveCAyNy0zNSwgYW5kIHNvbWUgb2xkZXIgZXM2LXNoaW0gdmVyc2lvbnMsIHVzZSBhIHN0cmluZyBcIkBAaXRlcmF0b3JcIiBwcm9wZXJ0eVxuXHRcdC8vIHRoaXMgcmV0dXJucyBhIHByb3BlciBpdGVyYXRvciBvYmplY3QsIHNvIHdlIHNob3VsZCB1c2UgaXQgaW5zdGVhZCBvZiBmb3JFYWNoLlxuXHRcdC8vIG5ld2VyIGVzNi1zaGltIHZlcnNpb25zIHVzZSBhIHN0cmluZyBcIl9lczYtc2hpbSBpdGVyYXRvcl9cIiBwcm9wZXJ0eS5cblx0XHR2YXIgJG1hcEF0QXRJdGVyYXRvciA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5AQGl0ZXJhdG9yJywgdHJ1ZSkgfHwgY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLl9lczYtc2hpbSBpdGVyYXRvcl8nLCB0cnVlKTtcblx0XHR2YXIgJHNldEF0QXRJdGVyYXRvciA9IGNhbGxCb3VuZCgnU2V0LnByb3RvdHlwZS5AQGl0ZXJhdG9yJywgdHJ1ZSkgfHwgY2FsbEJvdW5kKCdTZXQucHJvdG90eXBlLl9lczYtc2hpbSBpdGVyYXRvcl8nLCB0cnVlKTtcblxuXHRcdHZhciBnZXRDb2xsZWN0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uSXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHRcdGlmIChpc01hcChpdGVyYWJsZSkpIHtcblx0XHRcdFx0aWYgKCRtYXBJdGVyYXRvcikge1xuXHRcdFx0XHRcdHJldHVybiBnZXRTdG9wSXRlcmF0aW9uSXRlcmF0b3IoJG1hcEl0ZXJhdG9yKGl0ZXJhYmxlKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCRtYXBBdEF0SXRlcmF0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEF0QXRJdGVyYXRvcihpdGVyYWJsZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCRtYXBGb3JFYWNoKSB7XG5cdFx0XHRcdFx0dmFyIGVudHJpZXMgPSBbXTtcblx0XHRcdFx0XHQkbWFwRm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKHYsIGspIHtcblx0XHRcdFx0XHRcdCRhcnJheVB1c2goZW50cmllcywgW2ssIHZdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gZ2V0QXJyYXlJdGVyYXRvcihlbnRyaWVzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGlzU2V0KGl0ZXJhYmxlKSkge1xuXHRcdFx0XHRpZiAoJHNldEl0ZXJhdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGdldFN0b3BJdGVyYXRpb25JdGVyYXRvcigkc2V0SXRlcmF0b3IoaXRlcmFibGUpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJHNldEF0QXRJdGVyYXRvcikge1xuXHRcdFx0XHRcdHJldHVybiAkc2V0QXRBdEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJHNldEZvckVhY2gpIHtcblx0XHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRcdFx0JHNldEZvckVhY2goaXRlcmFibGUsIGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdFx0XHQkYXJyYXlQdXNoKHZhbHVlcywgdik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmV0dXJuIGdldEFycmF5SXRlcmF0b3IodmFsdWVzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEl0ZXJhdG9yKGl0ZXJhYmxlKSB7XG5cdFx0XHRyZXR1cm4gZ2V0Q29sbGVjdGlvbkl0ZXJhdG9yKGl0ZXJhYmxlKSB8fCBnZXROb25Db2xsZWN0aW9uSXRlcmF0b3IoaXRlcmFibGUpO1xuXHRcdH07XG5cdH1cbn1cbiIsIihmdW5jdGlvbigpIHtcblx0dmFyIHRlc3RPYmplY3QgPSB7fTtcblxuXHRpZiAoIShPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgdGVzdE9iamVjdC5fX3Byb3RvX18pKSB7XG5cdFx0dmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG5cdFx0T2JqZWN0LmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdFx0XHRpZiAob2JqZWN0Ll9fcHJvdG9fXykge1xuXHRcdFx0XHRyZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZi5jYWxsKE9iamVjdCwgb2JqZWN0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJbnZva2UgPSByZXF1aXJlKCcuL0ludm9rZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9ybmV4dFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEl0ZXJhdG9yTmV4dChpdGVyYXRvciwgdmFsdWUpIHtcblx0dmFyIHJlc3VsdCA9IEludm9rZShpdGVyYXRvciwgJ25leHQnLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFtdIDogW3ZhbHVlXSk7XG5cdGlmIChUeXBlKHJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIG5leHQgbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCcuL1RvT2JqZWN0Jyk7XG5cbi8qKlxuICogNy4zLjIgR2V0ViAoViwgUClcbiAqIDEuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuICogMi4gTGV0IE8gYmUgVG9PYmplY3QoVikuXG4gKiAzLiBSZXR1cm5JZkFicnVwdChPKS5cbiAqIDQuIFJldHVybiBPLltbR2V0XV0oUCwgVikuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRWKFYsIFApIHtcblx0Ly8gNy4zLjIuMVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cblx0Ly8gNy4zLjIuMi0zXG5cdHZhciBPID0gVG9PYmplY3QoVik7XG5cblx0Ly8gNy4zLjIuNFxuXHRyZXR1cm4gT1tQXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjNcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb051bWJlcih2YWx1ZSkge1xuXHRyZXR1cm4gK3ZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmIChTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsKSB7XG5cdFx0dHJ5IHtcblx0XHRcdCcnLm1hdGNoQWxsKFJlZ0V4cC5wcm90b3R5cGUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG59O1xuIiwiLyogZ2xvYmFscyByZXF1ZXN0SWRsZUNhbGxiYWNrLCBjYW5jZWxJZGxlQ2FsbGJhY2sgKi9cbnZhciBmYWxsYmFjayA9IGZ1bmN0aW9uIChjYikge1xuICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGNiKHtcbiAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSlcbiAgICAgIH1cbiAgICB9KVxuICB9LCAxKVxufVxuXG52YXIgaXNTdXBwb3J0ZWQgPSAodHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2sgIT09ICd1bmRlZmluZWQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3VwcG9ydGVkID8gcmVxdWVzdElkbGVDYWxsYmFjayA6IGZhbGxiYWNrXG5tb2R1bGUuZXhwb3J0cy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBpc1N1cHBvcnRlZCA/IGNhbmNlbElkbGVDYWxsYmFjayA6IGNsZWFyVGltZW91dFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9JbnRlZ2VyID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Ub0ludGVnZXInKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTgvVG9MZW5ndGgnKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTgvVG9PYmplY3QnKTtcbnZhciBTYW1lVmFsdWVaZXJvID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9TYW1lVmFsdWVaZXJvJyk7XG52YXIgJGlzTmFOID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUnKTtcbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnaXMtc3RyaW5nJyk7XG5cbnZhciAkY2hhckF0ID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLmNoYXJBdCcpO1xudmFyICRpbmRleE9mID0gR2V0SW50cmluc2ljKCclQXJyYXkucHJvdG90eXBlLmluZGV4T2YlJyk7IC8vIFRPRE86IHVzZSBjYWxsQmluZC5hcHBseSB3aXRob3V0IGJyZWFraW5nIElFIDhcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50KSB7XG5cdHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IFRvSW50ZWdlcihhcmd1bWVudHNbMV0pIDogMDtcblx0aWYgKCRpbmRleE9mICYmICEkaXNOYU4oc2VhcmNoRWxlbWVudCkgJiYgJGlzRmluaXRlKGZyb21JbmRleCkgJiYgdHlwZW9mIHNlYXJjaEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuICRpbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPiAtMTtcblx0fVxuXG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBsZW5ndGggPSBUb0xlbmd0aChPLmxlbmd0aCk7XG5cdGlmIChsZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dmFyIGsgPSBmcm9tSW5kZXggPj0gMCA/IGZyb21JbmRleCA6IE1hdGgubWF4KDAsIGxlbmd0aCArIGZyb21JbmRleCk7XG5cdHdoaWxlIChrIDwgbGVuZ3RoKSB7XG5cdFx0aWYgKFNhbWVWYWx1ZVplcm8oc2VhcmNoRWxlbWVudCwgaXNTdHJpbmcoTykgPyAkY2hhckF0KE8sIGspIDogT1trXSkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRrICs9IDE7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYXQoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRBcnJheS5wcm90b3R5cGUsXG5cdFx0eyBmbGF0OiBwb2x5ZmlsbCB9LFxuXHRcdHsgZmxhdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXQgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGUgPyBNYXAgOiBudWxsO1xudmFyICRTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGUgPyBTZXQgOiBudWxsO1xuXG52YXIgZXhwb3J0ZWQ7XG5cbmlmICghJFNldCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc1NldCh4KSB7XG5cdFx0Ly8gYFNldGAgaXMgbm90IHByZXNlbnQgaW4gdGhpcyBlbnZpcm9ubWVudC5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbnZhciAkbWFwSGFzID0gJE1hcCA/IE1hcC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciAkc2V0SGFzID0gJFNldCA/IFNldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbmlmICghZXhwb3J0ZWQgJiYgISRzZXRIYXMpIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cdGV4cG9ydGVkID0gZnVuY3Rpb24gaXNTZXQoeCkge1xuXHRcdC8vIGBTZXRgIGRvZXMgbm90IGhhdmUgYSBgaGFzYCBtZXRob2Rcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQgfHwgZnVuY3Rpb24gaXNTZXQoeCkge1xuXHRpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0JHNldEhhcy5jYWxsKHgpO1xuXHRcdGlmICgkbWFwSGFzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQkbWFwSGFzLmNhbGwoeCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geCBpbnN0YW5jZW9mICRTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVQcm9taXNlKCkge1xuXHRpZiAodHlwZW9mIFByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgcmVxdWlyZXMgYSBnbG9iYWwgYFByb21pc2VgIGJlIGF2YWlsYWJsZS4nKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ29iamVjdCcgfHwgIWdsb2JhbCB8fCBnbG9iYWwuTWF0aCAhPT0gTWF0aCB8fCBnbG9iYWwuQXJyYXkgIT09IEFycmF5KSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdHJldHVybiBnbG9iYWw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQ2FsbCcpO1xudmFyIEdldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvR2V0Jyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXRNZXRob2QnKTtcbnZhciBJc1JlZ0V4cCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvSXNSZWdFeHAnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIGZsYWdzR2V0dGVyID0gcmVxdWlyZSgncmVnZXhwLnByb3RvdHlwZS5mbGFncycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpO1xuXG52YXIgcmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwtcmVnZXhwLW1hdGNoYWxsJyk7XG5cbnZhciBnZXRNYXRjaGVyID0gZnVuY3Rpb24gZ2V0TWF0Y2hlcihyZWdleHApIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHR2YXIgbWF0Y2hlclBvbHlmaWxsID0gcmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCgpO1xuXHRpZiAoaGFzU3ltYm9scyAmJiB0eXBlb2YgU3ltYm9sLm1hdGNoQWxsID09PSAnc3ltYm9sJykge1xuXHRcdHZhciBtYXRjaGVyID0gR2V0TWV0aG9kKHJlZ2V4cCwgU3ltYm9sLm1hdGNoQWxsKTtcblx0XHRpZiAobWF0Y2hlciA9PT0gUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wubWF0Y2hBbGxdICYmIG1hdGNoZXIgIT09IG1hdGNoZXJQb2x5ZmlsbCkge1xuXHRcdFx0cmV0dXJuIG1hdGNoZXJQb2x5ZmlsbDtcblx0XHR9XG5cdFx0cmV0dXJuIG1hdGNoZXI7XG5cdH1cblx0Ly8gZmFsbGJhY2sgZm9yIHByZS1TeW1ib2wubWF0Y2hBbGwgZW52aXJvbm1lbnRzXG5cdGlmIChJc1JlZ0V4cChyZWdleHApKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXJQb2x5ZmlsbDtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcblx0dmFyIE8gPSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuXG5cdGlmICh0eXBlb2YgcmVnZXhwICE9PSAndW5kZWZpbmVkJyAmJiByZWdleHAgIT09IG51bGwpIHtcblx0XHR2YXIgaXNSZWdFeHAgPSBJc1JlZ0V4cChyZWdleHApO1xuXHRcdGlmIChpc1JlZ0V4cCkge1xuXHRcdFx0Ly8gd29ya2Fyb3VuZCBmb3Igb2xkZXIgZW5naW5lcyB0aGF0IGxhY2sgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xuXHRcdFx0dmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiByZWdleHAgPyBHZXQocmVnZXhwLCAnZmxhZ3MnKSA6IGZsYWdzR2V0dGVyKHJlZ2V4cCk7XG5cdFx0XHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGZsYWdzKTtcblx0XHRcdGlmICgkaW5kZXhPZihUb1N0cmluZyhmbGFncyksICdnJykgPCAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ21hdGNoQWxsIHJlcXVpcmVzIGEgZ2xvYmFsIHJlZ3VsYXIgZXhwcmVzc2lvbicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBtYXRjaGVyID0gZ2V0TWF0Y2hlcihyZWdleHApO1xuXHRcdGlmICh0eXBlb2YgbWF0Y2hlciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBDYWxsKG1hdGNoZXIsIHJlZ2V4cCwgW09dKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgUyA9IFRvU3RyaW5nKE8pO1xuXHQvLyB2YXIgcnggPSBSZWdFeHBDcmVhdGUocmVnZXhwLCAnZycpO1xuXHR2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcblx0cmV0dXJuIENhbGwoZ2V0TWF0Y2hlcihyeCksIHJ4LCBbU10pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEVTNVRvSW50ZWdlciA9IHJlcXVpcmUoJy4uLzUvVG9JbnRlZ2VyJyk7XG5cbnZhciBUb051bWJlciA9IHJlcXVpcmUoJy4vVG9OdW1iZXInKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0cmV0dXJuIEVTNVRvSW50ZWdlcihudW1iZXIpO1xufTtcbiIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIHByZWRpY2F0ZXMgPSB7XG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0eS1kZXNjcmlwdG9yLXNwZWNpZmljYXRpb24tdHlwZVxuXHQnUHJvcGVydHkgRGVzY3JpcHRvcic6IGZ1bmN0aW9uIGlzUHJvcGVydHlEZXNjcmlwdG9yKFR5cGUsIERlc2MpIHtcblx0XHRpZiAoVHlwZShEZXNjKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIGFsbG93ZWQgPSB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbR2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbU2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IHRydWUsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gRGVzYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0XHRpZiAoaGFzKERlc2MsIGtleSkgJiYgIWFsbG93ZWRba2V5XSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGlzRGF0YSA9IGhhcyhEZXNjLCAnW1tWYWx1ZV1dJyk7XG5cdFx0dmFyIElzQWNjZXNzb3IgPSBoYXMoRGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoRGVzYywgJ1tbU2V0XV0nKTtcblx0XHRpZiAoaXNEYXRhICYmIElzQWNjZXNzb3IpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQcm9wZXJ0eSBEZXNjcmlwdG9ycyBtYXkgbm90IGJlIGJvdGggYWNjZXNzb3IgYW5kIGRhdGEgZGVzY3JpcHRvcnMnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzZXJ0UmVjb3JkKFR5cGUsIHJlY29yZFR5cGUsIGFyZ3VtZW50TmFtZSwgdmFsdWUpIHtcblx0dmFyIHByZWRpY2F0ZSA9IHByZWRpY2F0ZXNbcmVjb3JkVHlwZV07XG5cdGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigndW5rbm93biByZWNvcmQgdHlwZTogJyArIHJlY29yZFR5cGUpO1xuXHR9XG5cdGlmICghcHJlZGljYXRlKFR5cGUsIHZhbHVlKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKGFyZ3VtZW50TmFtZSArICcgbXVzdCBiZSBhICcgKyByZWNvcmRUeXBlKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaGVscGVycy9nZXRJdGVyYXRvck1ldGhvZCcpO1xudmFyIEFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vQWR2YW5jZVN0cmluZ0luZGV4Jyk7XG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldE1ldGhvZCA9IHJlcXVpcmUoJy4vR2V0TWV0aG9kJyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldGl0ZXJhdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SXRlcmF0b3Iob2JqLCBtZXRob2QpIHtcblx0dmFyIGFjdHVhbE1ldGhvZCA9IG1ldGhvZDtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdFx0YWN0dWFsTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoXG5cdFx0XHR7XG5cdFx0XHRcdEFkdmFuY2VTdHJpbmdJbmRleDogQWR2YW5jZVN0cmluZ0luZGV4LFxuXHRcdFx0XHRHZXRNZXRob2Q6IEdldE1ldGhvZCxcblx0XHRcdFx0SXNBcnJheTogSXNBcnJheSxcblx0XHRcdFx0VHlwZTogVHlwZVxuXHRcdFx0fSxcblx0XHRcdG9ialxuXHRcdCk7XG5cdH1cblx0dmFyIGl0ZXJhdG9yID0gQ2FsbChhY3R1YWxNZXRob2QsIG9iaik7XG5cdGlmIChUeXBlKGl0ZXJhdG9yKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHRyZXR1cm4gaXRlcmF0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgcmVnZXhFeGVjID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKSgnUmVnRXhwLnByb3RvdHlwZS5leGVjJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcmVnZXhwZXhlY1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFJlZ0V4cEV4ZWMoUiwgUykge1xuXHRpZiAoVHlwZShSKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFJgIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBTYCBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdH1cblx0dmFyIGV4ZWMgPSBHZXQoUiwgJ2V4ZWMnKTtcblx0aWYgKElzQ2FsbGFibGUoZXhlYykpIHtcblx0XHR2YXIgcmVzdWx0ID0gQ2FsbChleGVjLCBSLCBbU10pO1xuXHRcdGlmIChyZXN1bHQgPT09IG51bGwgfHwgVHlwZShyZXN1bHQpID09PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiZXhlY1wiIG1ldGhvZCBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gT2JqZWN0Jyk7XG5cdH1cblx0cmV0dXJuIHJlZ2V4RXhlYyhSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgIT09IGE7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgISRpc05hTih4KSAmJiB4ICE9PSBJbmZpbml0eSAmJiB4ICE9PSAtSW5maW5pdHk7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QudmFsdWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LnZhbHVlcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIi8qIVxuICogaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG4gKiBAbGljZW5zZSBlczUtc2hpbSBDb3B5cmlnaHQgMjAwOS0yMDIwIGJ5IGNvbnRyaWJ1dG9ycywgTUlUIExpY2Vuc2VcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbi8vIHZpbTogdHM9NCBzdHM9NCBzdz00IGV4cGFuZHRhYlxuXG4vLyBBZGQgc2VtaWNvbG9uIHRvIHByZXZlbnQgSUlGRSBmcm9tIGJlaW5nIHBhc3NlZCBhcyBhcmd1bWVudCB0byBjb25jYXRlbmF0ZWQgY29kZS5cbjtcblxuLy8gVU1EIChVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24pXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci90ZW1wbGF0ZXMvcmV0dXJuRXhwb3J0cy5qc1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyogZ2xvYmFsIGRlZmluZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQnJpbmdzIGFuIGVudmlyb25tZW50IGFzIGNsb3NlIHRvIEVDTUFTY3JpcHQgNSBjb21wbGlhbmNlXG4gICAgICogYXMgaXMgcG9zc2libGUgd2l0aCB0aGUgZmFjaWxpdGllcyBvZiBlcnN0d2hpbGUgZW5naW5lcy5cbiAgICAgKlxuICAgICAqIEFubm90YXRlZCBFUzU6IGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8gKHNwZWNpZmljIGxpbmtzIGJlbG93KVxuICAgICAqIEVTNSBTcGVjOiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvcHVibGljYXRpb25zL2ZpbGVzL0VDTUEtU1QvRWNtYS0yNjIucGRmXG4gICAgICogUmVxdWlyZWQgcmVhZGluZzogaHR0cDovL2phdmFzY3JpcHR3ZWJsb2cud29yZHByZXNzLmNvbS8yMDExLzEyLzA1L2V4dGVuZGluZy1qYXZhc2NyaXB0LW5hdGl2ZXMvXG4gICAgICovXG5cbiAgICAvLyBTaG9ydGN1dCB0byBhbiBvZnRlbiBhY2Nlc3NlZCBwcm9wZXJ0aWVzLCBpbiBvcmRlciB0byBhdm9pZCBtdWx0aXBsZVxuICAgIC8vIGRlcmVmZXJlbmNlIHRoYXQgY29zdHMgdW5pdmVyc2FsbHkuIFRoaXMgYWxzbyBob2xkcyBhIHJlZmVyZW5jZSB0byBrbm93bi1nb29kXG4gICAgLy8gZnVuY3Rpb25zLlxuICAgIHZhciAkQXJyYXkgPSBBcnJheTtcbiAgICB2YXIgQXJyYXlQcm90b3R5cGUgPSAkQXJyYXkucHJvdG90eXBlO1xuICAgIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICAgIHZhciBPYmplY3RQcm90b3R5cGUgPSAkT2JqZWN0LnByb3RvdHlwZTtcbiAgICB2YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG4gICAgdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gJEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgICB2YXIgJFN0cmluZyA9IFN0cmluZztcbiAgICB2YXIgU3RyaW5nUHJvdG90eXBlID0gJFN0cmluZy5wcm90b3R5cGU7XG4gICAgdmFyICROdW1iZXIgPSBOdW1iZXI7XG4gICAgdmFyIE51bWJlclByb3RvdHlwZSA9ICROdW1iZXIucHJvdG90eXBlO1xuICAgIHZhciBhcnJheV9zbGljZSA9IEFycmF5UHJvdG90eXBlLnNsaWNlO1xuICAgIHZhciBhcnJheV9zcGxpY2UgPSBBcnJheVByb3RvdHlwZS5zcGxpY2U7XG4gICAgdmFyIGFycmF5X3B1c2ggPSBBcnJheVByb3RvdHlwZS5wdXNoO1xuICAgIHZhciBhcnJheV91bnNoaWZ0ID0gQXJyYXlQcm90b3R5cGUudW5zaGlmdDtcbiAgICB2YXIgYXJyYXlfY29uY2F0ID0gQXJyYXlQcm90b3R5cGUuY29uY2F0O1xuICAgIHZhciBhcnJheV9qb2luID0gQXJyYXlQcm90b3R5cGUuam9pbjtcbiAgICB2YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG4gICAgdmFyIGFwcGx5ID0gRnVuY3Rpb25Qcm90b3R5cGUuYXBwbHk7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4O1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbjtcblxuICAgIC8vIEhhdmluZyBhIHRvU3RyaW5nIGxvY2FsIHZhcmlhYmxlIG5hbWUgYnJlYWtzIGluIE9wZXJhIHNvIHVzZSB0b19zdHJpbmcuXG4gICAgdmFyIHRvX3N0cmluZyA9IE9iamVjdFByb3RvdHlwZS50b1N0cmluZztcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG9uZS12YXItZGVjbGFyYXRpb24tcGVyLWxpbmUsIG5vLXJlZGVjbGFyZSwgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cbiAgICB2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuICAgIHZhciBpc0NhbGxhYmxlOyAvKiBpbmxpbmVkIGZyb20gaHR0cHM6Ly9ucG1qcy5jb20vaXMtY2FsbGFibGUgKi8gdmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzcyAvLCBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRm4odmFsdWUpIHsgdHJ5IHsgdmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTsgdmFyIHNpbmdsZVN0cmlwcGVkID0gZm5TdHIucmVwbGFjZSgvXFwvXFwvLipcXG4vZywgJycpOyB2YXIgbXVsdGlTdHJpcHBlZCA9IHNpbmdsZVN0cmlwcGVkLnJlcGxhY2UoL1xcL1xcKlsuXFxzXFxTXSpcXCpcXC8vZywgJycpOyB2YXIgc3BhY2VTdHJpcHBlZCA9IG11bHRpU3RyaXBwZWQucmVwbGFjZSgvXFxuL21nLCAnICcpLnJlcGxhY2UoLyB7Mn0vZywgJyAnKTsgcmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChzcGFjZVN0cmlwcGVkKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IC8qIG5vdCBhIGZ1bmN0aW9uICovIH0gfSwgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSkgeyB0cnkgeyBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0gZm5Ub1N0ci5jYWxsKHZhbHVlKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0sIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nLCBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsIGlzQ2FsbGFibGUgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7IGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9IGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gaWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH0gaWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9IHZhciBzdHJDbGFzcyA9IHRvX3N0cmluZy5jYWxsKHZhbHVlKTsgcmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzczsgfTtcblxuICAgIHZhciBpc1JlZ2V4OyAvKiBpbmxpbmVkIGZyb20gaHR0cHM6Ly9ucG1qcy5jb20vaXMtcmVnZXggKi8gdmFyIHJlZ2V4RXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYywgdHJ5UmVnZXhFeGVjID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7IHRyeSB7IHJlZ2V4RXhlYy5jYWxsKHZhbHVlKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0sIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJzsgaXNSZWdleCA9IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHsgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9IHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeVJlZ2V4RXhlYyh2YWx1ZSkgOiB0b19zdHJpbmcuY2FsbCh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7IH07XG4gICAgdmFyIGlzU3RyaW5nOyAvKiBpbmxpbmVkIGZyb20gaHR0cHM6Ly9ucG1qcy5jb20vaXMtc3RyaW5nICovIHZhciBzdHJWYWx1ZSA9IFN0cmluZy5wcm90b3R5cGUudmFsdWVPZiwgdHJ5U3RyaW5nT2JqZWN0ID0gZnVuY3Rpb24gdHJ5U3RyaW5nT2JqZWN0KHZhbHVlKSB7IHRyeSB7IHN0clZhbHVlLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgc3RyaW5nQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJzsgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkgeyBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgeyByZXR1cm4gdHJ1ZTsgfSBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gcmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5U3RyaW5nT2JqZWN0KHZhbHVlKSA6IHRvX3N0cmluZy5jYWxsKHZhbHVlKSA9PT0gc3RyaW5nQ2xhc3M7IH07XG4gICAgLyogZXNsaW50LWVuYWJsZSBvbmUtdmFyLWRlY2xhcmF0aW9uLXBlci1saW5lLCBuby1yZWRlY2xhcmUsIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lICovXG5cbiAgICAvKiBpbmxpbmVkIGZyb20gaHR0cDovL25wbWpzLmNvbS9kZWZpbmUtcHJvcGVydGllcyAqL1xuICAgIHZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIF8gaW4gb2JqKSB7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93VW51c2VkVmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iai54ID09PSBvYmo7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBFUzMgKi9cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0oKSk7XG4gICAgdmFyIGRlZmluZVByb3BlcnRpZXMgPSAoZnVuY3Rpb24gKGhhcykge1xuICAgICAgICAvLyBEZWZpbmUgY29uZmlndXJhYmxlLCB3cml0YWJsZSwgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BzXG4gICAgICAgIC8vIGlmIHRoZXkgZG9uJ3QgZXhpc3QuXG4gICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eTtcbiAgICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgbWV0aG9kLCBmb3JjZUFzc2lnbikge1xuICAgICAgICAgICAgICAgIGlmICghZm9yY2VBc3NpZ24gJiYgKG5hbWUgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWV0aG9kXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBtZXRob2QsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqZWN0W25hbWVdID0gbWV0aG9kOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzLmNhbGwobWFwLCBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIG1hcFtuYW1lXSwgZm9yY2VBc3NpZ24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KE9iamVjdFByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSkpO1xuXG4gICAgLy9cbiAgICAvLyBVdGlsXG4gICAgLy8gPT09PT09XG4gICAgLy9cblxuICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCAvaGVscGVycy9pc1ByaW1pdGl2ZSAqL1xuICAgIHZhciBpc1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGlucHV0KSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IG51bGwgfHwgKHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICdmdW5jdGlvbicpO1xuICAgIH07XG5cbiAgICB2YXIgaXNBY3R1YWxOYU4gPSAkTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzQWN0dWFsTmFOKHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT09IHg7XG4gICAgfTtcblxuICAgIHZhciBFUyA9IHtcbiAgICAgICAgLy8gRVM1IDkuNFxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3g5LjRcbiAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvSW50ZWdlciAqL1xuICAgICAgICBUb0ludGVnZXI6IGZ1bmN0aW9uIFRvSW50ZWdlcihudW0pIHtcbiAgICAgICAgICAgIHZhciBuID0gK251bTtcbiAgICAgICAgICAgIGlmIChpc0FjdHVhbE5hTihuKSkge1xuICAgICAgICAgICAgICAgIG4gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09ICgxIC8gMCkgJiYgbiAhPT0gLSgxIC8gMCkpIHtcbiAgICAgICAgICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub1ByaW1pdGl2ZSAqL1xuICAgICAgICBUb1ByaW1pdGl2ZTogZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciB2YWwsIHZhbHVlT2YsIHRvU3RyO1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlT2YgPSBpbnB1dC52YWx1ZU9mO1xuICAgICAgICAgICAgaWYgKGlzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZU9mLmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9TdHIgPSBpbnB1dC50b1N0cmluZztcbiAgICAgICAgICAgIGlmIChpc0NhbGxhYmxlKHRvU3RyKSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHRvU3RyLmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEVTNSA5LjlcbiAgICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4OS45XG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9PYmplY3QgKi9cbiAgICAgICAgVG9PYmplY3Q6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICBpZiAobyA9PSBudWxsKSB7IC8vIHRoaXMgbWF0Y2hlcyBib3RoIG51bGwgYW5kIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgbyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJE9iamVjdChvKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvVWludDMyICovXG4gICAgICAgIFRvVWludDMyOiBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA+Pj4gMDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvL1xuICAgIC8vIEZ1bmN0aW9uXG4gICAgLy8gPT09PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVMtNSAxNS4zLjQuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbiAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKHRoYXQpIHsgLy8gLmxlbmd0aCBpcyAxXG4gICAgICAgICAgICAvLyAxLiBMZXQgVGFyZ2V0IGJlIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICAvLyAyLiBJZiBJc0NhbGxhYmxlKFRhcmdldCkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDMuIExldCBBIGJlIGEgbmV3IChwb3NzaWJseSBlbXB0eSkgaW50ZXJuYWwgbGlzdCBvZiBhbGwgb2YgdGhlXG4gICAgICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAgICAgLy8gWFhYIHNsaWNlZEFyZ3Mgd2lsbCBzdGFuZCBpbiBmb3IgXCJBXCIgaWYgdXNlZFxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vIGZvciBub3JtYWwgY2FsbFxuICAgICAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAgICAgLy8gMTEuIFNldCB0aGUgW1tQcm90b3R5cGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIHRvIHRoZSBzdGFuZGFyZFxuICAgICAgICAgICAgLy8gICBidWlsdC1pbiBGdW5jdGlvbiBwcm90b3R5cGUgb2JqZWN0IGFzIHNwZWNpZmllZCBpbiAxNS4zLjMuMS5cbiAgICAgICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgICAgICAvLyAgIDE1LjMuNC41LjEuXG4gICAgICAgICAgICAvLyAxMy4gU2V0IHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgICAgICAvLyAxNC4gU2V0IHRoZSBbW0hhc0luc3RhbmNlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMy5cbiAgICAgICAgICAgIHZhciBib3VuZDtcbiAgICAgICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDE1LjMuNC41LjIgW1tDb25zdHJ1Y3RdXVxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gRiB0aGF0IHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBhcmd1bWVudHMgRXh0cmFBcmdzLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgICAgICAvLyAgIGludGVybmFsIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBJZiB0YXJnZXQgaGFzIG5vIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLCBhXG4gICAgICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIExldCBib3VuZEFyZ3MgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kQXJnc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbGlzdCBib3VuZEFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgZm9sbG93ZWQgYnkgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbWV0aG9kIG9mIHRhcmdldCBwcm92aWRpbmcgYXJncyBhcyB0aGUgYXJndW1lbnRzLlxuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhcHBseS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X2NvbmNhdC5jYWxsKGFyZ3MsIGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMTUuMy40LjUuMSBbW0NhbGxdXVxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2Qgb2YgYSBmdW5jdGlvbiBvYmplY3QsIEYsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB2YWx1ZSBhbmQgYSBsaXN0IG9mIGFyZ3VtZW50cyBFeHRyYUFyZ3MsIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RlcHMgYXJlIHRha2VuOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBMZXQgYm91bmRUaGlzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZFRoaXNdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbGlzdCBib3VuZEFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgZm9sbG93ZWQgYnkgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBvZiB0YXJnZXQgcHJvdmlkaW5nIGJvdW5kVGhpcyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm92aWRpbmcgYXJncyBhcyB0aGUgYXJndW1lbnRzLlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcHBseS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X2NvbmNhdC5jYWxsKGFyZ3MsIGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gMTUuIElmIHRoZSBbW0NsYXNzXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgVGFyZ2V0IGlzIFwiRnVuY3Rpb25cIiwgdGhlblxuICAgICAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgICAgIC8vICAgICBiLiBTZXQgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byBlaXRoZXIgMCBvciBMLCB3aGljaGV2ZXIgaXNcbiAgICAgICAgICAgIC8vICAgICAgIGxhcmdlci5cbiAgICAgICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAgICAgLy8gICBzcGVjaWZpZWQgaW4gMTUuMy41LjEuXG4gICAgICAgICAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcnJheV9wdXNoLmNhbGwoYm91bmRBcmdzLCAnJCcgKyBpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAgICAgLy8gd2F5IHRvIHNldCB0aGUgbGVuZ3RoIHByb3BlcnR5IG9mIGEgZnVuY3Rpb24uXG4gICAgICAgICAgICAvLyBJbiBlbnZpcm9ubWVudHMgd2hlcmUgQ29udGVudCBTZWN1cml0eSBQb2xpY2llcyBlbmFibGVkIChDaHJvbWUgZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgICAgICAvLyBIb3dldmVyIGluIGFsbCBvZiB0aGVzZSBlbnZpcm9ubWVudHMgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZXhpc3RzXG4gICAgICAgICAgICAvLyBhbmQgc28gdGhpcyBjb2RlIHdpbGwgbmV2ZXIgYmUgZXhlY3V0ZWQuXG4gICAgICAgICAgICBib3VuZCA9ICRGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGFycmF5X2pvaW4uY2FsbChib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIGRhbmdsaW5nIHJlZmVyZW5jZXMuXG4gICAgICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ET1xuICAgICAgICAgICAgLy8gMTguIFNldCB0aGUgW1tFeHRlbnNpYmxlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiB0byB0cnVlLlxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyAxOS4gTGV0IHRocm93ZXIgYmUgdGhlIFtbVGhyb3dUeXBlRXJyb3JdXSBmdW5jdGlvbiBPYmplY3QgKDEzLjIuMykuXG4gICAgICAgICAgICAvLyAyMC4gQ2FsbCB0aGUgW1tEZWZpbmVPd25Qcm9wZXJ0eV1dIGludGVybmFsIG1ldGhvZCBvZiBGIHdpdGhcbiAgICAgICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgICAgIC8vICAgdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sIGFuZFxuICAgICAgICAgICAgLy8gICBmYWxzZS5cbiAgICAgICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAgICAgLy8gICBhcmd1bWVudHMgXCJhcmd1bWVudHNcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLFxuICAgICAgICAgICAgLy8gICBbW1NldF1dOiB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSxcbiAgICAgICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyBOT1RFIEZ1bmN0aW9uIG9iamVjdHMgY3JlYXRlZCB1c2luZyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBkbyBub3RcbiAgICAgICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgICAgICAvLyBbW1Njb3BlXV0gaW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgICAgICAgIC8vIFhYWCBjYW4ndCBkZWxldGUgcHJvdG90eXBlIGluIHB1cmUtanMuXG5cbiAgICAgICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgICAgIHJldHVybiBib3VuZDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gX1BsZWFzZSBub3RlOiBTaG9ydGN1dHMgYXJlIGRlZmluZWQgYWZ0ZXIgYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBhcyB3ZVxuICAgIC8vIHVzZSBpdCBpbiBkZWZpbmluZyBzaG9ydGN1dHMuXG4gICAgdmFyIG93bnMgPSBjYWxsLmJpbmQoT2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiAgICB2YXIgdG9TdHIgPSBjYWxsLmJpbmQoT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICB2YXIgYXJyYXlTbGljZSA9IGNhbGwuYmluZChhcnJheV9zbGljZSk7XG4gICAgdmFyIGFycmF5U2xpY2VBcHBseSA9IGFwcGx5LmJpbmQoYXJyYXlfc2xpY2UpO1xuICAgIC8qIGdsb2JhbHMgZG9jdW1lbnQgKi9cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFycmF5U2xpY2UoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ0FycmF5U2xpY2UgPSBhcnJheVNsaWNlO1xuICAgICAgICAgICAgdmFyIG9yaWdBcnJheVNsaWNlQXBwbHkgPSBhcnJheVNsaWNlQXBwbHk7XG4gICAgICAgICAgICBhcnJheVNsaWNlID0gZnVuY3Rpb24gYXJyYXlTbGljZUlFKGFycikge1xuICAgICAgICAgICAgICAgIHZhciByID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJbaV0gPSBhcnJbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnQXJyYXlTbGljZUFwcGx5KHIsIG9yaWdBcnJheVNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFycmF5U2xpY2VBcHBseSA9IGZ1bmN0aW9uIGFycmF5U2xpY2VBcHBseUlFKGFyciwgYXJncykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnQXJyYXlTbGljZUFwcGx5KGFycmF5U2xpY2UoYXJyKSwgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBzdHJTbGljZSA9IGNhbGwuYmluZChTdHJpbmdQcm90b3R5cGUuc2xpY2UpO1xuICAgIHZhciBzdHJTcGxpdCA9IGNhbGwuYmluZChTdHJpbmdQcm90b3R5cGUuc3BsaXQpO1xuICAgIHZhciBzdHJJbmRleE9mID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5pbmRleE9mKTtcbiAgICB2YXIgcHVzaENhbGwgPSBjYWxsLmJpbmQoYXJyYXlfcHVzaCk7XG4gICAgdmFyIGlzRW51bSA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICAgIHZhciBhcnJheVNvcnQgPSBjYWxsLmJpbmQoQXJyYXlQcm90b3R5cGUuc29ydCk7XG5cbiAgICAvL1xuICAgIC8vIEFycmF5XG4gICAgLy8gPT09PT1cbiAgICAvL1xuXG4gICAgdmFyIGlzQXJyYXkgPSAkQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xM1xuICAgIC8vIFJldHVybiBsZW4rYXJnQ291bnQuXG4gICAgLy8gW2J1Z2ZpeCwgaWVsdDhdXG4gICAgLy8gSUUgPCA4IGJ1ZzogW10udW5zaGlmdCgwKSA9PT0gdW5kZWZpbmVkIGJ1dCBzaG91bGQgYmUgXCIxXCJcbiAgICB2YXIgaGFzVW5zaGlmdFJldHVyblZhbHVlQnVnID0gW10udW5zaGlmdCgwKSAhPT0gMTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHVuc2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFycmF5X3Vuc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH0sIGhhc1Vuc2hpZnRSZXR1cm5WYWx1ZUJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNC4zLjJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjMuMlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXlcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKCRBcnJheSwgeyBpc0FycmF5OiBpc0FycmF5IH0pO1xuXG4gICAgLy8gVGhlIElzQ2FsbGFibGUoKSBjaGVjayBpbiB0aGUgQXJyYXkgZnVuY3Rpb25zXG4gICAgLy8gaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhIHN0cmljdCBjaGVjayBvbiB0aGVcbiAgICAvLyBpbnRlcm5hbCBjbGFzcyBvZiB0aGUgb2JqZWN0IHRvIHRyYXAgY2FzZXMgd2hlcmVcbiAgICAvLyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gd2FzIGFjdHVhbGx5IGEgcmVndWxhclxuICAgIC8vIGV4cHJlc3Npb24gbGl0ZXJhbCwgd2hpY2ggaW4gVjggYW5kXG4gICAgLy8gSmF2YVNjcmlwdENvcmUgaXMgYSB0eXBlb2YgXCJmdW5jdGlvblwiLiAgT25seSBpblxuICAgIC8vIFY4IGFyZSByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbHMgcGVybWl0dGVkIGFzXG4gICAgLy8gcmVkdWNlIHBhcmFtZXRlcnMsIHNvIGl0IGlzIGRlc2lyYWJsZSBpbiB0aGVcbiAgICAvLyBnZW5lcmFsIGNhc2UgZm9yIHRoZSBzaGltIHRvIG1hdGNoIHRoZSBtb3JlXG4gICAgLy8gc3RyaWN0IGFuZCBjb21tb24gYmVoYXZpb3Igb2YgcmVqZWN0aW5nIHJlZ3VsYXJcbiAgICAvLyBleHByZXNzaW9ucy5cblxuICAgIC8vIEVTNSAxNS40LjQuMThcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMThcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9hcnJheS9mb3JFYWNoXG5cbiAgICAvLyBDaGVjayBmYWlsdXJlIG9mIGJ5LWluZGV4IGFjY2VzcyBvZiBzdHJpbmcgY2hhcmFjdGVycyAoSUUgPCA5KVxuICAgIC8vIGFuZCBmYWlsdXJlIG9mIGAwIGluIGJveGVkU3RyaW5nYCAoUmhpbm8pXG4gICAgdmFyIGJveGVkU3RyaW5nID0gJE9iamVjdCgnYScpO1xuICAgIHZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxuICAgIHZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgICAgIC8vIENoZWNrIG5vZGUgMC42LjIxIGJ1ZyB3aGVyZSB0aGlyZCBwYXJhbWV0ZXIgaXMgbm90IGJveGVkXG4gICAgICAgIHZhciBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gdHJ1ZTtcbiAgICAgICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgICAgICB2YXIgdGhyZXdFeGNlcHRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCgnZm9vJywgZnVuY3Rpb24gKF8sIF9fLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICAgICAgICAgIH0sICd4Jyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyZXdFeGNlcHRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIW1ldGhvZCAmJiAhdGhyZXdFeGNlcHRpb24gJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xuICAgIH07XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbi8qLCB0aGlzQXJnKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5mb3JFYWNoIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRleHQsIHByb3BlcnR5IHZhbHVlLCBwcm9wZXJ0eSBrZXksIHRoaXNBcmcgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4oc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4uY2FsbChULCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLmZvckVhY2gpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTlcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTlcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9PYmplY3RzL0FycmF5L21hcFxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbi8qLCB0aGlzQXJnKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICRBcnJheShsZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLm1hcCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLm1hcCkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4yMFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvZmlsdGVyXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmlsdGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGZbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHZhbHVlLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHZhbHVlLCBpLCBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZmlsdGVyKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE2XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE2XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZXZlcnlcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZXZlcnkgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmICEodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5ldmVyeSkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xN1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xN1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvbWVcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbi8qLCB0aGlzQXJnICovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5zb21lIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5zb21lKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIxXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIxXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9yZWR1Y2VcbiAgICB2YXIgcmVkdWNlQ29lcmNlc1RvT2JqZWN0ID0gZmFsc2U7XG4gICAgaWYgKEFycmF5UHJvdG90eXBlLnJlZHVjZSkge1xuICAgICAgICByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlLmNhbGwoJ2VzNScsIGZ1bmN0aW9uIChfLCBfXywgX19fLCBsaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgfSkgPT09ICdvYmplY3QnO1xuICAgIH1cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4vKiwgaW5pdGlhbFZhbHVlKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnJlZHVjZSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUgYW5kIGFuIGVtcHR5IGFycmF5XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGZbaSsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYXJyYXkgY29udGFpbnMgbm8gdmFsdWVzLCBubyBpbml0aWFsIHZhbHVlIHRvIHJldHVyblxuICAgICAgICAgICAgICAgICAgICBpZiAoKytpID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrZm4ocmVzdWx0LCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sICFyZWR1Y2VDb2VyY2VzVG9PYmplY3QpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4yMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvcmVkdWNlUmlnaHRcbiAgICB2YXIgcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QgPSBmYWxzZTtcbiAgICBpZiAoQXJyYXlQcm90b3R5cGUucmVkdWNlUmlnaHQpIHtcbiAgICAgICAgcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlUmlnaHQuY2FsbCgnZXM1JywgZnVuY3Rpb24gKF8sIF9fLCBfX18sIGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9KSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4vKiwgaW5pdGlhbCovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUsIGVtcHR5IGFycmF5XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2VSaWdodCBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIHZhciBpID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZltpLS1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBhcnJheSBjb250YWlucyBubyB2YWx1ZXMsIG5vIGluaXRpYWwgdmFsdWUgdG8gcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2VSaWdodCBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFja2ZuKHJlc3VsdCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChpLS0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXJlZHVjZVJpZ2h0Q29lcmNlc1RvT2JqZWN0KTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mXG4gICAgdmFyIGhhc0ZpcmVmb3gySW5kZXhPZkJ1ZyA9IEFycmF5UHJvdG90eXBlLmluZGV4T2YgJiYgWzAsIDFdLmluZGV4T2YoMSwgMikgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50LyosIGZyb21JbmRleCAqLykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcblxuICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaSA9IEVTLlRvSW50ZWdlcihhcmd1bWVudHNbMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoYW5kbGUgbmVnYXRpdmUgaW5kaWNlc1xuICAgICAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBtYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiBzZWxmW2ldID09PSBzZWFyY2hFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE1XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE1XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbGFzdEluZGV4T2ZcbiAgICB2YXIgaGFzRmlyZWZveDJMYXN0SW5kZXhPZkJ1ZyA9IEFycmF5UHJvdG90eXBlLmxhc3RJbmRleE9mICYmIFswLCAxXS5sYXN0SW5kZXhPZigwLCAtMykgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQvKiwgZnJvbUluZGV4ICovKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaSA9IG1pbihpLCBFUy5Ub0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoYW5kbGUgbmVnYXRpdmUgaW5kaWNlc1xuICAgICAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBsZW5ndGggLSBNYXRoLmFicyhpKTtcbiAgICAgICAgICAgIGZvciAoOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VhcmNoRWxlbWVudCA9PT0gc2VsZltpXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9LCBoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTJcbiAgICB2YXIgc3BsaWNlTm9vcFJldHVybnNFbXB0eUFycmF5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSBbMSwgMl07XG4gICAgICAgIHZhciByZXN1bHQgPSBhLnNwbGljZSgpO1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IDIgJiYgaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPT09IDA7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIC8vIFNhZmFyaSA1LjAgYnVnIHdoZXJlIC5zcGxpY2UoKSByZXR1cm5zIHVuZGVmaW5lZFxuICAgICAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlfc3BsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAhc3BsaWNlTm9vcFJldHVybnNFbXB0eUFycmF5KTtcblxuICAgIHZhciBzcGxpY2VXb3Jrc1dpdGhFbXB0eU9iamVjdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgQXJyYXlQcm90b3R5cGUuc3BsaWNlLmNhbGwob2JqLCAwLCAwLCAxKTtcbiAgICAgICAgcmV0dXJuIG9iai5sZW5ndGggPT09IDE7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbWF4KEVTLlRvSW50ZWdlcih0aGlzLmxlbmd0aCksIDApO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBkZWxldGVDb3VudCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwoYXJncywgdGhpcy5sZW5ndGggLSBzdGFydCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1sxXSA9IEVTLlRvSW50ZWdlcihkZWxldGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5X3NwbGljZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sICFzcGxpY2VXb3Jrc1dpdGhFbXB0eU9iamVjdCk7XG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aExhcmdlU3BhcnNlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMjk1XG4gICAgICAgIC8vIFNhZmFyaSA3LzggYnJlYWtzIHdpdGggc3BhcnNlIGFycmF5cyBvZiBzaXplIDFlNSBvciBncmVhdGVyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgJEFycmF5KDFlNSk7XG4gICAgICAgIC8vIG5vdGU6IHRoZSBpbmRleCBNVVNUIGJlIDggb3IgbGFyZ2VyIG9yIHRoZSB0ZXN0IHdpbGwgZmFsc2UgcGFzc1xuICAgICAgICBhcnJbOF0gPSAneCc7XG4gICAgICAgIGFyci5zcGxpY2UoMSwgMSk7XG4gICAgICAgIC8vIG5vdGU6IHRoaXMgdGVzdCBtdXN0IGJlIGRlZmluZWQgKmFmdGVyKiB0aGUgaW5kZXhPZiBzaGltXG4gICAgICAgIC8vIHBlciBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzMxM1xuICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YoJ3gnKSA9PT0gNztcbiAgICB9KCkpO1xuICAgIHZhciBzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFBlciBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzI5NVxuICAgICAgICAvLyBPcGVyYSAxMi4xNSBicmVha3Mgb24gdGhpcywgbm8gaWRlYSB3aHkuXG4gICAgICAgIHZhciBuID0gMjU2O1xuICAgICAgICB2YXIgYXJyID0gW107XG4gICAgICAgIGFycltuXSA9ICdhJztcbiAgICAgICAgYXJyLnNwbGljZShuICsgMSwgMCwgJ2InKTtcbiAgICAgICAgcmV0dXJuIGFycltuXSA9PT0gJ2EnO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBPID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgQSA9IFtdO1xuICAgICAgICAgICAgdmFyIGxlbiA9IEVTLlRvVWludDMyKE8ubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gRVMuVG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgICAgIHZhciBhY3R1YWxTdGFydCA9IHJlbGF0aXZlU3RhcnQgPCAwID8gbWF4KChsZW4gKyByZWxhdGl2ZVN0YXJ0KSwgMCkgOiBtaW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcbiAgICAgICAgICAgIHZhciBhY3R1YWxEZWxldGVDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgICAgICAgICAgPyBsZW4gLSBhY3R1YWxTdGFydFxuICAgICAgICAgICAgICAgICAgICA6IG1pbihtYXgoRVMuVG9JbnRlZ2VyKGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcblxuICAgICAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICAgICAgdmFyIGZyb207XG4gICAgICAgICAgICB3aGlsZSAoayA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoYWN0dWFsU3RhcnQgKyBrKTtcbiAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICBBW2tdID0gT1tmcm9tXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMik7XG4gICAgICAgICAgICB2YXIgaXRlbUNvdW50ID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHRvO1xuICAgICAgICAgICAgaWYgKGl0ZW1Db3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgayA9IGFjdHVhbFN0YXJ0O1xuICAgICAgICAgICAgICAgIHZhciBtYXhLID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGsgPCBtYXhLKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSAkU3RyaW5nKGsgKyBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gJFN0cmluZyhrICsgaXRlbUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG93bnMoTywgZnJvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBPW3RvXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsgPSBsZW47XG4gICAgICAgICAgICAgICAgdmFyIG1pbksgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGl0ZW1Db3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA+IG1pbkspIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bayAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtQ291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgICAgICAgICAgIGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA+IGFjdHVhbFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSAkU3RyaW5nKGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB0byA9ICRTdHJpbmcoayArIGl0ZW1Db3VudCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bdG9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGsgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrID0gYWN0dWFsU3RhcnQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgT1trXSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGsgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpdGVtQ291bnQ7XG5cbiAgICAgICAgICAgIHJldHVybiBBO1xuICAgICAgICB9XG4gICAgfSwgIXNwbGljZVdvcmtzV2l0aExhcmdlU3BhcnNlQXJyYXlzIHx8ICFzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyk7XG5cbiAgICB2YXIgb3JpZ2luYWxKb2luID0gQXJyYXlQcm90b3R5cGUuam9pbjtcbiAgICB2YXIgaGFzU3RyaW5nSm9pbkJ1ZztcbiAgICB0cnkge1xuICAgICAgICBoYXNTdHJpbmdKb2luQnVnID0gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbCgnMTIzJywgJywnKSAhPT0gJzEsMiwzJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhc1N0cmluZ0pvaW5CdWcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaGFzU3RyaW5nSm9pbkJ1Zykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgICAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIHZhciBzZXAgPSB0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyA/ICcsJyA6IHNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxKb2luLmNhbGwoaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiB0aGlzLCBzZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBoYXNTdHJpbmdKb2luQnVnKTtcbiAgICB9XG5cbiAgICB2YXIgaGFzSm9pblVuZGVmaW5lZEJ1ZyA9IFsxLCAyXS5qb2luKHVuZGVmaW5lZCkgIT09ICcxLDInO1xuICAgIGlmIChoYXNKb2luVW5kZWZpbmVkQnVnKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcCA9IHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJywnIDogc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEpvaW4uY2FsbCh0aGlzLCBzZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBoYXNKb2luVW5kZWZpbmVkQnVnKTtcbiAgICB9XG5cbiAgICB2YXIgcHVzaFNoaW0gPSBmdW5jdGlvbiBwdXNoKGl0ZW0pIHtcbiAgICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgdmFyIG4gPSBFUy5Ub1VpbnQzMihPLmxlbmd0aCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBPW24gKyBpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBPLmxlbmd0aCA9IG4gKyBpO1xuICAgICAgICByZXR1cm4gbiArIGk7XG4gICAgfTtcblxuICAgIHZhciBwdXNoSXNOb3RHZW5lcmljID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICB2YXIgcmVzdWx0ID0gQXJyYXkucHJvdG90eXBlLnB1c2guY2FsbChvYmosIHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IDEgfHwgb2JqLmxlbmd0aCAhPT0gMSB8fCB0eXBlb2Ygb2JqWzBdICE9PSAndW5kZWZpbmVkJyB8fCAhb3ducyhvYmosIDApO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBwdXNoOiBmdW5jdGlvbiBwdXNoKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5X3B1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwdXNoU2hpbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfSwgcHVzaElzTm90R2VuZXJpYyk7XG5cbiAgICAvLyBUaGlzIGZpeGVzIGEgdmVyeSB3ZWlyZCBidWcgaW4gT3BlcmEgMTAuNiB3aGVuIHB1c2hpbmcgYHVuZGVmaW5lZFxuICAgIHZhciBwdXNoVW5kZWZpbmVkSXNXZWlyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGFyci5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IDEgfHwgYXJyLmxlbmd0aCAhPT0gMSB8fCB0eXBlb2YgYXJyWzBdICE9PSAndW5kZWZpbmVkJyB8fCAhb3ducyhhcnIsIDApO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwgeyBwdXNoOiBwdXNoU2hpbSB9LCBwdXNoVW5kZWZpbmVkSXNXZWlyZCk7XG5cbiAgICAvLyBFUzUgMTUuMi4zLjE0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS40LjQuMTBcbiAgICAvLyBGaXggYm94ZWQgc3RyaW5nIGJ1Z1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc2xpY2U6IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5U2xpY2VBcHBseShhcnIsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9LCBzcGxpdFN0cmluZyk7XG5cbiAgICB2YXIgc29ydElnbm9yZXNOb25GdW5jdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgWzEsIDJdLnNvcnQobnVsbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgWzEsIDJdLnNvcnQoe30pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSgpKTtcbiAgICB2YXIgc29ydFRocm93c09uUmVnZXggPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyB0aGlzIGlzIGEgcHJvYmxlbSBpbiBGaXJlZm94IDQsIGluIHdoaWNoIGB0eXBlb2YgL2EvID09PSAnZnVuY3Rpb24nYFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgWzEsIDJdLnNvcnQoL2EvKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSgpKTtcbiAgICB2YXIgc29ydElnbm9yZXNVbmRlZmluZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhcHBsaWVzIGluIElFIDgsIGZvciBvbmUuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbMSwgMl0uc29ydCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlRm4pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29tcGFyZUZuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheVNvcnQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY29tcGFyZUZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5zb3J0IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5U29ydCh0aGlzLCBjb21wYXJlRm4pO1xuICAgICAgICB9XG4gICAgfSwgc29ydElnbm9yZXNOb25GdW5jdGlvbnMgfHwgIXNvcnRJZ25vcmVzVW5kZWZpbmVkIHx8ICFzb3J0VGhyb3dzT25SZWdleCk7XG5cbiAgICAvL1xuICAgIC8vIE9iamVjdFxuICAgIC8vID09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUzUgMTUuMi4zLjE0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjE0XG5cbiAgICAvLyBodHRwOi8vd2hhdHRoZWhlYWRzYWlkLmNvbS8yMDEwLzEwL2Etc2FmZXItb2JqZWN0LWtleXMtY29tcGF0aWJpbGl0eS1pbXBsZW1lbnRhdGlvblxuICAgIHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW0oeyAndG9TdHJpbmcnOiBudWxsIH0sICd0b1N0cmluZycpOyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd1F1b3RlZEtleXNJbk9iamVjdHNcbiAgICB2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG4gICAgdmFyIGhhc1N0cmluZ0VudW1CdWcgPSAhb3ducygneCcsICcwJyk7XG4gICAgdmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcbiAgICB9O1xuICAgIHZhciBleGNsdWRlZEtleXMgPSB7XG4gICAgICAgICRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuICAgICAgICAkY29uc29sZTogdHJ1ZSxcbiAgICAgICAgJGV4dGVybmFsOiB0cnVlLFxuICAgICAgICAkZnJhbWU6IHRydWUsXG4gICAgICAgICRmcmFtZUVsZW1lbnQ6IHRydWUsXG4gICAgICAgICRmcmFtZXM6IHRydWUsXG4gICAgICAgICRpbm5lckhlaWdodDogdHJ1ZSxcbiAgICAgICAgJGlubmVyV2lkdGg6IHRydWUsXG4gICAgICAgICRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG4gICAgICAgICRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcbiAgICAgICAgJG91dGVySGVpZ2h0OiB0cnVlLFxuICAgICAgICAkb3V0ZXJXaWR0aDogdHJ1ZSxcbiAgICAgICAgJHBhZ2VYT2Zmc2V0OiB0cnVlLFxuICAgICAgICAkcGFnZVlPZmZzZXQ6IHRydWUsXG4gICAgICAgICRwYXJlbnQ6IHRydWUsXG4gICAgICAgICRzY3JvbGxMZWZ0OiB0cnVlLFxuICAgICAgICAkc2Nyb2xsVG9wOiB0cnVlLFxuICAgICAgICAkc2Nyb2xsWDogdHJ1ZSxcbiAgICAgICAgJHNjcm9sbFk6IHRydWUsXG4gICAgICAgICRzZWxmOiB0cnVlLFxuICAgICAgICAkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuICAgICAgICAkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG4gICAgICAgICR3aW5kb3c6IHRydWUsXG5cbiAgICAgICAgJHdpZHRoOiB0cnVlLFxuICAgICAgICAkaGVpZ2h0OiB0cnVlLFxuICAgICAgICAkdG9wOiB0cnVlLFxuICAgICAgICAkbG9jYWxTdG9yYWdlOiB0cnVlXG4gICAgfTtcbiAgICB2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyogZ2xvYmFscyB3aW5kb3cgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgayBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgb3ducyh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSgpKTtcbiAgICB2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvYmplY3QpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkb250RW51bXMgPSBbXG4gICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICd0b0xvY2FsZVN0cmluZycsXG4gICAgICAgICd2YWx1ZU9mJyxcbiAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgJ2lzUHJvdG90eXBlT2YnLFxuICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAgICAgICAnY29uc3RydWN0b3InXG4gICAgXTtcbiAgICB2YXIgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcblxuICAgIC8vIHRha2VuIGRpcmVjdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9pcy1hcmd1bWVudHMvYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICAvLyBjYW4gYmUgcmVwbGFjZWQgd2l0aCByZXF1aXJlKCdpcy1hcmd1bWVudHMnKSBpZiB3ZSBldmVyIHVzZSBhIGJ1aWxkIHByb2Nlc3MgaW5zdGVhZFxuICAgIHZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG4gICAgfTtcbiAgICB2YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGxcbiAgICAgICAgICAgICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInXG4gICAgICAgICAgICAmJiB2YWx1ZS5sZW5ndGggPj0gMFxuICAgICAgICAgICAgJiYgIWlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICAmJiBpc0NhbGxhYmxlKHZhbHVlLmNhbGxlZSk7XG4gICAgfTtcbiAgICB2YXIgaXNBcmd1bWVudHMgPSBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cykgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKCRPYmplY3QsIHtcbiAgICAgICAga2V5czogZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBpc0ZuID0gaXNDYWxsYWJsZShvYmplY3QpO1xuICAgICAgICAgICAgdmFyIGlzQXJncyA9IGlzQXJndW1lbnRzKG9iamVjdCk7XG4gICAgICAgICAgICB2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG4gICAgICAgICAgICB2YXIgaXNTdHIgPSBpc09iamVjdCAmJiBpc1N0cmluZyhvYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0ICYmICFpc0ZuICYmICFpc0FyZ3MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0aGVLZXlzID0gW107XG4gICAgICAgICAgICB2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRm47XG4gICAgICAgICAgICBpZiAoKGlzU3RyICYmIGhhc1N0cmluZ0VudW1CdWcpIHx8IGlzQXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHRoZUtleXMsICRTdHJpbmcoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc0FyZ3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIG93bnMob2JqZWN0LCBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwodGhlS2V5cywgJFN0cmluZyhuYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNEb250RW51bUJ1Zykge1xuICAgICAgICAgICAgICAgIHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbnRFbnVtc0xlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb250RW51bSA9IGRvbnRFbnVtc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtID09PSAnY29uc3RydWN0b3InKSAmJiBvd25zKG9iamVjdCwgZG9udEVudW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbCh0aGVLZXlzLCBkb250RW51bSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhlS2V5cztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAkT2JqZWN0LmtleXMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU2FmYXJpIDUuMCBidWdcbiAgICAgICAgcmV0dXJuICRPYmplY3Qua2V5cyhhcmd1bWVudHMpLmxlbmd0aCA9PT0gMjtcbiAgICB9KDEsIDIpKTtcbiAgICB2YXIga2V5c0hhc0FyZ3VtZW50c0xlbmd0aEJ1ZyA9ICRPYmplY3Qua2V5cyAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJnS2V5cyA9ICRPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCAhPT0gMSB8fCBhcmdLZXlzLmxlbmd0aCAhPT0gMSB8fCBhcmdLZXlzWzBdICE9PSAxO1xuICAgIH0oMSkpO1xuICAgIHZhciBvcmlnaW5hbEtleXMgPSAkT2JqZWN0LmtleXM7XG4gICAgZGVmaW5lUHJvcGVydGllcygkT2JqZWN0LCB7XG4gICAgICAgIGtleXM6IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEtleXMoYXJyYXlTbGljZShvYmplY3QpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMgfHwga2V5c0hhc0FyZ3VtZW50c0xlbmd0aEJ1Zyk7XG5cbiAgICAvL1xuICAgIC8vIERhdGVcbiAgICAvLyA9PT09XG4gICAgLy9cblxuICAgIHZhciBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1ZyA9IG5ldyBEYXRlKC0zNTA5ODI3MzI5NjAwMjkyKS5nZXRVVENNb250aCgpICE9PSAwO1xuICAgIHZhciBhTmVnYXRpdmVUZXN0RGF0ZSA9IG5ldyBEYXRlKC0xNTA5ODQyMjg5NjAwMjkyKTtcbiAgICB2YXIgYVBvc2l0aXZlVGVzdERhdGUgPSBuZXcgRGF0ZSgxNDQ5NjYyNDAwMDAwKTtcbiAgICB2YXIgaGFzVG9VVENTdHJpbmdGb3JtYXRCdWcgPSBhTmVnYXRpdmVUZXN0RGF0ZS50b1VUQ1N0cmluZygpICE9PSAnTW9uLCAwMSBKYW4gLTQ1ODc1IDExOjU5OjU5IEdNVCc7XG4gICAgdmFyIGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZztcbiAgICB2YXIgaGFzVG9TdHJpbmdGb3JtYXRCdWc7XG4gICAgdmFyIHRpbWVab25lT2Zmc2V0ID0gYU5lZ2F0aXZlVGVzdERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZVpvbmVPZmZzZXQgPCAtNzIwKSB7XG4gICAgICAgIGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZyA9IGFOZWdhdGl2ZVRlc3REYXRlLnRvRGF0ZVN0cmluZygpICE9PSAnVHVlIEphbiAwMiAtNDU4NzUnO1xuICAgICAgICBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZyA9ICEoL15UaHUgRGVjIDEwIDIwMTUgXFxkXFxkOlxcZFxcZDpcXGRcXGQgR01UWy0rXVxcZFxcZFxcZFxcZCg/OiB8JCkvKS50ZXN0KFN0cmluZyhhUG9zaXRpdmVUZXN0RGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZyA9IGFOZWdhdGl2ZVRlc3REYXRlLnRvRGF0ZVN0cmluZygpICE9PSAnTW9uIEphbiAwMSAtNDU4NzUnO1xuICAgICAgICBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZyA9ICEoL15XZWQgRGVjIDA5IDIwMTUgXFxkXFxkOlxcZFxcZDpcXGRcXGQgR01UWy0rXVxcZFxcZFxcZFxcZCg/OiB8JCkvKS50ZXN0KFN0cmluZyhhUG9zaXRpdmVUZXN0RGF0ZSkpO1xuICAgIH1cblxuICAgIHZhciBvcmlnaW5hbEdldEZ1bGxZZWFyID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRNb250aCA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRNb250aCk7XG4gICAgdmFyIG9yaWdpbmFsR2V0RGF0ZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXREYXRlKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENGdWxsWWVhciA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENGdWxsWWVhcik7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDTW9udGggPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDTW9udGgpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ0RhdGUgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRGF0ZSk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDRGF5ID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0RheSk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDSG91cnMgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDSG91cnMpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ01pbnV0ZXMgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDTWludXRlcyk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDU2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENTZWNvbmRzKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENNaWxsaXNlY29uZHMgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzKTtcbiAgICB2YXIgZGF5TmFtZSA9IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J107XG4gICAgdmFyIG1vbnRoTmFtZSA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXTtcbiAgICB2YXIgZGF5c0luTW9udGggPSBmdW5jdGlvbiBkYXlzSW5Nb250aChtb250aCwgeWVhcikge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxHZXREYXRlKG5ldyBEYXRlKHllYXIsIG1vbnRoLCAwKSk7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgZ2V0RnVsbFllYXI6IGZ1bmN0aW9uIGdldEZ1bGxZZWFyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBvcmlnaW5hbEdldE1vbnRoKHRoaXMpID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWVhciArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWVhcjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TW9udGg6IGZ1bmN0aW9uIGdldE1vbnRoKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0TW9udGgodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICB9LFxuICAgICAgICBnZXREYXRlOiBmdW5jdGlvbiBnZXREYXRlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0TW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0RGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBkYXlzSW5Nb250aCgwLCB5ZWFyICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYXlzIC0gZGF0ZSkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFVUQ0Z1bGxZZWFyOiBmdW5jdGlvbiBnZXRVVENGdWxsWWVhcigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgb3JpZ2luYWxHZXRVVENNb250aCh0aGlzKSA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHllYXIgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFVUQ01vbnRoOiBmdW5jdGlvbiBnZXRVVENNb250aCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG1vbnRoID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtb250aDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDRGF0ZTogZnVuY3Rpb24gZ2V0VVRDRGF0ZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBvcmlnaW5hbEdldFVUQ0RhdGUodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIGlmIChtb250aCA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkYXlzID0gZGF5c0luTW9udGgoMCwgeWVhciArIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZGF5cyAtIGRhdGUpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcpO1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICB0b1VUQ1N0cmluZzogZnVuY3Rpb24gdG9VVENTdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IG9yaWdpbmFsR2V0VVRDRGF5KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBvcmlnaW5hbEdldFVUQ0RhdGUodGhpcyk7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIGhvdXIgPSBvcmlnaW5hbEdldFVUQ0hvdXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IG9yaWdpbmFsR2V0VVRDTWludXRlcyh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmQgPSBvcmlnaW5hbEdldFVUQ1NlY29uZHModGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gZGF5TmFtZVtkYXldICsgJywgJ1xuICAgICAgICAgICAgICAgICsgKGRhdGUgPCAxMCA/ICcwJyArIGRhdGUgOiBkYXRlKSArICcgJ1xuICAgICAgICAgICAgICAgICsgbW9udGhOYW1lW21vbnRoXSArICcgJ1xuICAgICAgICAgICAgICAgICsgeWVhciArICcgJ1xuICAgICAgICAgICAgICAgICsgKGhvdXIgPCAxMCA/ICcwJyArIGhvdXIgOiBob3VyKSArICc6J1xuICAgICAgICAgICAgICAgICsgKG1pbnV0ZSA8IDEwID8gJzAnICsgbWludXRlIDogbWludXRlKSArICc6J1xuICAgICAgICAgICAgICAgICsgKHNlY29uZCA8IDEwID8gJzAnICsgc2Vjb25kIDogc2Vjb25kKSArICcgR01UJztcbiAgICAgICAgfVxuICAgIH0sIGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvVVRDU3RyaW5nRm9ybWF0QnVnKTtcblxuICAgIC8vIE9wZXJhIDEyIGhhcyBgLGBcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvRGF0ZVN0cmluZzogZnVuY3Rpb24gdG9EYXRlU3RyaW5nKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkYXkgPSB0aGlzLmdldERheSgpO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmdldERhdGUoKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHRoaXMuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIHZhciB5ZWFyID0gdGhpcy5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgcmV0dXJuIGRheU5hbWVbZGF5XSArICcgJ1xuICAgICAgICAgICAgICAgICsgbW9udGhOYW1lW21vbnRoXSArICcgJ1xuICAgICAgICAgICAgICAgICsgKGRhdGUgPCAxMCA/ICcwJyArIGRhdGUgOiBkYXRlKSArICcgJ1xuICAgICAgICAgICAgICAgICsgeWVhcjtcbiAgICAgICAgfVxuICAgIH0sIGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1Zyk7XG5cbiAgICAvLyBjYW4ndCB1c2UgZGVmaW5lUHJvcGVydGllcyBoZXJlIGJlY2F1c2Ugb2YgdG9TdHJpbmcgZW51bWVyYXRpb24gaXNzdWUgaW4gSUUgPD0gOFxuICAgIGlmIChoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1ZyB8fCBoYXNUb1N0cmluZ0Zvcm1hdEJ1Zykge1xuICAgICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkYXkgPSB0aGlzLmdldERheSgpO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmdldERhdGUoKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHRoaXMuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIHZhciB5ZWFyID0gdGhpcy5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgdmFyIGhvdXIgPSB0aGlzLmdldEhvdXJzKCk7XG4gICAgICAgICAgICB2YXIgbWludXRlID0gdGhpcy5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICB2YXIgc2Vjb25kID0gdGhpcy5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aGlzLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgaG91cnNPZmZzZXQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHRpbWV6b25lT2Zmc2V0KSAvIDYwKTtcbiAgICAgICAgICAgIHZhciBtaW51dGVzT2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLmFicyh0aW1lem9uZU9mZnNldCkgJSA2MCk7XG4gICAgICAgICAgICByZXR1cm4gZGF5TmFtZVtkYXldICsgJyAnXG4gICAgICAgICAgICAgICAgKyBtb250aE5hbWVbbW9udGhdICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnXG4gICAgICAgICAgICAgICAgKyB5ZWFyICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoaG91ciA8IDEwID8gJzAnICsgaG91ciA6IGhvdXIpICsgJzonXG4gICAgICAgICAgICAgICAgKyAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonXG4gICAgICAgICAgICAgICAgKyAoc2Vjb25kIDwgMTAgPyAnMCcgKyBzZWNvbmQgOiBzZWNvbmQpICsgJyBHTVQnXG4gICAgICAgICAgICAgICAgKyAodGltZXpvbmVPZmZzZXQgPiAwID8gJy0nIDogJysnKVxuICAgICAgICAgICAgICAgICsgKGhvdXJzT2Zmc2V0IDwgMTAgPyAnMCcgKyBob3Vyc09mZnNldCA6IGhvdXJzT2Zmc2V0KVxuICAgICAgICAgICAgICAgICsgKG1pbnV0ZXNPZmZzZXQgPCAxMCA/ICcwJyArIG1pbnV0ZXNPZmZzZXQgOiBtaW51dGVzT2Zmc2V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0ZS5wcm90b3R5cGUsICd0b1N0cmluZycsIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjkuNS40M1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNS40M1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIFN0cmluZyB2YWx1ZSByZXByZXNlbnQgdGhlIGluc3RhbmNlIGluIHRpbWVcbiAgICAvLyByZXByZXNlbnRlZCBieSB0aGlzIERhdGUgb2JqZWN0LiBUaGUgZm9ybWF0IG9mIHRoZSBTdHJpbmcgaXMgdGhlIERhdGUgVGltZVxuICAgIC8vIHN0cmluZyBmb3JtYXQgZGVmaW5lZCBpbiAxNS45LjEuMTUuIEFsbCBmaWVsZHMgYXJlIHByZXNlbnQgaW4gdGhlIFN0cmluZy5cbiAgICAvLyBUaGUgdGltZSB6b25lIGlzIGFsd2F5cyBVVEMsIGRlbm90ZWQgYnkgdGhlIHN1ZmZpeCBaLiBJZiB0aGUgdGltZSB2YWx1ZSBvZlxuICAgIC8vIHRoaXMgb2JqZWN0IGlzIG5vdCBhIGZpbml0ZSBOdW1iZXIgYSBSYW5nZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgdmFyIG5lZ2F0aXZlRGF0ZSA9IC02MjE5ODc1NTIwMDAwMDtcbiAgICB2YXIgbmVnYXRpdmVZZWFyU3RyaW5nID0gJy0wMDAwMDEnO1xuICAgIHZhciBoYXNOZWdhdGl2ZURhdGVCdWcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAmJiBuZXcgRGF0ZShuZWdhdGl2ZURhdGUpLnRvSVNPU3RyaW5nKCkuaW5kZXhPZihuZWdhdGl2ZVllYXJTdHJpbmcpID09PSAtMTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtbGVuXG4gICAgdmFyIGhhc1NhZmFyaTUxRGF0ZUJ1ZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmIG5ldyBEYXRlKC0xKS50b0lTT1N0cmluZygpICE9PSAnMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaJztcblxuICAgIHZhciBnZXRUaW1lID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFRpbWUpO1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICB0b0lTT1N0cmluZzogZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKHRoaXMpIHx8ICFpc0Zpbml0ZShnZXRUaW1lKHRoaXMpKSkge1xuICAgICAgICAgICAgICAgIC8vIEFkb3BlIFBob3Rvc2hvcCByZXF1aXJlcyB0aGUgc2Vjb25kIGNoZWNrLlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyBjYWxsZWQgb24gbm9uLWZpbml0ZSB2YWx1ZS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyKHRoaXMpO1xuXG4gICAgICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTExXG4gICAgICAgICAgICB5ZWFyICs9IE1hdGguZmxvb3IobW9udGggLyAxMik7XG4gICAgICAgICAgICBtb250aCA9ICgobW9udGggJSAxMikgKyAxMikgJSAxMjtcblxuICAgICAgICAgICAgLy8gdGhlIGRhdGUgdGltZSBzdHJpbmcgZm9ybWF0IGlzIHNwZWNpZmllZCBpbiAxNS45LjEuMTUuXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgIG1vbnRoICsgMSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ0RhdGUodGhpcyksXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxHZXRVVENIb3Vycyh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ01pbnV0ZXModGhpcyksXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxHZXRVVENTZWNvbmRzKHRoaXMpXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgeWVhciA9IChcbiAgICAgICAgICAgICAgICAoeWVhciA8IDAgPyAnLScgOiAoeWVhciA+IDk5OTkgPyAnKycgOiAnJykpXG4gICAgICAgICAgICAgICAgKyBzdHJTbGljZSgnMDAwMDAnICsgTWF0aC5hYnMoeWVhciksICgwIDw9IHllYXIgJiYgeWVhciA8PSA5OTk5KSA/IC00IDogLTYpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIC8vIHBhZCBtb250aHMsIGRheXMsIGhvdXJzLCBtaW51dGVzLCBhbmQgc2Vjb25kcyB0byBoYXZlIHR3byBkaWdpdHMuXG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gc3RyU2xpY2UoJzAwJyArIHJlc3VsdFtpXSwgLTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcGFkIG1pbGxpc2Vjb25kcyB0byBoYXZlIHRocmVlIGRpZ2l0cy5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgeWVhciArICctJyArIGFycmF5U2xpY2UocmVzdWx0LCAwLCAyKS5qb2luKCctJylcbiAgICAgICAgICAgICAgICArICdUJyArIGFycmF5U2xpY2UocmVzdWx0LCAyKS5qb2luKCc6JykgKyAnLidcbiAgICAgICAgICAgICAgICArIHN0clNsaWNlKCcwMDAnICsgb3JpZ2luYWxHZXRVVENNaWxsaXNlY29uZHModGhpcyksIC0zKSArICdaJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc05lZ2F0aXZlRGF0ZUJ1ZyB8fCBoYXNTYWZhcmk1MURhdGVCdWcpO1xuXG4gICAgLy8gRVM1IDE1LjkuNS40NFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNS40NFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBEYXRlIG9iamVjdCBmb3IgdXNlIGJ5XG4gICAgLy8gSlNPTi5zdHJpbmdpZnkgKDE1LjEyLjMpLlxuICAgIHZhciBkYXRlVG9KU09OSXNTdXBwb3J0ZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUucHJvdG90eXBlLnRvSlNPTlxuICAgICAgICAgICAgICAgICYmIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgICAgICAgICAmJiBuZXcgRGF0ZShuZWdhdGl2ZURhdGUpLnRvSlNPTigpLmluZGV4T2YobmVnYXRpdmVZZWFyU3RyaW5nKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAmJiBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IC8vIGdlbmVyaWNcbiAgICAgICAgICAgICAgICAgICAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSgpKTtcbiAgICBpZiAoIWRhdGVUb0pTT05Jc1N1cHBvcnRlZCkge1xuICAgICAgICBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgICAgICAgICAvLyBXaGVuIHRoZSB0b0pTT04gbWV0aG9kIGlzIGNhbGxlZCB3aXRoIGFyZ3VtZW50IGtleSwgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgLy8gc3RlcHMgYXJlIHRha2VuOlxuXG4gICAgICAgICAgICAvLyAxLiAgTGV0IE8gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIFRvT2JqZWN0LCBnaXZpbmcgaXQgdGhlIHRoaXNcbiAgICAgICAgICAgIC8vIHZhbHVlIGFzIGl0cyBhcmd1bWVudC5cbiAgICAgICAgICAgIC8vIDIuIExldCB0diBiZSBFUy5Ub1ByaW1pdGl2ZShPLCBoaW50IE51bWJlcikuXG4gICAgICAgICAgICB2YXIgTyA9ICRPYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgdHYgPSBFUy5Ub1ByaW1pdGl2ZShPKTtcbiAgICAgICAgICAgIC8vIDMuIElmIHR2IGlzIGEgTnVtYmVyIGFuZCBpcyBub3QgZmluaXRlLCByZXR1cm4gbnVsbC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHYgPT09ICdudW1iZXInICYmICFpc0Zpbml0ZSh0dikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDQuIExldCB0b0lTTyBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbR2V0XV0gaW50ZXJuYWwgbWV0aG9kIG9mXG4gICAgICAgICAgICAvLyBPIHdpdGggYXJndW1lbnQgXCJ0b0lTT1N0cmluZ1wiLlxuICAgICAgICAgICAgdmFyIHRvSVNPID0gTy50b0lTT1N0cmluZztcbiAgICAgICAgICAgIC8vIDUuIElmIElzQ2FsbGFibGUodG9JU08pIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUodG9JU08pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9JU09TdHJpbmcgcHJvcGVydHkgaXMgbm90IGNhbGxhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA2LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2Qgb2ZcbiAgICAgICAgICAgIC8vICB0b0lTTyB3aXRoIE8gYXMgdGhlIHRoaXMgdmFsdWUgYW5kIGFuIGVtcHR5IGFyZ3VtZW50IGxpc3QuXG4gICAgICAgICAgICByZXR1cm4gdG9JU08uY2FsbChPKTtcblxuICAgICAgICAgICAgLy8gTk9URSAxIFRoZSBhcmd1bWVudCBpcyBpZ25vcmVkLlxuXG4gICAgICAgICAgICAvLyBOT1RFIDIgVGhlIHRvSlNPTiBmdW5jdGlvbiBpcyBpbnRlbnRpb25hbGx5IGdlbmVyaWM7IGl0IGRvZXMgbm90XG4gICAgICAgICAgICAvLyByZXF1aXJlIHRoYXQgaXRzIHRoaXMgdmFsdWUgYmUgYSBEYXRlIG9iamVjdC4gVGhlcmVmb3JlLCBpdCBjYW4gYmVcbiAgICAgICAgICAgIC8vIHRyYW5zZmVycmVkIHRvIG90aGVyIGtpbmRzIG9mIG9iamVjdHMgZm9yIHVzZSBhcyBhIG1ldGhvZC4gSG93ZXZlcixcbiAgICAgICAgICAgIC8vIGl0IGRvZXMgcmVxdWlyZSB0aGF0IGFueSBzdWNoIG9iamVjdCBoYXZlIGEgdG9JU09TdHJpbmcgbWV0aG9kLiBBblxuICAgICAgICAgICAgLy8gb2JqZWN0IGlzIGZyZWUgdG8gdXNlIHRoZSBhcmd1bWVudCBrZXkgdG8gZmlsdGVyIGl0c1xuICAgICAgICAgICAgLy8gc3RyaW5naWZpY2F0aW9uLlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS45LjQuMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNC4yXG4gICAgLy8gYmFzZWQgb24gd29yayBzaGFyZWQgYnkgRGFuaWVsIEZyaWVzZW4gKGRhbnRtYW4pXG4gICAgLy8gaHR0cDovL2dpc3QuZ2l0aHViLmNvbS8zMDMyNDlcbiAgICB2YXIgc3VwcG9ydHNFeHRlbmRlZFllYXJzID0gRGF0ZS5wYXJzZSgnKzAzMzY1OC0wOS0yN1QwMTo0Njo0MC4wMDBaJykgPT09IDFlMTU7XG4gICAgdmFyIGFjY2VwdHNJbnZhbGlkRGF0ZXMgPSAhaXNOYU4oRGF0ZS5wYXJzZSgnMjAxMi0wNC0wNFQyNDowMDowMC41MDBaJykpIHx8ICFpc05hTihEYXRlLnBhcnNlKCcyMDEyLTExLTMxVDIzOjU5OjU5LjAwMFonKSkgfHwgIWlzTmFOKERhdGUucGFyc2UoJzIwMTItMTItMzFUMjM6NTk6NjAuMDAwWicpKTtcbiAgICB2YXIgZG9lc05vdFBhcnNlWTJLTmV3WWVhciA9IGlzTmFOKERhdGUucGFyc2UoJzIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWicpKTtcbiAgICBpZiAoZG9lc05vdFBhcnNlWTJLTmV3WWVhciB8fCBhY2NlcHRzSW52YWxpZERhdGVzIHx8ICFzdXBwb3J0c0V4dGVuZGVkWWVhcnMpIHtcbiAgICAgICAgLy8gWFhYIGdsb2JhbCBhc3NpZ25tZW50IHdvbid0IHdvcmsgaW4gZW1iZWRkaW5ncyB0aGF0IHVzZVxuICAgICAgICAvLyBhbiBhbHRlcm5hdGUgb2JqZWN0IGZvciB0aGUgY29udGV4dC5cbiAgICAgICAgdmFyIG1heFNhZmVVbnNpZ25lZDMyQml0ID0gTWF0aC5wb3coMiwgMzEpIC0gMTtcbiAgICAgICAgdmFyIGhhc1NhZmFyaVNpZ25lZEludEJ1ZyA9IGlzQWN0dWFsTmFOKG5ldyBEYXRlKDE5NzAsIDAsIDEsIDAsIDAsIDAsIG1heFNhZmVVbnNpZ25lZDMyQml0ICsgMSkuZ2V0VGltZSgpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWltcGxpY2l0LWdsb2JhbHMsIG5vLWdsb2JhbC1hc3NpZ25cbiAgICAgICAgRGF0ZSA9IChmdW5jdGlvbiAoTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgLy8gRGF0ZS5sZW5ndGggPT09IDdcbiAgICAgICAgICAgIHZhciBEYXRlU2hpbSA9IGZ1bmN0aW9uIERhdGUoWSwgTSwgRCwgaCwgbSwgcywgbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIE5hdGl2ZURhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWlsbGlzID0gbXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNTYWZhcmlTaWduZWRJbnRCdWcgJiYgbGVuZ3RoID49IDcgJiYgbXMgPiBtYXhTYWZlVW5zaWduZWQzMkJpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtcyAvIG1heFNhZmVVbnNpZ25lZDMyQml0KSAqIG1heFNhZmVVbnNpZ25lZDMyQml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtc1RvU2hpZnQgLyAxZTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbGxpcyAtPSBzVG9TaGlmdCAqIDFlMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gbGVuZ3RoID09PSAxICYmICRTdHJpbmcoWSkgPT09IFkgLy8gaXNTdHJpbmcoWSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGV4cGxpY2l0bHkgcGFzcyBpdCB0aHJvdWdoIHBhcnNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgTmF0aXZlRGF0ZShEYXRlU2hpbS5wYXJzZShZKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbWFudWFsbHkgbWFrZSBjYWxscyBkZXBlbmRpbmcgb24gYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlbmd0aCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGxlbmd0aCA+PSA3ID8gbmV3IE5hdGl2ZURhdGUoWSwgTSwgRCwgaCwgbSwgc2Vjb25kcywgbWlsbGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDYgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtLCBzZWNvbmRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxlbmd0aCA+PSA1ID8gbmV3IE5hdGl2ZURhdGUoWSwgTSwgRCwgaCwgbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDQgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDMgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBEKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxlbmd0aCA+PSAyID8gbmV3IE5hdGl2ZURhdGUoWSwgTSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDEgPyBuZXcgTmF0aXZlRGF0ZShZIGluc3RhbmNlb2YgTmF0aXZlRGF0ZSA/ICtZIDogWSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBOYXRpdmVEYXRlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IE5hdGl2ZURhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ByaW1pdGl2ZShkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG1peHVwcyB3aXRoIHVuZml4ZWQgRGF0ZSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhkYXRlLCB7IGNvbnN0cnVjdG9yOiBEYXRlU2hpbSB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyAxNS45LjEuMTUgRGF0ZSBUaW1lIFN0cmluZyBGb3JtYXQuXG4gICAgICAgICAgICB2YXIgaXNvRGF0ZUV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKCdeJ1xuICAgICAgICAgICAgICAgICsgJyhcXFxcZHs0fXxbKy1dXFxcXGR7Nn0pJyAvLyBmb3VyLWRpZ2l0IHllYXIgY2FwdHVyZSBvciBzaWduICsgNi1kaWdpdCBleHRlbmRlZCB5ZWFyXG4gICAgICAgICAgICAgICAgKyAnKD86LShcXFxcZHsyfSknIC8vIG9wdGlvbmFsIG1vbnRoIGNhcHR1cmVcbiAgICAgICAgICAgICAgICArICcoPzotKFxcXFxkezJ9KScgLy8gb3B0aW9uYWwgZGF5IGNhcHR1cmVcbiAgICAgICAgICAgICAgICArICcoPzonIC8vIGNhcHR1cmUgaG91cnM6bWludXRlczpzZWNvbmRzLm1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICArICdUKFxcXFxkezJ9KScgLy8gaG91cnMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICArICc6KFxcXFxkezJ9KScgLy8gbWludXRlcyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJyg/OicgLy8gb3B0aW9uYWwgOnNlY29uZHMubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICAgICArICc6KFxcXFxkezJ9KScgLy8gc2Vjb25kcyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICArICcoPzooXFxcXC5cXFxcZHsxLH0pKT8nIC8vIG1pbGxpc2Vjb25kcyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJyk/J1xuICAgICAgICAgICAgICAgICsgJygnIC8vIGNhcHR1cmUgVVRDIG9mZnNldCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgKyAnWnwnIC8vIFVUQyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJyg/OicgLy8gb2Zmc2V0IHNwZWNpZmllciArLy1ob3VyczptaW51dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICArICcoWy0rXSknIC8vIHNpZ24gY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnKFxcXFxkezJ9KScgLy8gaG91cnMgb2Zmc2V0IGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzooXFxcXGR7Mn0pJyAvLyBtaW51dGVzIG9mZnNldCBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJyknXG4gICAgICAgICAgICAgICAgKyAnKT8pPyk/KT8nXG4gICAgICAgICAgICArICckJyk7XG5cbiAgICAgICAgICAgIHZhciBtb250aHMgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzQsIDM2NV07XG5cbiAgICAgICAgICAgIHZhciBkYXlGcm9tTW9udGggPSBmdW5jdGlvbiBkYXlGcm9tTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IG1vbnRoID4gMSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc1ttb250aF1cbiAgICAgICAgICAgICAgICAgICAgKyBNYXRoLmZsb29yKCh5ZWFyIC0gMTk2OSArIHQpIC8gNClcbiAgICAgICAgICAgICAgICAgICAgLSBNYXRoLmZsb29yKCh5ZWFyIC0gMTkwMSArIHQpIC8gMTAwKVxuICAgICAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoKHllYXIgLSAxNjAxICsgdCkgLyA0MDApXG4gICAgICAgICAgICAgICAgICAgICsgKDM2NSAqICh5ZWFyIC0gMTk3MCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB0b1VUQyA9IGZ1bmN0aW9uIHRvVVRDKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1zID0gdDtcbiAgICAgICAgICAgICAgICBpZiAoaGFzU2FmYXJpU2lnbmVkSW50QnVnICYmIG1zID4gbWF4U2FmZVVuc2lnbmVkMzJCaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBtc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zIC8gbWF4U2FmZVVuc2lnbmVkMzJCaXQpICogbWF4U2FmZVVuc2lnbmVkMzJCaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzVG9TaGlmdCA9IE1hdGguZmxvb3IobXNUb1NoaWZ0IC8gMWUzKTtcbiAgICAgICAgICAgICAgICAgICAgcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgbXMgLT0gc1RvU2hpZnQgKiAxZTM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAkTnVtYmVyKG5ldyBOYXRpdmVEYXRlKDE5NzAsIDAsIDEsIDAsIDAsIHMsIG1zKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDb3B5IGFueSBjdXN0b20gbWV0aG9kcyBhIDNyZCBwYXJ0eSBsaWJyYXJ5IG1heSBoYXZlIGFkZGVkXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvd25zKE5hdGl2ZURhdGUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVNoaW1ba2V5XSA9IE5hdGl2ZURhdGVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENvcHkgXCJuYXRpdmVcIiBtZXRob2RzIGV4cGxpY2l0bHk7IHRoZXkgbWF5IGJlIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGVTaGltLCB7XG4gICAgICAgICAgICAgICAgbm93OiBOYXRpdmVEYXRlLm5vdyxcbiAgICAgICAgICAgICAgICBVVEM6IE5hdGl2ZURhdGUuVVRDXG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIERhdGVTaGltLnByb3RvdHlwZSA9IE5hdGl2ZURhdGUucHJvdG90eXBlO1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhEYXRlU2hpbS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IERhdGVTaGltIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBVcGdyYWRlIERhdGUucGFyc2UgdG8gaGFuZGxlIHNpbXBsaWZpZWQgSVNPIDg2MDEgc3RyaW5nc1xuICAgICAgICAgICAgdmFyIHBhcnNlU2hpbSA9IGZ1bmN0aW9uIHBhcnNlKHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGlzb0RhdGVFeHByZXNzaW9uLmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFyc2UgbW9udGhzLCBkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZSB0aGUgVVRDIG9mZnNldCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSAkTnVtYmVyKG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gJE51bWJlcihtYXRjaFsyXSB8fCAxKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkgPSAkTnVtYmVyKG1hdGNoWzNdIHx8IDEpIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPSAkTnVtYmVyKG1hdGNoWzRdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlID0gJE51bWJlcihtYXRjaFs1XSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZCA9ICROdW1iZXIobWF0Y2hbNl0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZCA9IE1hdGguZmxvb3IoJE51bWJlcihtYXRjaFs3XSB8fCAwKSAqIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aW1lIHpvbmUgaXMgbWlzc2VkLCBsb2NhbCBvZmZzZXQgc2hvdWxkIGJlIHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChFUyA1LjEgYnVnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTEyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xvY2FsVGltZSA9IEJvb2xlYW4obWF0Y2hbNF0gJiYgIW1hdGNoWzhdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25PZmZzZXQgPSBtYXRjaFs5XSA9PT0gJy0nID8gMSA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91ck9mZnNldCA9ICROdW1iZXIobWF0Y2hbMTBdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlT2Zmc2V0ID0gJE51bWJlcihtYXRjaFsxMV0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNNaW51dGVzT3JTZWNvbmRzT3JNaWxsaXNlY29uZHMgPSBtaW51dGUgPiAwIHx8IHNlY29uZCA+IDAgfHwgbWlsbGlzZWNvbmQgPiAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyIDwgKGhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyA/IDI0IDogMjUpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBtaW51dGUgPCA2MCAmJiBzZWNvbmQgPCA2MCAmJiBtaWxsaXNlY29uZCA8IDEwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIG1vbnRoID4gLTEgJiYgbW9udGggPCAxMiAmJiBob3VyT2Zmc2V0IDwgMjRcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIG1pbnV0ZU9mZnNldCA8IDYwIC8vIGRldGVjdCBpbnZhbGlkIG9mZnNldHNcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGRheSA+IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBkYXkgPCAoZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoICsgMSkgLSBkYXlGcm9tTW9udGgoeWVhciwgbW9udGgpKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkgKyBkYXkpICogMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBob3VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoaG91ck9mZnNldCAqIHNpZ25PZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICApICogNjA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocmVzdWx0ICsgbWludXRlICsgKG1pbnV0ZU9mZnNldCAqIHNpZ25PZmZzZXQpKSAqIDYwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc2Vjb25kXG4gICAgICAgICAgICAgICAgICAgICAgICApICogMTAwMCkgKyBtaWxsaXNlY29uZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0xvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRvVVRDKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTguNjRlMTUgPD0gcmVzdWx0ICYmIHJlc3VsdCA8PSA4LjY0ZTE1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gTmF0aXZlRGF0ZS5wYXJzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZVNoaW0sIHsgcGFyc2U6IHBhcnNlU2hpbSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIERhdGVTaGltO1xuICAgICAgICB9KERhdGUpKTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS40LjRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS45LjQuNFxuICAgIGlmICghRGF0ZS5ub3cpIHtcbiAgICAgICAgRGF0ZS5ub3cgPSBmdW5jdGlvbiBub3coKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBOdW1iZXJcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVM1LjEgMTUuNy40LjVcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS43LjQuNVxuICAgIHZhciBoYXNUb0ZpeGVkQnVncyA9IE51bWJlclByb3RvdHlwZS50b0ZpeGVkICYmIChcbiAgICAgICAgKDAuMDAwMDgpLnRvRml4ZWQoMykgIT09ICcwLjAwMCdcbiAgICAgICAgfHwgKDAuOSkudG9GaXhlZCgwKSAhPT0gJzEnXG4gICAgICAgIHx8ICgxLjI1NSkudG9GaXhlZCgyKSAhPT0gJzEuMjUnXG4gICAgICAgIHx8ICgxMDAwMDAwMDAwMDAwMDAwMTI4KS50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbiAgICApO1xuXG4gICAgdmFyIHRvRml4ZWRIZWxwZXJzID0ge1xuICAgICAgICBiYXNlOiAxZTcsXG4gICAgICAgIHNpemU6IDYsXG4gICAgICAgIGRhdGE6IFswLCAwLCAwLCAwLCAwLCAwXSxcbiAgICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uIG11bHRpcGx5KG4sIGMpIHtcbiAgICAgICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgICAgICB2YXIgYzIgPSBjO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IHRvRml4ZWRIZWxwZXJzLnNpemUpIHtcbiAgICAgICAgICAgICAgICBjMiArPSBuICogdG9GaXhlZEhlbHBlcnMuZGF0YVtpXTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kYXRhW2ldID0gYzIgJSB0b0ZpeGVkSGVscGVycy5iYXNlO1xuICAgICAgICAgICAgICAgIGMyID0gTWF0aC5mbG9vcihjMiAvIHRvRml4ZWRIZWxwZXJzLmJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkaXZpZGU6IGZ1bmN0aW9uIGRpdmlkZShuKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRvRml4ZWRIZWxwZXJzLnNpemU7XG4gICAgICAgICAgICB2YXIgYyA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgICAgICBjICs9IHRvRml4ZWRIZWxwZXJzLmRhdGFbaV07XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGF0YVtpXSA9IE1hdGguZmxvb3IoYyAvIG4pO1xuICAgICAgICAgICAgICAgIGMgPSAoYyAlIG4pICogdG9GaXhlZEhlbHBlcnMuYmFzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbnVtVG9TdHJpbmc6IGZ1bmN0aW9uIG51bVRvU3RyaW5nKCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0b0ZpeGVkSGVscGVycy5zaXplO1xuICAgICAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAkU3RyaW5nKHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocyA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBzdHJTbGljZSgnMDAwMDAwMCcsIDAsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0sXG4gICAgICAgIHBvdzogZnVuY3Rpb24gcG93KHgsIG4sIGFjYykge1xuICAgICAgICAgICAgcmV0dXJuIChuID09PSAwID8gYWNjIDogKG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYykpKTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9nOiBmdW5jdGlvbiBsb2coeCkge1xuICAgICAgICAgICAgdmFyIG4gPSAwO1xuICAgICAgICAgICAgdmFyIHgyID0geDtcbiAgICAgICAgICAgIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgICAgICAgICAgICAgbiArPSAxMjtcbiAgICAgICAgICAgICAgICB4MiAvPSA0MDk2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHgyID49IDIpIHtcbiAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgeDIgLz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB0b0ZpeGVkU2hpbSA9IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICAgICAgdmFyIGYsIHgsIHMsIG0sIGUsIHosIGosIGs7XG5cbiAgICAgICAgLy8gVGVzdCBmb3IgTmFOIGFuZCByb3VuZCBmcmFjdGlvbkRpZ2l0cyBkb3duXG4gICAgICAgIGYgPSAkTnVtYmVyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICAgICAgZiA9IGlzQWN0dWFsTmFOKGYpID8gMCA6IE1hdGguZmxvb3IoZik7XG5cbiAgICAgICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ051bWJlci50b0ZpeGVkIGNhbGxlZCB3aXRoIGludmFsaWQgbnVtYmVyIG9mIGRlY2ltYWxzJyk7XG4gICAgICAgIH1cblxuICAgICAgICB4ID0gJE51bWJlcih0aGlzKTtcblxuICAgICAgICBpZiAoaXNBY3R1YWxOYU4oeCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnTmFOJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGl0IGlzIHRvbyBiaWcgb3Igc21hbGwsIHJldHVybiB0aGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBudW1iZXJcbiAgICAgICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSB7XG4gICAgICAgICAgICByZXR1cm4gJFN0cmluZyh4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHMgPSAnJztcblxuICAgICAgICBpZiAoeCA8IDApIHtcbiAgICAgICAgICAgIHMgPSAnLSc7XG4gICAgICAgICAgICB4ID0gLXg7XG4gICAgICAgIH1cblxuICAgICAgICBtID0gJzAnO1xuXG4gICAgICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgICAgICAgIC8vIDFlLTIxIDwgeCA8IDFlMjFcbiAgICAgICAgICAgIC8vIC03MCA8IGxvZzIoeCkgPCA3MFxuICAgICAgICAgICAgZSA9IHRvRml4ZWRIZWxwZXJzLmxvZyh4ICogdG9GaXhlZEhlbHBlcnMucG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgICAgICAgIHogPSAoZSA8IDAgPyB4ICogdG9GaXhlZEhlbHBlcnMucG93KDIsIC1lLCAxKSA6IHggLyB0b0ZpeGVkSGVscGVycy5wb3coMiwgZSwgMSkpO1xuICAgICAgICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwOyAvLyBNYXRoLnBvdygyLCA1Mik7XG4gICAgICAgICAgICBlID0gNTIgLSBlO1xuXG4gICAgICAgICAgICAvLyAtMTggPCBlIDwgMTIyXG4gICAgICAgICAgICAvLyB4ID0geiAvIDIgXiBlXG4gICAgICAgICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgwLCB6KTtcbiAgICAgICAgICAgICAgICBqID0gZjtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaiAtPSA3O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KHRvRml4ZWRIZWxwZXJzLnBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICAgICAgICAgIGogPSBlIC0gMTtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICAgICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxLCAxKTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kaXZpZGUoMik7XG4gICAgICAgICAgICAgICAgbSA9IHRvRml4ZWRIZWxwZXJzLm51bVRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDAsIHopO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDEgPDwgKC1lKSwgMCk7XG4gICAgICAgICAgICAgICAgbSA9IHRvRml4ZWRIZWxwZXJzLm51bVRvU3RyaW5nKCkgKyBzdHJTbGljZSgnMC4wMDAwMDAwMDAwMDAwMDAwMDAwMCcsIDIsIDIgKyBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmID4gMCkge1xuICAgICAgICAgICAgayA9IG0ubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAoayA8PSBmKSB7XG4gICAgICAgICAgICAgICAgbSA9IHMgKyBzdHJTbGljZSgnMC4wMDAwMDAwMDAwMDAwMDAwMDAwJywgMCwgZiAtIGsgKyAyKSArIG07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG0gPSBzICsgc3RyU2xpY2UobSwgMCwgayAtIGYpICsgJy4nICsgc3RyU2xpY2UobSwgayAtIGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbSA9IHMgKyBtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKE51bWJlclByb3RvdHlwZSwgeyB0b0ZpeGVkOiB0b0ZpeGVkU2hpbSB9LCBoYXNUb0ZpeGVkQnVncyk7XG5cbiAgICB2YXIgaGFzVG9QcmVjaXNpb25VbmRlZmluZWRCdWcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIDEuMC50b1ByZWNpc2lvbih1bmRlZmluZWQpID09PSAnMSc7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSgpKTtcbiAgICB2YXIgb3JpZ2luYWxUb1ByZWNpc2lvbiA9IE51bWJlclByb3RvdHlwZS50b1ByZWNpc2lvbjtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKE51bWJlclByb3RvdHlwZSwge1xuICAgICAgICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHByZWNpc2lvbiA9PT0gJ3VuZGVmaW5lZCcgPyBvcmlnaW5hbFRvUHJlY2lzaW9uLmNhbGwodGhpcykgOiBvcmlnaW5hbFRvUHJlY2lzaW9uLmNhbGwodGhpcywgcHJlY2lzaW9uKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc1RvUHJlY2lzaW9uVW5kZWZpbmVkQnVnKTtcblxuICAgIC8vXG4gICAgLy8gU3RyaW5nXG4gICAgLy8gPT09PT09XG4gICAgLy9cblxuICAgIC8vIEVTNSAxNS41LjQuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS41LjQuMTRcblxuICAgIC8vIFtidWdmaXgsIElFIGx0IDksIGZpcmVmb3ggNCwgS29ucXVlcm9yLCBPcGVyYSwgb2JzY3VyZSBicm93c2Vyc11cbiAgICAvLyBNYW55IGJyb3dzZXJzIGRvIG5vdCBzcGxpdCBwcm9wZXJseSB3aXRoIHJlZ3VsYXIgZXhwcmVzc2lvbnMgb3IgdGhleVxuICAgIC8vIGRvIG5vdCBwZXJmb3JtIHRoZSBzcGxpdCBjb3JyZWN0bHkgdW5kZXIgb2JzY3VyZSBjb25kaXRpb25zLlxuICAgIC8vIFNlZSBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvY3Jvc3MtYnJvd3Nlci1zcGxpdFxuICAgIC8vIEkndmUgdGVzdGVkIGluIG1hbnkgYnJvd3NlcnMgYW5kIHRoaXMgc2VlbXMgdG8gY292ZXIgdGhlIGRldmlhbnQgb25lczpcbiAgICAvLyAgICAnYWInLnNwbGl0KC8oPzphYikqLykgc2hvdWxkIGJlIFtcIlwiLCBcIlwiXSwgbm90IFtcIlwiXVxuICAgIC8vICAgICcuJy5zcGxpdCgvKC4/KSguPykvKSBzaG91bGQgYmUgW1wiXCIsIFwiLlwiLCBcIlwiLCBcIlwiXSwgbm90IFtcIlwiLCBcIlwiXVxuICAgIC8vICAgICd0ZXNzdCcuc3BsaXQoLyhzKSovKSBzaG91bGQgYmUgW1widFwiLCB1bmRlZmluZWQsIFwiZVwiLCBcInNcIiwgXCJ0XCJdLCBub3RcbiAgICAvLyAgICAgICBbdW5kZWZpbmVkLCBcInRcIiwgdW5kZWZpbmVkLCBcImVcIiwgLi4uXVxuICAgIC8vICAgICcnLnNwbGl0KC8uPy8pIHNob3VsZCBiZSBbXSwgbm90IFtcIlwiXVxuICAgIC8vICAgICcuJy5zcGxpdCgvKCkoKS8pIHNob3VsZCBiZSBbXCIuXCJdLCBub3QgW1wiXCIsIFwiXCIsIFwiLlwiXVxuXG4gICAgaWYgKFxuICAgICAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9PSAyXG4gICAgICAgIHx8ICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDRcbiAgICAgICAgfHwgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pWzFdID09PSAndCdcbiAgICAgICAgfHwgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPT0gNFxuICAgICAgICB8fCAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgICAgICAgfHwgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMVxuICAgICkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbXBsaWFudEV4ZWNOcGNnID0gdHlwZW9mICgvKCk/Py8pLmV4ZWMoJycpWzFdID09PSAndW5kZWZpbmVkJzsgLy8gTlBDRzogbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAgIHZhciBtYXhTYWZlMzJCaXRJbnQgPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuXG4gICAgICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnICYmIGxpbWl0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgICAgICAgICAgIGlmICghaXNSZWdleChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJTcGxpdCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpIC8vIGluIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyksIC8vIEZpcmVmb3ggMysgYW5kIEVTNlxuICAgICAgICAgICAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAgICAgICAgICAgICAqIElmIHVuZGVmaW5lZDogNDI5NDk2NzI5NSAvLyBtYXhTYWZlMzJCaXRJbnRcbiAgICAgICAgICAgICAgICAgKiBJZiAwLCBJbmZpbml0eSwgb3IgTmFOOiAwXG4gICAgICAgICAgICAgICAgICogSWYgcG9zaXRpdmUgbnVtYmVyOiBsaW1pdCA9IE1hdGguZmxvb3IobGltaXQpOyBpZiAobGltaXQgPiA0Mjk0OTY3Mjk1KSBsaW1pdCAtPSA0Mjk0OTY3Mjk2O1xuICAgICAgICAgICAgICAgICAqIElmIG5lZ2F0aXZlIG51bWJlcjogNDI5NDk2NzI5NiAtIE1hdGguZmxvb3IoTWF0aC5hYnMobGltaXQpKVxuICAgICAgICAgICAgICAgICAqIElmIG90aGVyOiBUeXBlLWNvbnZlcnQsIHRoZW4gdXNlIHRoZSBhYm92ZSBydWxlc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciBzcGxpdExpbWl0ID0gdHlwZW9mIGxpbWl0ID09PSAndW5kZWZpbmVkJyA/IG1heFNhZmUzMkJpdEludCA6IEVTLlRvVWludDMyKGxpbWl0KTtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwob3V0cHV0LCBzdHJTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3Vwc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbaV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaC5hcHBseShvdXRwdXQsIGFycmF5U2xpY2UobWF0Y2gsIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gc3BsaXRMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwob3V0cHV0LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChvdXRwdXQsIHN0clNsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IHNwbGl0TGltaXQgPyBhcnJheVNsaWNlKG91dHB1dCwgMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KCkpO1xuXG4gICAgLy8gW2J1Z2ZpeCwgY2hyb21lXVxuICAgIC8vIElmIHNlcGFyYXRvciBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIHJlc3VsdCBhcnJheSBjb250YWlucyBqdXN0IG9uZSBTdHJpbmcsXG4gICAgLy8gd2hpY2ggaXMgdGhlIHRoaXMgdmFsdWUgKGNvbnZlcnRlZCB0byBhIFN0cmluZykuIElmIGxpbWl0IGlzIG5vdCB1bmRlZmluZWQsXG4gICAgLy8gdGhlbiB0aGUgb3V0cHV0IGFycmF5IGlzIHRydW5jYXRlZCBzbyB0aGF0IGl0IGNvbnRhaW5zIG5vIG1vcmUgdGhhbiBsaW1pdFxuICAgIC8vIGVsZW1lbnRzLlxuICAgIC8vIFwiMFwiLnNwbGl0KHVuZGVmaW5lZCwgMCkgLT4gW11cbiAgICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh2b2lkIDAsIDApLmxlbmd0aCkge1xuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyU3BsaXQodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHN0cl9yZXBsYWNlID0gU3RyaW5nUHJvdG90eXBlLnJlcGxhY2U7XG4gICAgdmFyIHJlcGxhY2VSZXBvcnRzR3JvdXBzQ29ycmVjdGx5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgICAgICAneCcucmVwbGFjZSgveCguKT8vZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cCkge1xuICAgICAgICAgICAgcHVzaENhbGwoZ3JvdXBzLCBncm91cCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ3JvdXBzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgZ3JvdXBzWzBdID09PSAndW5kZWZpbmVkJztcbiAgICB9KCkpO1xuXG4gICAgaWYgKCFyZXBsYWNlUmVwb3J0c0dyb3Vwc0NvcnJlY3RseSkge1xuICAgICAgICBTdHJpbmdQcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGlzRm4gPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgaGFzQ2FwdHVyaW5nR3JvdXBzID0gaXNSZWdleChzZWFyY2hWYWx1ZSkgJiYgKC9cXClbKj9dLykudGVzdChzZWFyY2hWYWx1ZS5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFpc0ZuIHx8ICFoYXNDYXB0dXJpbmdHcm91cHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UuY2FsbCh0aGlzLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRSZXBsYWNlVmFsdWUgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbExhc3RJbmRleCA9IHNlYXJjaFZhbHVlLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVmFsdWUubGFzdEluZGV4ID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHNlYXJjaFZhbHVlLmV4ZWMobWF0Y2gpIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZS5sYXN0SW5kZXggPSBvcmlnaW5hbExhc3RJbmRleDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChhcmdzLCBhcmd1bWVudHNbbGVuZ3RoIC0gMl0sIGFyZ3VtZW50c1tsZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlVmFsdWUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UuY2FsbCh0aGlzLCBzZWFyY2hWYWx1ZSwgd3JhcHBlZFJlcGxhY2VWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRUNNQS0yNjIsIDNyZCBCLjIuM1xuICAgIC8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4gICAgLy8gbm9uLW5vcm1hdGl2ZSBzZWN0aW9uIHN1Z2dlc3RpbmcgdW5pZm9ybSBzZW1hbnRpY3MgYW5kIGl0IHNob3VsZCBiZVxuICAgIC8vIG5vcm1hbGl6ZWQgYWNyb3NzIGFsbCBicm93c2Vyc1xuICAgIC8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG4gICAgdmFyIHN0cmluZ19zdWJzdHIgPSBTdHJpbmdQcm90b3R5cGUuc3Vic3RyO1xuICAgIHZhciBoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyA9ICcnLnN1YnN0ciAmJiAnMGInLnN1YnN0cigtMSkgIT09ICdiJztcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICBzdWJzdHI6IGZ1bmN0aW9uIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZFN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFN0YXJ0ID0gbWF4KHRoaXMubGVuZ3RoICsgc3RhcnQsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbCh0aGlzLCBub3JtYWxpemVkU3RhcnQsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZVN1YnN0ckJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNS40LjIwXG4gICAgLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuICAgIHZhciB3cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMydcbiAgICAgICAgKyAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjgnXG4gICAgICAgICsgJ1xcdTIwMjlcXHVGRUZGJztcbiAgICB2YXIgemVyb1dpZHRoID0gJ1xcdTIwMGInO1xuICAgIHZhciB3c1JlZ2V4Q2hhcnMgPSAnWycgKyB3cyArICddJztcbiAgICB2YXIgdHJpbUJlZ2luUmVnZXhwID0gbmV3IFJlZ0V4cCgnXicgKyB3c1JlZ2V4Q2hhcnMgKyB3c1JlZ2V4Q2hhcnMgKyAnKicpO1xuICAgIHZhciB0cmltRW5kUmVnZXhwID0gbmV3IFJlZ0V4cCh3c1JlZ2V4Q2hhcnMgKyB3c1JlZ2V4Q2hhcnMgKyAnKiQnKTtcbiAgICB2YXIgaGFzVHJpbVdoaXRlc3BhY2VCdWcgPSBTdHJpbmdQcm90b3R5cGUudHJpbSAmJiAod3MudHJpbSgpIHx8ICF6ZXJvV2lkdGgudHJpbSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICAvLyBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvZmFzdGVyLXRyaW0tamF2YXNjcmlwdFxuICAgICAgICAvLyBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS93aGl0ZXNwYWNlLWRldmlhdGlvbnMvXG4gICAgICAgIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FuJ3QgY29udmVydCBcIiArIHRoaXMgKyAnIHRvIG9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRTdHJpbmcodGhpcykucmVwbGFjZSh0cmltQmVnaW5SZWdleHAsICcnKS5yZXBsYWNlKHRyaW1FbmRSZWdleHAsICcnKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc1RyaW1XaGl0ZXNwYWNlQnVnKTtcbiAgICB2YXIgdHJpbSA9IGNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xuXG4gICAgdmFyIGhhc0xhc3RJbmRleEJ1ZyA9IFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZiAmJiAnYWJj44GC44GEJy5sYXN0SW5kZXhPZign44GC44GEJywgMikgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgUyA9ICRTdHJpbmcodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VhcmNoU3RyID0gJFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgICAgICAgICAgdmFyIG51bVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gJE51bWJlcihhcmd1bWVudHNbMV0pIDogTmFOO1xuICAgICAgICAgICAgdmFyIHBvcyA9IGlzQWN0dWFsTmFOKG51bVBvcykgPyBJbmZpbml0eSA6IEVTLlRvSW50ZWdlcihudW1Qb3MpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbWluKG1heChwb3MsIDApLCBTLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgc2VhcmNoTGVuID0gc2VhcmNoU3RyLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBrID0gc3RhcnQgKyBzZWFyY2hMZW47XG4gICAgICAgICAgICB3aGlsZSAoayA+IDApIHtcbiAgICAgICAgICAgICAgICBrID0gbWF4KDAsIGsgLSBzZWFyY2hMZW4pO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0ckluZGV4T2Yoc3RyU2xpY2UoUywgaywgc3RhcnQgKyBzZWFyY2hMZW4pLCBzZWFyY2hTdHIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsgKyBpbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9LCBoYXNMYXN0SW5kZXhCdWcpO1xuXG4gICAgdmFyIG9yaWdpbmFsTGFzdEluZGV4T2YgPSBTdHJpbmdQcm90b3R5cGUubGFzdEluZGV4T2Y7XG4gICAgZGVmaW5lUHJvcGVydGllcyhTdHJpbmdQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaFN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sIFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZi5sZW5ndGggIT09IDEpO1xuXG4gICAgLy8gRVMtNSAxNS4xLjIuMlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByYWRpeFxuICAgIGlmIChwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8IHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWdsb2JhbC1hc3NpZ24sIG5vLWltcGxpY2l0LWdsb2JhbHNcbiAgICAgICAgcGFyc2VJbnQgPSAoZnVuY3Rpb24gKG9yaWdQYXJzZUludCkge1xuICAgICAgICAgICAgdmFyIGhleFJlZ2V4ID0gL15bLStdPzBbeFhdLztcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBTeW1ib2xzIGluIG5vZGUgOC4zLzguNFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgICAgICAnJyArIHN0cjsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dJbXBsaWNpdFR5cGVDb252ZXJzaW9uXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRyaW0oU3RyaW5nKHN0cikpO1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0ZWRSYWRpeCA9ICROdW1iZXIocmFkaXgpIHx8IChoZXhSZWdleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ1BhcnNlSW50KHN0cmluZywgZGVmYXVsdGVkUmFkaXgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfShwYXJzZUludCkpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4zXG4gICAgaWYgKDEgLyBwYXJzZUZsb2F0KCctMCcpICE9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWdsb2JhbC1hc3NpZ24sIG5vLWltcGxpY2l0LWdsb2JhbHMsIG5vLW5hdGl2ZS1yZWFzc2lnblxuICAgICAgICBwYXJzZUZsb2F0ID0gKGZ1bmN0aW9uIChvcmlnUGFyc2VGbG9hdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0U3RyaW5nID0gdHJpbShTdHJpbmcoc3RyaW5nKSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9yaWdQYXJzZUZsb2F0KGlucHV0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0clNsaWNlKGlucHV0U3RyaW5nLCAwLCAxKSA9PT0gJy0nID8gLTAgOiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHBhcnNlRmxvYXQpKTtcbiAgICB9XG5cbiAgICBpZiAoU3RyaW5nKG5ldyBSYW5nZUVycm9yKCd0ZXN0JykpICE9PSAnUmFuZ2VFcnJvcjogdGVzdCcpIHtcbiAgICAgICAgdmFyIGVycm9yVG9TdHJpbmdTaGltID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FuJ3QgY29udmVydCBcIiArIHRoaXMgKyAnIHRvIG9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9ICdFcnJvcic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSAkU3RyaW5nKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1zZyA9IHRoaXMubWVzc2FnZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIG1zZyA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG1zZyA9ICRTdHJpbmcobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5hbWUgKyAnOiAnICsgbXNnO1xuICAgICAgICB9O1xuICAgICAgICAvLyBjYW4ndCB1c2UgZGVmaW5lUHJvcGVydGllcyBoZXJlIGJlY2F1c2Ugb2YgdG9TdHJpbmcgZW51bWVyYXRpb24gaXNzdWUgaW4gSUUgPD0gOFxuICAgICAgICBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBlcnJvclRvU3RyaW5nU2hpbTtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB2YXIgZW5zdXJlTm9uRW51bWVyYWJsZSA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgICAgICAgICAgIGlmIChpc0VudW0ob2JqLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBkZXNjLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBlbnN1cmVOb25FbnVtZXJhYmxlKEVycm9yLnByb3RvdHlwZSwgJ21lc3NhZ2UnKTtcbiAgICAgICAgaWYgKEVycm9yLnByb3RvdHlwZS5tZXNzYWdlICE9PSAnJykge1xuICAgICAgICAgICAgRXJyb3IucHJvdG90eXBlLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVOb25FbnVtZXJhYmxlKEVycm9yLnByb3RvdHlwZSwgJ25hbWUnKTtcbiAgICB9XG5cbiAgICBpZiAoU3RyaW5nKC9hL21pZykgIT09ICcvYS9naW0nKSB7XG4gICAgICAgIHZhciByZWdleFRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gJy8nICsgdGhpcy5zb3VyY2UgKyAnLyc7XG4gICAgICAgICAgICBpZiAodGhpcy5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gJ2cnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSAnaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gJ20nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FuJ3QgdXNlIGRlZmluZVByb3BlcnRpZXMgaGVyZSBiZWNhdXNlIG9mIHRvU3RyaW5nIGVudW1lcmF0aW9uIGlzc3VlIGluIElFIDw9IDhcbiAgICAgICAgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZyA9IHJlZ2V4VG9TdHJpbmc7XG4gICAgfVxufSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQXJyYXlQcm90b3R5cGVNYXAoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRBcnJheS5wcm90b3R5cGUsXG5cdFx0eyBtYXA6IHBvbHlmaWxsIH0sXG5cdFx0eyBtYXA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYXRNYXAoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRBcnJheS5wcm90b3R5cGUsXG5cdFx0eyBmbGF0TWFwOiBwb2x5ZmlsbCB9LFxuXHRcdHsgZmxhdE1hcDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXRNYXAgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQXJyYXlTcGVjaWVzQ3JlYXRlJyk7XG52YXIgRmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvRmxhdHRlbkludG9BcnJheScpO1xudmFyIEdldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvR2V0Jyk7XG52YXIgVG9JbnRlZ2VyID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0ludGVnZXInKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGF0KCkge1xuXHR2YXIgTyA9IFRvT2JqZWN0KHRoaXMpO1xuXHR2YXIgc291cmNlTGVuID0gVG9MZW5ndGgoR2V0KE8sICdsZW5ndGgnKSk7XG5cblx0dmFyIGRlcHRoTnVtID0gMTtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0ZGVwdGhOdW0gPSBUb0ludGVnZXIoYXJndW1lbnRzWzBdKTtcblx0fVxuXG5cdHZhciBBID0gQXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuXHRGbGF0dGVuSW50b0FycmF5KEEsIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhOdW0pO1xuXHRyZXR1cm4gQTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNjb25zdHJ1Y3RvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIWFyZ3VtZW50LnByb3RvdHlwZTsgLy8gdW5mb3J0dW5hdGVseSB0aGVyZSdzIG5vIHdheSB0byB0cnVseSBjaGVjayB0aGlzIHdpdGhvdXQgdHJ5L2NhdGNoIGBuZXcgYXJndW1lbnRgXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCdlcy10by1wcmltaXRpdmUvZXMyMDE1Jyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcmltaXRpdmVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQsIGFyZ3VtZW50c1sxXSk7XG5cdH1cblx0cmV0dXJuIHRvUHJpbWl0aXZlKGlucHV0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczIwMTUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZXNjcmlwdGlvblBvbHlmaWxsKCkge1xuXHRpZiAoIWhhc1N5bWJvbHMgfHwgdHlwZW9mIGdPUEQgIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBkZXNjID0gZ09QRChTeW1ib2wucHJvdG90eXBlLCAnZGVzY3JpcHRpb24nKTtcblx0aWYgKCFkZXNjIHx8IHR5cGVvZiBkZXNjLmdldCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcblx0fVxuXG5cdHZhciBlbXB0eVN5bWJvbERlc2MgPSBkZXNjLmdldC5jYWxsKFN5bWJvbCgpKTtcblx0dmFyIGVtcHR5RGVzY1ZhbGlkID0gdHlwZW9mIGVtcHR5U3ltYm9sRGVzYyA9PT0gJ3VuZGVmaW5lZCcgfHwgZW1wdHlTeW1ib2xEZXNjID09PSAnJztcblx0aWYgKCFlbXB0eURlc2NWYWxpZCB8fCBkZXNjLmdldC5jYWxsKFN5bWJvbCgnYScpKSAhPT0gJ2EnKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdHJldHVybiBkZXNjLmdldDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9